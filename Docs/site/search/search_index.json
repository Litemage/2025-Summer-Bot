{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>Also look at: mkdocs-material</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"argos-lib/annotated.html","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>struct ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. </li> <li>class Debouncer </li> <li>class EdgeDetector </li> <li>class NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. </li> <li>class NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. </li> <li>class NetworkTablesHomingStorage Saves and loads swerve module homes to networkTables. </li> <li>class SwerveFSHomingStorage </li> <li>namespace anonymous namespace{C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/trigger_composition.cpp} </li> <li>namespace argos_lib <ul> <li>struct ArgosColor </li> <li>class ArgosLogger Log to the console in a clean, repeatable manner. </li> <li>struct CANAddress </li> <li>struct ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. </li> <li>struct DebounceSettings </li> <li>class Debouncer </li> <li>class EdgeDetector </li> <li>class FSHomingStorage Saves and loads home positions from filesystem. </li> <li>class GenericDebouncer </li> <li>class HomingStorageInterface Interface capable of saving and loading home positions from persistent storage. </li> <li>class HysteresisFilter A simple hysteresis filter for giving a bool output for a threshold. </li> <li>struct InterpMapPoint Point that helps generate an interpolation map. </li> <li>class InterpolationMap Performs linear interpolation of a value based on a set of input-&gt;output mapping points. </li> <li>struct LEDState Color and animation status for an individual LED. </li> <li>class LEDSubsystem </li> <li>class NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. </li> <li>class NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. </li> <li>class SwapControllersCommand Swaps rolls of two controllers. Useful if one controller breaks during a match. </li> <li>class SwappableControllersSubsystem Allows two controllers to swap between \"Driver\" and \"Operator\" control schemes on the fly by swapping the m_driverController and m_operatorController objects. </li> <li>class SwerveFSHomingStorage </li> <li>class SwerveHomeStorageInterface Interface capable of saving and loading module home positions from persistent storage. </li> <li>struct VibrationStatus Vibration percentages that can be sent to controller for user feedback. </li> <li>class XboxController <ul> <li>struct UpdateStatus State of an individual button. </li> </ul> </li> <li>namespace angle </li> <li>namespace cancoder_config </li> <li>namespace colors </li> <li>namespace falcon_config </li> <li>namespace gamma_corrected_colors </li> <li>namespace led <ul> <li>struct Animation A representation of a custom LED animation. </li> <li>class Array2D Array2D representation where origin is at bottom left. </li> <li>struct PanelScanParams </li> <li>struct Sprite https://en.wikipedia.org/wiki/Sprite_(computer_graphics) __    </li> <li>namespace animation </li> </ul> </li> <li>namespace odometry_aim </li> <li>namespace status_frame_config </li> <li>namespace swerve <ul> <li>class NetworkTablesHomingStorage Saves and loads swerve module homes to networkTables. </li> <li>struct SwerveModulePositions Representation of the absolute encoder position of each module at home position. </li> <li>struct TranslationSpeeds Translation speeds as percent max output. </li> </ul> </li> <li>namespace talonsrx_config </li> <li>namespace testing </li> <li>namespace triggers </li> </ul> </li> <li>struct LEDUpdateGroup Represents a contiguous block of LEDs that have the same color. </li> <li>struct DPadButtons Parsed directional pad button states. </li> <li>namespace frc </li> <li>namespace frc2 </li> <li>namespace chrono_literals </li> </ul>"},{"location":"argos-lib/files.html","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir src <ul> <li>dir argos_lib <ul> <li>dir cpp <ul> <li>dir commands <ul> <li>file swap_controllers_command.cpp </li> </ul> </li> <li>dir config <ul> <li>file robot_instance.cpp </li> <li>file status_frame_config.cpp </li> </ul> </li> <li>dir controller <ul> <li>file trigger_composition.cpp </li> <li>file vibration.cpp </li> <li>file xbox_controller.cpp </li> </ul> </li> <li>dir general <ul> <li>file angle_utils.cpp </li> <li>file debouncer.cpp </li> <li>file edge_detector.cpp </li> <li>file nt_motor_pid_tuner.cpp </li> <li>file nt_subscriber.cpp </li> <li>file odometry_aim.cpp </li> <li>file swerve_utils.cpp </li> </ul> </li> <li>dir homing <ul> <li>file fs_homing.cpp </li> <li>file network_tables_homing_storage.cpp </li> </ul> </li> <li>dir led <ul> <li>file animation.cpp </li> <li>file geometry.cpp </li> <li>file panel.cpp </li> </ul> </li> <li>dir subsystems <ul> <li>file led_subsystem.cpp </li> <li>file swappable_controllers_subsystem.cpp </li> </ul> </li> </ul> </li> <li>dir include <ul> <li>dir argos_lib <ul> <li>dir commands <ul> <li>file swap_controllers_command.h </li> </ul> </li> <li>dir config <ul> <li>file cancoder_config.h </li> <li>file compile_time_member_check.h </li> <li>file config_types.h </li> <li>file falcon_config.h </li> <li>file status_frame_config.h </li> <li>file talonsrx_config.h </li> </ul> </li> <li>dir controller <ul> <li>file trigger_composition.h </li> <li>file vibration.h </li> <li>file xbox_controller.h </li> </ul> </li> <li>dir general <ul> <li>file angle_utils.h </li> <li>file color.h </li> <li>file debounce_settings.h </li> <li>file debouncer.h </li> <li>file edge_detector.h </li> <li>file general.h </li> <li>file generic_debouncer.h </li> <li>file hysteresis_filter.h </li> <li>file interpolation.h </li> <li>file log.h </li> <li>file nt_motor_pid_tuner.h </li> <li>file nt_subscriber.h </li> <li>file odometry_aim.h </li> <li>file swerve_utils.h </li> </ul> </li> <li>dir homing <ul> <li>file fs_homing.h </li> <li>file homing_interface.h </li> <li>file network_tables_homing_storage.h </li> </ul> </li> <li>dir led <ul> <li>file animiation.h </li> <li>file geometry.h </li> <li>file panel.h </li> </ul> </li> <li>dir subsystems <ul> <li>file led_subsystem.h </li> <li>file swappable_controllers_subsystem.h </li> </ul> </li> <li>dir testing <ul> <li>file assertions.h </li> </ul> </li> </ul> </li> </ul> </li> <li>dir test <ul> <li>file edge_detector_test.cpp </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"argos-lib/struct_closed_loop_sensor_conversions.html","title":"Struct ClosedLoopSensorConversions","text":"<p>ClassList &gt; ClosedLoopSensorConversions</p> <p>Conversion factors to aid displaying sensor values as meaningful numbers. </p> <ul> <li><code>#include &lt;nt_motor_pid_tuner.h&gt;</code></li> </ul>"},{"location":"argos-lib/struct_closed_loop_sensor_conversions.html#public-attributes","title":"Public Attributes","text":"Type Name double position   = <code>{1.0}</code>Multiply by this to convert sensor position units to physical units. double setpoint   = <code>/* multi line expression */</code>Multiply by this to convert sensor setpoint units to physical units (should be the same as either position or velocity) double velocity   = <code>{1.0}</code>Multiply by this to convert sensor velocity units to physical units."},{"location":"argos-lib/struct_closed_loop_sensor_conversions.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/struct_closed_loop_sensor_conversions.html#variable-position","title":"variable position","text":"<p>Multiply by this to convert sensor position units to physical units. <pre><code>double argos_lib::ClosedLoopSensorConversions::position;\n</code></pre></p>"},{"location":"argos-lib/struct_closed_loop_sensor_conversions.html#variable-setpoint","title":"variable setpoint","text":"<p>Multiply by this to convert sensor setpoint units to physical units (should be the same as either position or velocity) <pre><code>double argos_lib::ClosedLoopSensorConversions::setpoint;\n</code></pre></p>"},{"location":"argos-lib/struct_closed_loop_sensor_conversions.html#variable-velocity","title":"variable velocity","text":"<p>Multiply by this to convert sensor velocity units to physical units. <pre><code>double argos_lib::ClosedLoopSensorConversions::velocity;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_motor_pid_tuner.h</code></p>"},{"location":"argos-lib/class_debouncer.html","title":"Class Debouncer","text":"<p>ClassList &gt; Debouncer</p> <p>More...</p>"},{"location":"argos-lib/class_debouncer.html#public-functions","title":"Public Functions","text":"Type Name Debouncer (const argos_lib::DebounceSettings debounceSettings, bool initialValue=false) Construct a new Debouncer object with asymmetric times. Debouncer (const units::millisecond_t symmetricDebounceTime) Construct a new Debouncer object with symmetric times. bool GetDebouncedStatus () Retrieve latest debounced status. bool GetRawStatus () Retrieve latest raw status. void Reset (bool newVal) Resets debouncer to a known status like at construction. bool operator() (bool newVal) Update debouncer with new input and retrieve latest debounced status."},{"location":"argos-lib/class_debouncer.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/class_debouncer.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/class_debouncer.html#function-debouncer-12","title":"function Debouncer [1/2]","text":"<p>Construct a new Debouncer object with asymmetric times. <pre><code>explicit Debouncer::Debouncer (\n    const argos_lib::DebounceSettings debounceSettings,\n    bool initialValue=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>debounceSettings</code> Configuration settings for activate and clear times </li> <li><code>initialValue</code> Initializes debouncer to this value </li> </ul>"},{"location":"argos-lib/class_debouncer.html#function-debouncer-22","title":"function Debouncer [2/2]","text":"<p>Construct a new Debouncer object with symmetric times. <pre><code>explicit Debouncer::Debouncer (\n    const units::millisecond_t symmetricDebounceTime\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>symmetricDebounceTime</code> Symmetric activate and clear time </li> </ul>"},{"location":"argos-lib/class_debouncer.html#function-getdebouncedstatus","title":"function GetDebouncedStatus","text":"<p>Retrieve latest debounced status. <pre><code>bool Debouncer::GetDebouncedStatus () \n</code></pre></p> <p>Returns:</p> <p>Value after applying debounce </p>"},{"location":"argos-lib/class_debouncer.html#function-getrawstatus","title":"function GetRawStatus","text":"<p>Retrieve latest raw status. <pre><code>bool Debouncer::GetRawStatus () \n</code></pre></p> <p>Returns:</p> <p>Latest value without applying debounce </p>"},{"location":"argos-lib/class_debouncer.html#function-reset","title":"function Reset","text":"<p>Resets debouncer to a known status like at construction. <pre><code>void Debouncer::Reset (\n    bool newVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newVal</code> Value to set to </li> </ul>"},{"location":"argos-lib/class_debouncer.html#function-operator","title":"function operator()","text":"<p>Update debouncer with new input and retrieve latest debounced status. <pre><code>bool Debouncer::operator() (\n    bool newVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newVal</code> Latest raw value </li> </ul> <p>Returns:</p> <p>Value after applying debounce </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/debouncer.h</code></p>"},{"location":"argos-lib/class_edge_detector.html","title":"Class EdgeDetector","text":"<p>ClassList &gt; EdgeDetector</p> <p>More...</p>"},{"location":"argos-lib/class_edge_detector.html#public-types","title":"Public Types","text":"Type Name enum EdgeDetectSettings enum edgeStatus"},{"location":"argos-lib/class_edge_detector.html#public-functions","title":"Public Functions","text":"Type Name edgeStatus Calculate (bool curVal)  EdgeDetector (EdgeDetector::EdgeDetectSettings _settings, bool initialValue=false)  std::string ToString (edgeStatus status)  bool operator() (bool curVal)"},{"location":"argos-lib/class_edge_detector.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/class_edge_detector.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/class_edge_detector.html#enum-edgedetectsettings","title":"enum EdgeDetectSettings","text":"<pre><code>enum EdgeDetector::EdgeDetectSettings {\n    DETECT_BOTH,\n    DETECT_FALLING,\n    DETECT_RISING\n};\n</code></pre>"},{"location":"argos-lib/class_edge_detector.html#enum-edgestatus","title":"enum edgeStatus","text":"<pre><code>enum EdgeDetector::edgeStatus {\n    FALLING,\n    RISING,\n    ERROR,\n    NONE\n};\n</code></pre>"},{"location":"argos-lib/class_edge_detector.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/class_edge_detector.html#function-calculate","title":"function Calculate","text":"<pre><code>edgeStatus EdgeDetector::Calculate (\n    bool curVal\n) \n</code></pre>"},{"location":"argos-lib/class_edge_detector.html#function-edgedetector","title":"function EdgeDetector","text":"<pre><code>explicit EdgeDetector::EdgeDetector (\n    EdgeDetector::EdgeDetectSettings _settings,\n    bool initialValue=false\n) \n</code></pre>"},{"location":"argos-lib/class_edge_detector.html#function-tostring","title":"function ToString","text":"<pre><code>std::string EdgeDetector::ToString (\n    edgeStatus status\n) \n</code></pre>"},{"location":"argos-lib/class_edge_detector.html#function-operator","title":"function operator()","text":"<pre><code>bool EdgeDetector::operator() (\n    bool curVal\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/edge_detector.h</code></p>"},{"location":"argos-lib/class_n_t_motor_p_i_d_tuner.html","title":"Class NTMotorPIDTuner","text":"<p>ClassList &gt; NTMotorPIDTuner</p> <p>Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. More...</p> <ul> <li><code>#include &lt;nt_motor_pid_tuner.h&gt;</code></li> </ul>"},{"location":"argos-lib/class_n_t_motor_p_i_d_tuner.html#public-functions","title":"Public Functions","text":"Type Name NTMotorPIDTuner (const std::string &amp; tableName, std::initializer_list&lt; BaseTalon * &gt; motors, unsigned pidSlot, ClosedLoopSensorConversions sensorConversions={}) Construct a new NTMotorPIDTuner object. ~NTMotorPIDTuner () Destroy the NTMotorPIDTuner object."},{"location":"argos-lib/class_n_t_motor_p_i_d_tuner.html#detailed-description","title":"Detailed Description","text":"<p>Note:</p> <p>This runs a background thread to read statuses of motors without calling repeatedly </p>"},{"location":"argos-lib/class_n_t_motor_p_i_d_tuner.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/class_n_t_motor_p_i_d_tuner.html#function-ntmotorpidtuner","title":"function NTMotorPIDTuner","text":"<p>Construct a new NTMotorPIDTuner object. <pre><code>NTMotorPIDTuner::NTMotorPIDTuner (\n    const std::string &amp; tableName,\n    std::initializer_list&lt; BaseTalon * &gt; motors,\n    unsigned pidSlot,\n    ClosedLoopSensorConversions sensorConversions={}\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tableName</code> Root table in which to make tuning and status keys </li> <li><code>motors</code> Pointers to motors that should be monitored and configured. Can be one motor if only one motor uses the control loop parameters </li> <li><code>pidSlot</code> PID slot to save tunes into </li> <li><code>sensorConversions</code> Sensor conversion factors to make status values human readable </li> </ul>"},{"location":"argos-lib/class_n_t_motor_p_i_d_tuner.html#function-ntmotorpidtuner_1","title":"function ~NTMotorPIDTuner","text":"<p>Destroy the NTMotorPIDTuner object. <pre><code>NTMotorPIDTuner::~NTMotorPIDTuner () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_motor_pid_tuner.h</code></p>"},{"location":"argos-lib/class_n_t_subscriber.html","title":"Class NTSubscriber","text":"<p>ClassList &gt; NTSubscriber</p> <p>Subscribes to Network Tables entry updates and calls a specified callback to use the new value. More...</p> <ul> <li><code>#include &lt;nt_subscriber.h&gt;</code></li> </ul>"},{"location":"argos-lib/class_n_t_subscriber.html#public-functions","title":"Public Functions","text":"Type Name void AddMonitor (const std::string &amp; keyName, std::function&lt; void(double)&gt; onUpdateCallback, const double defaultValue=0.0, const bool forceUpdate=true) Register a new listener for the specified key and send values to callback on update. NTSubscriber (const std::string &amp; tableName) Construct a new NTSubscriber object. ~NTSubscriber ()"},{"location":"argos-lib/class_n_t_subscriber.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/class_n_t_subscriber.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/class_n_t_subscriber.html#function-addmonitor","title":"function AddMonitor","text":"<p>Register a new listener for the specified key and send values to callback on update. <pre><code>void NTSubscriber::AddMonitor (\n    const std::string &amp; keyName,\n    std::function&lt; void(double)&gt; onUpdateCallback,\n    const double defaultValue=0.0,\n    const bool forceUpdate=true\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>keyName</code> Key to listen for updates. Will be at tableName/keyName (keyName can have more slashes) </li> <li><code>onUpdateCallback</code> Callback to run when keyName changes </li> <li><code>defaultValue</code> Default value to initialize key if it doesn't exist yet </li> <li><code>forceUpdate</code> When true, update network tables value to default even if another value is already set </li> </ul>"},{"location":"argos-lib/class_n_t_subscriber.html#function-ntsubscriber","title":"function NTSubscriber","text":"<p>Construct a new NTSubscriber object. <pre><code>explicit NTSubscriber::NTSubscriber (\n    const std::string &amp; tableName\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tableName</code> Name of the table containing keys to watch </li> </ul>"},{"location":"argos-lib/class_n_t_subscriber.html#function-ntsubscriber_1","title":"function ~NTSubscriber","text":"<pre><code>NTSubscriber::~NTSubscriber () \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_subscriber.h</code></p>"},{"location":"argos-lib/class_network_tables_homing_storage.html","title":"Class NetworkTablesHomingStorage","text":"<p>ClassList &gt; NetworkTablesHomingStorage</p> <p>Saves and loads swerve module homes to networkTables. More...</p> <ul> <li><code>#include &lt;network_tables_homing_storage.h&gt;</code></li> </ul> <p>Inherits the following classes: argos_lib::SwerveHomeStorageInterface</p>"},{"location":"argos-lib/class_network_tables_homing_storage.html#public-functions","title":"Public Functions","text":"Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () overrideLoad home positions from network tables. NetworkTablesHomingStorage (const std::string &amp; tableName, const std::string &amp; frontLeftPath, const std::string &amp; frontRightPath, const std::string &amp; rearRightPath, const std::string &amp; rearLeftPath) Construct a new Network Tables Homing Storage object. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) overrideSave home positions to network tables."},{"location":"argos-lib/class_network_tables_homing_storage.html#public-functions-inherited-from-argos_libswervehomestorageinterface","title":"Public Functions inherited from argos_lib::SwerveHomeStorageInterface","text":"<p>See argos_lib::SwerveHomeStorageInterface</p> Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/class_network_tables_homing_storage.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/class_network_tables_homing_storage.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/class_network_tables_homing_storage.html#function-load","title":"function Load","text":"<p>Load home positions from network tables. <pre><code>virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; NetworkTablesHomingStorage::Load () override\n</code></pre></p> <p>Returns:</p> <p>Loaded positions or nullopt if failed </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Load</p>"},{"location":"argos-lib/class_network_tables_homing_storage.html#function-networktableshomingstorage","title":"function NetworkTablesHomingStorage","text":"<p>Construct a new Network Tables Homing Storage object. <pre><code>NetworkTablesHomingStorage::NetworkTablesHomingStorage (\n    const std::string &amp; tableName,\n    const std::string &amp; frontLeftPath,\n    const std::string &amp; frontRightPath,\n    const std::string &amp; rearRightPath,\n    const std::string &amp; rearLeftPath\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tableName</code> Network table name </li> <li><code>frontLeftPath</code> Key name for front left module </li> <li><code>frontRightPath</code> Key name for front right module </li> <li><code>rearRightPath</code> Key name for rear right module </li> <li><code>rearLeftPath</code> Key name for rear left module </li> </ul>"},{"location":"argos-lib/class_network_tables_homing_storage.html#function-save","title":"function Save","text":"<p>Save home positions to network tables. <pre><code>virtual bool NetworkTablesHomingStorage::Save (\n    const argos_lib::swerve::SwerveModulePositions &amp; homePosition\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Positions to store </li> </ul> <p>Returns:</p> <p>true if successful </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Save</p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/network_tables_homing_storage.h</code></p>"},{"location":"argos-lib/class_swerve_f_s_homing_storage.html","title":"Class SwerveFSHomingStorage","text":"<p>ClassList &gt; SwerveFSHomingStorage</p> <p>More...</p> <p>Inherits the following classes: argos_lib::SwerveHomeStorageInterface</p>"},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#public-functions","title":"Public Functions","text":"Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () overrideLoad absolute positions that represent 0 degree module orientations. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) overrideSave positions as new homes. SwerveFSHomingStorage (const fs::path &amp; swerveHomesPath) Construct a new File System Homing Storage object."},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#public-functions-inherited-from-argos_libswervehomestorageinterface","title":"Public Functions inherited from argos_lib::SwerveHomeStorageInterface","text":"<p>See argos_lib::SwerveHomeStorageInterface</p> Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#function-load","title":"function Load","text":"<p>Load absolute positions that represent 0 degree module orientations. <pre><code>virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; SwerveFSHomingStorage::Load () override\n</code></pre></p> <p>Returns:</p> <p>Saved module positions if they exist, otherwise std::nullopt to indicate failure </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Load</p>"},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#function-save","title":"function Save","text":"<p>Save positions as new homes. <pre><code>virtual bool SwerveFSHomingStorage::Save (\n    const argos_lib::swerve::SwerveModulePositions &amp; homePosition\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Positions that represent 0 degree module orientations </li> </ul> <p>Returns:</p> <p>true if save successful, false otherwise </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Save</p>"},{"location":"argos-lib/class_swerve_f_s_homing_storage.html#function-swervefshomingstorage","title":"function SwerveFSHomingStorage","text":"<p>Construct a new File System Homing Storage object. <pre><code>explicit SwerveFSHomingStorage::SwerveFSHomingStorage (\n    const fs::path &amp; swerveHomesPath\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>swerveHomesPath</code> File path relative to home directory to save into and load from </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/fs_homing.h</code></p>"},{"location":"argos-lib/namespace_0d021340233307002300012131121075213041020030267162.html","title":"Namespace anonymous namespace{C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/trigger_composition.cpp}","text":"<p>Namespace List &gt; anonymous namespace{C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/trigger_composition.cpp}</p> <p>More...</p>"},{"location":"argos-lib/namespace_0d021340233307002300012131121075213041020030267162.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/trigger_composition.cpp</code></p>"},{"location":"argos-lib/namespaceargos__lib.html","title":"Namespace argos_lib","text":"<p>Namespace List &gt; argos_lib</p> <p>More...</p>"},{"location":"argos-lib/namespaceargos__lib.html#namespaces","title":"Namespaces","text":"Type Name namespace angle namespace cancoder_config namespace colors namespace falcon_config namespace gamma_corrected_colors namespace led namespace odometry_aim namespace status_frame_config namespace swerve namespace talonsrx_config namespace testing namespace triggers"},{"location":"argos-lib/namespaceargos__lib.html#classes","title":"Classes","text":"Type Name struct ArgosColor class ArgosLogger Log to the console in a clean, repeatable manner. struct CANAddress struct ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. struct DebounceSettings class Debouncer class EdgeDetector class FSHomingStorage &lt;class T&gt;Saves and loads home positions from filesystem. class GenericDebouncer &lt;class T&gt; class HomingStorageInterface &lt;class T&gt;Interface capable of saving and loading home positions from persistent storage. class HysteresisFilter &lt;typename T&gt;A simple hysteresis filter for giving a bool output for a threshold. struct InterpMapPoint &lt;class T, class V&gt;Point that helps generate an interpolation map. class InterpolationMap &lt;class T, size, class V&gt;Performs linear interpolation of a value based on a set of input-&gt;output mapping points. struct LEDState Color and animation status for an individual LED. class LEDSubsystem class NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. class NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. class SwapControllersCommand Swaps rolls of two controllers. Useful if one controller breaks during a match. class SwappableControllersSubsystem Allows two controllers to swap between \"Driver\" and \"Operator\" control schemes on the fly by swapping the m_driverController and m_operatorController objects. class SwerveFSHomingStorage class SwerveHomeStorageInterface Interface capable of saving and loading module home positions from persistent storage. struct VibrationStatus Vibration percentages that can be sent to controller for user feedback. class XboxController"},{"location":"argos-lib/namespaceargos__lib.html#public-types","title":"Public Types","text":"Type Name enum LogLevel Represents a log level of either information, or error. enum RobotInstance Differentiates between practice robot and competition robot. typedef std::function&lt; VibrationStatus()&gt; VibrationModel"},{"location":"argos-lib/namespaceargos__lib.html#public-attributes","title":"Public Attributes","text":"Type Name std::array&lt; uint8_t, 256 &gt; gamma8   = <code>/* multi line expression */</code>"},{"location":"argos-lib/namespaceargos__lib.html#public-functions","title":"Public Functions","text":"Type Name ArgosColor GammaCorrect (ArgosColor original)  double GetPositionConversionFactor (Callable toPhysicalUnitsFunction) Generates a double value to convert sensor position values to physical units represented as a double. RobotInstance GetRobotInstance () Detect robot instance. double GetVelocityConversionFactor (Callable toPhysicalUnitsFunction) Generates a double value to convert sensor velocity values to physical units represented as a double. VibrationModel TemporaryVibrationPattern (VibrationModel temporaryModel, units::millisecond_t temporaryModelDuration, VibrationModel lastingModel=VibrationOff()) Run a vibration model for a specified duration, then run another model in perpetuity thereafter. VibrationModel VibrationAlternatePulse (units::millisecond_t pulsePeriod, double intensityOn, double intensityOff=0.0) Toggle vibration between intensityOn and intensityOff levels. Left output is in intensityOn phase while right output is in intensityOff phase and vice-versa. VibrationModel VibrationAlternateWave (units::millisecond_t pulsePeriod, double intensityOn, double intensityOff=0.0) Smoothly transition vibration between intensityOn and intensityOff levels. Left output is in intensityOn phase while right output is in intensityOff phase and vice-versa. VibrationModel VibrationConstant (double intensity) Set vibration to a constant value where left and right are the same intensity. VibrationModel VibrationConstant (double intensityLeft, double intensityRight) Set vibration to a constant value where left and right have discrete intensities. VibrationModel VibrationOff () Turn off vibration. VibrationModel VibrationSyncPulse (units::millisecond_t pulsePeriod, double intensityOn, double intensityOff=0.0) Toggle vibration between intensityOn and intensityOff levels. Left and right have the same vibration intensity. VibrationModel VibrationSyncWave (units::millisecond_t pulsePeriod, double intensityOn, double intensityOff=0.0) Smoothly transition vibration between intensityOn and intensityOff levels. Left and right have the same vibration intensity. bool operator&lt; (const InterpMapPoint&lt; T, V &gt; &amp; a, const T &amp; b)  bool operator&lt; (const T &amp; a, const InterpMapPoint&lt; T, V &gt; &amp; b)"},{"location":"argos-lib/namespaceargos__lib.html#public-static-functions","title":"Public Static Functions","text":"Type Name int GetCANAddr (const argos_lib::CANAddress &amp; compAddress, const argos_lib::CANAddress &amp; practiceAddress, argos_lib::RobotInstance instance) Gets integer address from CANAddress objects based on robot instance. std::string_view GetCANBus (const argos_lib::CANAddress &amp; compAddress, const argos_lib::CANAddress &amp; practiceAddress, argos_lib::RobotInstance instance) Gets std::string_view bus name from CANAddress objects based on robot instance. bool InThreshold (const T value, const T target, const T threshold) Detect if a value is within a threshold of a target value."},{"location":"argos-lib/namespaceargos__lib.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/namespaceargos__lib.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/namespaceargos__lib.html#enum-loglevel","title":"enum LogLevel","text":"<p>Represents a log level of either information, or error. <pre><code>enum argos_lib::LogLevel {\n    INFO,\n    ERR\n};\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib.html#enum-robotinstance","title":"enum RobotInstance","text":"<p>Differentiates between practice robot and competition robot. <pre><code>enum argos_lib::RobotInstance {\n    Competition,\n    Practice\n};\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib.html#typedef-vibrationmodel","title":"typedef VibrationModel","text":"<pre><code>using argos_lib::VibrationModel =  std::function&lt;VibrationStatus()&gt;;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/namespaceargos__lib.html#variable-gamma8","title":"variable gamma8","text":"<pre><code>std::array&lt;uint8_t, 256&gt; argos_lib::gamma8;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib.html#function-gammacorrect","title":"function GammaCorrect","text":"<pre><code>ArgosColor argos_lib::GammaCorrect (\n    ArgosColor original\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib.html#function-getpositionconversionfactor","title":"function GetPositionConversionFactor","text":"<p>Generates a double value to convert sensor position values to physical units represented as a double. <pre><code>template&lt;class Callable&gt;\ndouble argos_lib::GetPositionConversionFactor (\n    Callable toPhysicalUnitsFunction\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>Callable</code> Function that generates a units value from a double </li> </ul> <p>Parameters:</p> <ul> <li><code>toPhysicalUnitsFunction</code> Conversion function </li> </ul> <p>Returns:</p> <p>double Physical unit value stripped of unit so it's just a double </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-getrobotinstance","title":"function GetRobotInstance","text":"<p>Detect robot instance. <pre><code>RobotInstance argos_lib::GetRobotInstance () \n</code></pre></p> <p>Returns:</p> <p>RobotInstance</p> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-getvelocityconversionfactor","title":"function GetVelocityConversionFactor","text":"<p>Generates a double value to convert sensor velocity values to physical units represented as a double. <pre><code>template&lt;class Callable&gt;\ndouble argos_lib::GetVelocityConversionFactor (\n    Callable toPhysicalUnitsFunction\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>Callable</code> Function that generates a units value from a double </li> </ul> <p>Parameters:</p> <ul> <li><code>toPhysicalUnitsFunction</code> Conversion function </li> </ul> <p>Returns:</p> <p>double Physical unit value stripped of unit so it's just a double </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-temporaryvibrationpattern","title":"function TemporaryVibrationPattern","text":"<p>Run a vibration model for a specified duration, then run another model in perpetuity thereafter. <pre><code>VibrationModel argos_lib::TemporaryVibrationPattern (\n    VibrationModel temporaryModel,\n    units::millisecond_t temporaryModelDuration,\n    VibrationModel lastingModel=VibrationOff ()\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>temporaryModel</code> Model to run for the specified duration </li> <li><code>temporaryModelDuration</code> Amount of time to run temporaryModel </li> <li><code>lastingModel</code> Model to run forever after the specified duration </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationalternatepulse","title":"function VibrationAlternatePulse","text":"<p>Toggle vibration between intensityOn and intensityOff levels. Left output is in intensityOn phase while right output is in intensityOff phase and vice-versa. <pre><code>VibrationModel argos_lib::VibrationAlternatePulse (\n    units::millisecond_t pulsePeriod,\n    double intensityOn,\n    double intensityOff=0.0\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>pulsePeriod</code> Time to complete one intensityOn-&gt;intensityOff cycle </li> <li><code>intensityOn</code> Vibration percent output when in intensityOn portion of cycle [0,1.0] </li> <li><code>intensityOff</code> Vibration percent output when in intensityOff portion of cycle [0,1.0] </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationalternatewave","title":"function VibrationAlternateWave","text":"<p>Smoothly transition vibration between intensityOn and intensityOff levels. Left output is in intensityOn phase while right output is in intensityOff phase and vice-versa. <pre><code>VibrationModel argos_lib::VibrationAlternateWave (\n    units::millisecond_t pulsePeriod,\n    double intensityOn,\n    double intensityOff=0.0\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>pulsePeriod</code> Time to complete one intensityOn-&gt;intensityOff cycle </li> <li><code>intensityOn</code> Vibration percent output when at peak of intensityOn portion of cycle [0,1.0] </li> <li><code>intensityOff</code> Vibration percent output when in trough of intensityOff portion of cycle [0,1.0] </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationconstant","title":"function VibrationConstant","text":"<p>Set vibration to a constant value where left and right are the same intensity. <pre><code>VibrationModel argos_lib::VibrationConstant (\n    double intensity\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>intensity</code> Percent vibration output [0,1.0] </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationconstant_1","title":"function VibrationConstant","text":"<p>Set vibration to a constant value where left and right have discrete intensities. <pre><code>VibrationModel argos_lib::VibrationConstant (\n    double intensityLeft,\n    double intensityRight\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>intensityLeft</code> Left vibration percent output [0,1.0] </li> <li><code>intensityRight</code> Right vibration percent output [0,1.0] </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationoff","title":"function VibrationOff","text":"<p>Turn off vibration. <pre><code>VibrationModel argos_lib::VibrationOff () \n</code></pre></p> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationsyncpulse","title":"function VibrationSyncPulse","text":"<p>Toggle vibration between intensityOn and intensityOff levels. Left and right have the same vibration intensity. <pre><code>VibrationModel argos_lib::VibrationSyncPulse (\n    units::millisecond_t pulsePeriod,\n    double intensityOn,\n    double intensityOff=0.0\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>pulsePeriod</code> Time to complete one intensityOn-&gt;intensityOff cycle </li> <li><code>intensityOn</code> Vibration percent output when in intensityOn portion of cycle [0,1.0] </li> <li><code>intensityOff</code> Vibration percent output when in intensityOff portion of cycle [0,1.0] </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-vibrationsyncwave","title":"function VibrationSyncWave","text":"<p>Smoothly transition vibration between intensityOn and intensityOff levels. Left and right have the same vibration intensity. <pre><code>VibrationModel argos_lib::VibrationSyncWave (\n    units::millisecond_t pulsePeriod,\n    double intensityOn,\n    double intensityOff=0.0\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>pulsePeriod</code> Time to complete one intensityOn-&gt;intensityOff cycle </li> <li><code>intensityOn</code> Vibration percent output when at peak of intensityOn portion of cycle [0,1.0] </li> <li><code>intensityOff</code> Vibration percent output when in trough of intensityOff portion of cycle [0,1.0] </li> </ul> <p>Returns:</p> <p>VibrationModel </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-operator","title":"function operator&lt;","text":"<pre><code>template&lt;class T, class V&gt;\nbool argos_lib::operator&lt; (\n    const InterpMapPoint &lt; T, V &gt; &amp; a,\n    const T &amp; b\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib.html#function-operator_1","title":"function operator&lt;","text":"<pre><code>template&lt;class T, class V&gt;\nbool argos_lib::operator&lt; (\n    const T &amp; a,\n    const InterpMapPoint &lt; T, V &gt; &amp; b\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib.html#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib.html#function-getcanaddr","title":"function GetCANAddr","text":"<p>Gets integer address from CANAddress objects based on robot instance. <pre><code>static inline int argos_lib::GetCANAddr (\n    const argos_lib::CANAddress &amp; compAddress,\n    const argos_lib::CANAddress &amp; practiceAddress,\n    argos_lib::RobotInstance instance\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>compAddress</code> The competiton robot CANAddress object </li> <li><code>practiceAddress</code> The practice robot CANAddress object </li> <li><code>instance</code> Current instance of robot </li> </ul> <p>Returns:</p> <p>returns compAddress.addr if instance is competition, practiceAddress.addr if instance is practice </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-getcanbus","title":"function GetCANBus","text":"<p>Gets std::string_view bus name from CANAddress objects based on robot instance. <pre><code>static inline std::string_view argos_lib::GetCANBus (\n    const argos_lib::CANAddress &amp; compAddress,\n    const argos_lib::CANAddress &amp; practiceAddress,\n    argos_lib::RobotInstance instance\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>compAddress</code> The competiton robot CANAddress object </li> <li><code>practiceAddress</code> The practice robot CANAddress object </li> <li><code>instance</code> Current instance of robot </li> </ul> <p>Returns:</p> <p>returns compAddress.busName if instance is competition, practiceAddress.busName if instance is practice </p>"},{"location":"argos-lib/namespaceargos__lib.html#function-inthreshold","title":"function InThreshold","text":"<p>Detect if a value is within a threshold of a target value. <pre><code>template&lt;typename T&gt;\nstatic bool argos_lib::InThreshold (\n    const T value,\n    const T target,\n    const T threshold\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>T</code> Type that implements operator+(), operator-(), operator&lt;=() and operator&gt;=() </li> </ul> <p>Parameters:</p> <ul> <li><code>value</code> Value to check </li> <li><code>target</code> Center of range </li> <li><code>threshold</code> Allowable error from target </li> </ul> <p>Returns:</p> <p>true when value is within threshold of target, false otherwise </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/commands/swap_controllers_command.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html","title":"Struct argos_lib::ArgosColor","text":"<p>ClassList &gt; argos_lib &gt; ArgosColor</p>"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#public-attributes","title":"Public Attributes","text":"Type Name int b int g int r"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#public-functions","title":"Public Functions","text":"Type Name ArgosColor operator* (double scale)"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#variable-b","title":"variable b","text":"<pre><code>int argos_lib::ArgosColor::b;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#variable-g","title":"variable g","text":"<pre><code>int argos_lib::ArgosColor::g;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#variable-r","title":"variable r","text":"<pre><code>int argos_lib::ArgosColor::r;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_argos_color.html#function-operator","title":"function operator*","text":"<pre><code>inline ArgosColor argos_lib::ArgosColor::operator* (\n    double scale\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/color.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_argos_logger.html","title":"Class argos_lib::ArgosLogger","text":"<p>ClassList &gt; argos_lib &gt; ArgosLogger</p> <p>Log to the console in a clean, repeatable manner. </p> <ul> <li><code>#include &lt;log.h&gt;</code></li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_argos_logger.html#public-functions","title":"Public Functions","text":"Type Name ArgosLogger () = delete ArgosLogger (std::string tag)  void Log (LogLevel level, const char * fmt, ...) const"},{"location":"argos-lib/classargos__lib_1_1_argos_logger.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_argos_logger.html#function-argoslogger-12","title":"function ArgosLogger [1/2]","text":"<pre><code>argos_lib::ArgosLogger::ArgosLogger () = delete\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_argos_logger.html#function-argoslogger-22","title":"function ArgosLogger [2/2]","text":"<pre><code>inline explicit argos_lib::ArgosLogger::ArgosLogger (\n    std::string tag\n) \n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_argos_logger.html#function-log","title":"function Log","text":"<pre><code>inline void argos_lib::ArgosLogger::Log (\n    LogLevel level,\n    const char * fmt,\n    ...\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/log.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html","title":"Struct argos_lib::CANAddress","text":"<p>ClassList &gt; argos_lib &gt; CANAddress</p>"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#public-attributes","title":"Public Attributes","text":"Type Name int address std::string_view busName"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#public-functions","title":"Public Functions","text":"Type Name CANAddress () = delete constexpr CANAddress (int address, const std::string_view &amp; busName=\"rio\")"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#variable-address","title":"variable address","text":"<pre><code>int argos_lib::CANAddress::address;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#variable-busname","title":"variable busName","text":"<pre><code>std::string_view argos_lib::CANAddress::busName;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#function-canaddress-12","title":"function CANAddress [1/2]","text":"<pre><code>argos_lib::CANAddress::CANAddress () = delete\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_c_a_n_address.html#function-canaddress-22","title":"function CANAddress [2/2]","text":"<pre><code>inline constexpr argos_lib::CANAddress::CANAddress (\n    int address,\n    const std::string_view &amp; busName=\"rio\"\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/config_types.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_closed_loop_sensor_conversions.html","title":"Struct argos_lib::ClosedLoopSensorConversions","text":"<p>ClassList &gt; argos_lib &gt; ClosedLoopSensorConversions</p> <p>Conversion factors to aid displaying sensor values as meaningful numbers. </p> <ul> <li><code>#include &lt;nt_motor_pid_tuner.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1_closed_loop_sensor_conversions.html#public-attributes","title":"Public Attributes","text":"Type Name double position   = <code>{1.0}</code>Multiply by this to convert sensor position units to physical units. double setpoint   = <code>/* multi line expression */</code>Multiply by this to convert sensor setpoint units to physical units (should be the same as either position or velocity) double velocity   = <code>{1.0}</code>Multiply by this to convert sensor velocity units to physical units."},{"location":"argos-lib/structargos__lib_1_1_closed_loop_sensor_conversions.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_closed_loop_sensor_conversions.html#variable-position","title":"variable position","text":"<p>Multiply by this to convert sensor position units to physical units. <pre><code>double argos_lib::ClosedLoopSensorConversions::position;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_closed_loop_sensor_conversions.html#variable-setpoint","title":"variable setpoint","text":"<p>Multiply by this to convert sensor setpoint units to physical units (should be the same as either position or velocity) <pre><code>double argos_lib::ClosedLoopSensorConversions::setpoint;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_closed_loop_sensor_conversions.html#variable-velocity","title":"variable velocity","text":"<p>Multiply by this to convert sensor velocity units to physical units. <pre><code>double argos_lib::ClosedLoopSensorConversions::velocity;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_motor_pid_tuner.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_debounce_settings.html","title":"Struct argos_lib::DebounceSettings","text":"<p>ClassList &gt; argos_lib &gt; DebounceSettings</p>"},{"location":"argos-lib/structargos__lib_1_1_debounce_settings.html#public-attributes","title":"Public Attributes","text":"Type Name units::millisecond_t activateTime units::millisecond_t clearTime"},{"location":"argos-lib/structargos__lib_1_1_debounce_settings.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_debounce_settings.html#variable-activatetime","title":"variable activateTime","text":"<pre><code>units::millisecond_t argos_lib::DebounceSettings::activateTime;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_debounce_settings.html#variable-cleartime","title":"variable clearTime","text":"<pre><code>units::millisecond_t argos_lib::DebounceSettings::clearTime;\n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/debounce_settings.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html","title":"Class argos_lib::Debouncer","text":"<p>ClassList &gt; argos_lib &gt; Debouncer</p>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#public-functions","title":"Public Functions","text":"Type Name Debouncer (const argos_lib::DebounceSettings debounceSettings, bool initialValue=false) Construct a new Debouncer object with asymmetric times. Debouncer (const units::millisecond_t symmetricDebounceTime) Construct a new Debouncer object with symmetric times. bool GetDebouncedStatus () Retrieve latest debounced status. bool GetRawStatus () Retrieve latest raw status. void Reset (bool newVal) Resets debouncer to a known status like at construction. bool operator() (bool newVal) Update debouncer with new input and retrieve latest debounced status."},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#function-debouncer-12","title":"function Debouncer [1/2]","text":"<p>Construct a new Debouncer object with asymmetric times. <pre><code>explicit argos_lib::Debouncer::Debouncer (\n    const argos_lib::DebounceSettings debounceSettings,\n    bool initialValue=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>debounceSettings</code> Configuration settings for activate and clear times </li> <li><code>initialValue</code> Initializes debouncer to this value </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#function-debouncer-22","title":"function Debouncer [2/2]","text":"<p>Construct a new Debouncer object with symmetric times. <pre><code>explicit argos_lib::Debouncer::Debouncer (\n    const units::millisecond_t symmetricDebounceTime\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>symmetricDebounceTime</code> Symmetric activate and clear time </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#function-getdebouncedstatus","title":"function GetDebouncedStatus","text":"<p>Retrieve latest debounced status. <pre><code>bool argos_lib::Debouncer::GetDebouncedStatus () \n</code></pre></p> <p>Returns:</p> <p>Value after applying debounce </p>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#function-getrawstatus","title":"function GetRawStatus","text":"<p>Retrieve latest raw status. <pre><code>bool argos_lib::Debouncer::GetRawStatus () \n</code></pre></p> <p>Returns:</p> <p>Latest value without applying debounce </p>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#function-reset","title":"function Reset","text":"<p>Resets debouncer to a known status like at construction. <pre><code>void argos_lib::Debouncer::Reset (\n    bool newVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newVal</code> Value to set to </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_debouncer.html#function-operator","title":"function operator()","text":"<p>Update debouncer with new input and retrieve latest debounced status. <pre><code>bool argos_lib::Debouncer::operator() (\n    bool newVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newVal</code> Latest raw value </li> </ul> <p>Returns:</p> <p>Value after applying debounce </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/debouncer.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html","title":"Class argos_lib::EdgeDetector","text":"<p>ClassList &gt; argos_lib &gt; EdgeDetector</p>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#public-types","title":"Public Types","text":"Type Name enum EdgeDetectSettings enum edgeStatus"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#public-functions","title":"Public Functions","text":"Type Name edgeStatus Calculate (bool curVal)  EdgeDetector (EdgeDetector::EdgeDetectSettings _settings, bool initialValue=false)  std::string ToString (edgeStatus status)  bool operator() (bool curVal)"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#enum-edgedetectsettings","title":"enum EdgeDetectSettings","text":"<pre><code>enum argos_lib::EdgeDetector::EdgeDetectSettings {\n    DETECT_BOTH,\n    DETECT_FALLING,\n    DETECT_RISING\n};\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#enum-edgestatus","title":"enum edgeStatus","text":"<pre><code>enum argos_lib::EdgeDetector::edgeStatus {\n    FALLING,\n    RISING,\n    ERROR,\n    NONE\n};\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#function-calculate","title":"function Calculate","text":"<pre><code>edgeStatus argos_lib::EdgeDetector::Calculate (\n    bool curVal\n) \n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#function-edgedetector","title":"function EdgeDetector","text":"<pre><code>explicit argos_lib::EdgeDetector::EdgeDetector (\n    EdgeDetector::EdgeDetectSettings _settings,\n    bool initialValue=false\n) \n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#function-tostring","title":"function ToString","text":"<pre><code>std::string argos_lib::EdgeDetector::ToString (\n    edgeStatus status\n) \n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_edge_detector.html#function-operator","title":"function operator()","text":"<pre><code>bool argos_lib::EdgeDetector::operator() (\n    bool curVal\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/edge_detector.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html","title":"Class argos_lib::FSHomingStorage","text":"<p>template &lt;class T&gt;</p> <p>ClassList &gt; argos_lib &gt; FSHomingStorage</p> <p>Saves and loads home positions from filesystem. More...</p> <ul> <li><code>#include &lt;fs_homing.h&gt;</code></li> </ul> <p>Inherits the following classes: argos_lib::HomingStorageInterface</p>"},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#public-functions","title":"Public Functions","text":"Type Name FSHomingStorage (const fs::path &amp; homeFilePath) Construct a new FSHomingStorage object. virtual std::optional&lt; T &gt; Load () overrideLoad home position from persistent storage. virtual bool Save (const T &amp; homePosition) overrideSave home position to persistent storage."},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#public-functions-inherited-from-argos_libhomingstorageinterface","title":"Public Functions inherited from argos_lib::HomingStorageInterface","text":"<p>See argos_lib::HomingStorageInterface</p> Type Name virtual std::optional&lt; T &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const T &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> Type of the home position. Should be a units type </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#function-fshomingstorage","title":"function FSHomingStorage","text":"<p>Construct a new FSHomingStorage object. <pre><code>inline explicit argos_lib::FSHomingStorage::FSHomingStorage (\n    const fs::path &amp; homeFilePath\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homeFilePath</code> Path to save homes to relative to internally-managed root directory </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#function-load","title":"function Load","text":"<p>Load home position from persistent storage. <pre><code>inline virtual std::optional&lt; T &gt; argos_lib::FSHomingStorage::Load () override\n</code></pre></p> <p>Returns:</p> <p>Poisition from persistent storage or std::nullopt if load failed or no positions were previously stored </p> <p>Implements argos_lib::HomingStorageInterface::Load</p>"},{"location":"argos-lib/classargos__lib_1_1_f_s_homing_storage.html#function-save","title":"function Save","text":"<p>Save home position to persistent storage. <pre><code>inline virtual bool argos_lib::FSHomingStorage::Save (\n    const T &amp; homePosition\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Position to store </li> </ul> <p>Returns:</p> <p>true Save successful </p> <p>Returns:</p> <p>false Error saving </p> <p>Implements argos_lib::HomingStorageInterface::Save</p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/fs_homing.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_generic_debouncer.html","title":"Class argos_lib::GenericDebouncer","text":"<p>template &lt;class T&gt;</p> <p>ClassList &gt; argos_lib &gt; GenericDebouncer</p>"},{"location":"argos-lib/classargos__lib_1_1_generic_debouncer.html#public-functions","title":"Public Functions","text":"Type Name GenericDebouncer (const units::millisecond_t symmetricDebounceTime, T initialValue={}) Construct a new Debouncer object with symmetric times. void Reset (T newVal)  T operator() (T newVal) Update debouncer with new input and retreive latest debounced status."},{"location":"argos-lib/classargos__lib_1_1_generic_debouncer.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_generic_debouncer.html#function-genericdebouncer","title":"function GenericDebouncer","text":"<p>Construct a new Debouncer object with symmetric times. <pre><code>inline explicit argos_lib::GenericDebouncer::GenericDebouncer (\n    const units::millisecond_t symmetricDebounceTime,\n    T initialValue={}\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>symmetricDebounceTime</code> Symmetric activate and clear time </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_generic_debouncer.html#function-reset","title":"function Reset","text":"<pre><code>inline void argos_lib::GenericDebouncer::Reset (\n    T newVal\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>newVal</code> Value to set to </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_generic_debouncer.html#function-operator","title":"function operator()","text":"<p>Update debouncer with new input and retreive latest debounced status. <pre><code>inline T argos_lib::GenericDebouncer::operator() (\n    T newVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newVal</code> Latest raw value </li> </ul> <p>Returns:</p> <p>Value after applying debounce </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/generic_debouncer.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_homing_storage_interface.html","title":"Class argos_lib::HomingStorageInterface","text":"<p>template &lt;class T&gt;</p> <p>ClassList &gt; argos_lib &gt; HomingStorageInterface</p> <p>Interface capable of saving and loading home positions from persistent storage. More...</p> <ul> <li><code>#include &lt;homing_interface.h&gt;</code></li> </ul> <p>Inherited by the following classes: argos_lib::FSHomingStorage</p>"},{"location":"argos-lib/classargos__lib_1_1_homing_storage_interface.html#public-functions","title":"Public Functions","text":"Type Name virtual std::optional&lt; T &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const T &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/classargos__lib_1_1_homing_storage_interface.html#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> Type of the home position. Should be a units type </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_homing_storage_interface.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_homing_storage_interface.html#function-load","title":"function Load","text":"<p>Load home position from persistent storage. <pre><code>virtual std::optional&lt; T &gt; argos_lib::HomingStorageInterface::Load () = 0\n</code></pre></p> <p>Returns:</p> <p>Poisition from persistent storage or std::nullopt if load failed or no positions were previously stored </p>"},{"location":"argos-lib/classargos__lib_1_1_homing_storage_interface.html#function-save","title":"function Save","text":"<p>Save home position to persistent storage. <pre><code>virtual bool argos_lib::HomingStorageInterface::Save (\n    const T &amp; homePosition\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Position to store </li> </ul> <p>Returns:</p> <p>true Save successful </p> <p>Returns:</p> <p>false Error saving </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/homing_interface.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html","title":"Class argos_lib::HysteresisFilter","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; argos_lib &gt; HysteresisFilter</p> <p>A simple hysteresis filter for giving a bool output for a threshold. More...</p> <ul> <li><code>#include &lt;hysteresis_filter.h&gt;</code></li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html#public-functions","title":"Public Functions","text":"Type Name HysteresisFilter () = delete HysteresisFilter (T deactivateThreshold, T activateThreshold) Construct a new Hysteresis Filter object. bool operator() (T newValue) Gets new status after applying hysteresis."},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> Type of threshold values </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html#function-hysteresisfilter-12","title":"function HysteresisFilter [1/2]","text":"<pre><code>argos_lib::HysteresisFilter::HysteresisFilter () = delete\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html#function-hysteresisfilter-22","title":"function HysteresisFilter [2/2]","text":"<p>Construct a new Hysteresis Filter object. <pre><code>inline argos_lib::HysteresisFilter::HysteresisFilter (\n    T deactivateThreshold,\n    T activateThreshold\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>deactivateThreshold</code> Value below which output becomes false </li> <li><code>activateThreshold</code> Value above which output becomes true </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_hysteresis_filter.html#function-operator","title":"function operator()","text":"<p>Gets new status after applying hysteresis. <pre><code>inline bool argos_lib::HysteresisFilter::operator() (\n    T newValue\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newValue</code> Latest raw value to update the filter </li> </ul> <p>Returns:</p> <p>Filtered value after applying newValue </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/hysteresis_filter.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html","title":"Struct argos_lib::InterpMapPoint","text":"<p>template &lt;class T, class V&gt;</p> <p>ClassList &gt; argos_lib &gt; InterpMapPoint</p> <p>Point that helps generate an interpolation map. More...</p> <ul> <li><code>#include &lt;interpolation.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#public-attributes","title":"Public Attributes","text":"Type Name T inVal V outVal"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#public-functions","title":"Public Functions","text":"Type Name constexpr InterpMapPoint (T in, V out)  bool operator&lt; (const InterpMapPoint&lt; T, V &gt; &amp; other)  bool operator== (const InterpMapPoint&lt; T, V &gt; &amp; other)"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> Internal type. Typically float or double </li> </ul>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#variable-inval","title":"variable inVal","text":"<pre><code>T argos_lib::InterpMapPoint&lt; T, V &gt;::inVal;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#variable-outval","title":"variable outVal","text":"<pre><code>V argos_lib::InterpMapPoint&lt; T, V &gt;::outVal;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#function-interpmappoint","title":"function InterpMapPoint","text":"<pre><code>inline constexpr argos_lib::InterpMapPoint::InterpMapPoint (\n    T in,\n    V out\n) \n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#function-operator","title":"function operator&lt;","text":"<pre><code>inline bool argos_lib::InterpMapPoint::operator&lt; (\n    const InterpMapPoint &lt; T, V &gt; &amp; other\n) \n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1_interp_map_point.html#function-operator_1","title":"function operator==","text":"<pre><code>inline bool argos_lib::InterpMapPoint::operator== (\n    const InterpMapPoint &lt; T, V &gt; &amp; other\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/interpolation.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html","title":"Class argos_lib::InterpolationMap","text":"<p>template &lt;class T, int size, class V&gt;</p> <p>ClassList &gt; argos_lib &gt; InterpolationMap</p> <p>Performs linear interpolation of a value based on a set of input-&gt;output mapping points. More...</p> <ul> <li><code>#include &lt;interpolation.h&gt;</code></li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#public-functions","title":"Public Functions","text":"Type Name InterpolationMap () = delete constexpr InterpolationMap (std::array&lt; InterpMapPoint&lt; T, V &gt;, size &gt; initArray) Constructs new interpolation map. V Map (const T inVal) constGenerate interpolated output based on input. V operator() (const T inVal) constGenerate interpolated output based on input."},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> Type of interpolated input </li> <li><code>size</code> Number of elements in interpolation map </li> <li><code>V</code> Type of interpolated output </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#function-interpolationmap-12","title":"function InterpolationMap [1/2]","text":"<pre><code>argos_lib::InterpolationMap::InterpolationMap () = delete\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#function-interpolationmap-22","title":"function InterpolationMap [2/2]","text":"<p>Constructs new interpolation map. <pre><code>inline constexpr argos_lib::InterpolationMap::InterpolationMap (\n    std::array&lt; InterpMapPoint &lt; T, V &gt;, size &gt; initArray\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>initArray</code> Interpolation points. Must be sorted by input value with smallest element first. </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#function-map","title":"function Map","text":"<p>Generate interpolated output based on input. <pre><code>inline V argos_lib::InterpolationMap::Map (\n    const T inVal\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>inVal</code> Input value to remap </li> </ul> <p>Returns:</p> <p>Interpolated value </p>"},{"location":"argos-lib/classargos__lib_1_1_interpolation_map.html#function-operator","title":"function operator()","text":"<p>Generate interpolated output based on input. <pre><code>inline V argos_lib::InterpolationMap::operator() (\n    const T inVal\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>inVal</code> Input value to remap </li> </ul> <p>Returns:</p> <p>Interpolated value   </p> <p>Shorthand for InterpolationMap::Map() </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/interpolation.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html","title":"Struct argos_lib::LEDState","text":"<p>ClassList &gt; argos_lib &gt; LEDState</p> <p>Color and animation status for an individual LED. </p> <ul> <li><code>#include &lt;led_subsystem.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#public-attributes","title":"Public Attributes","text":"Type Name bool animated   = <code>{false}</code>True indicates this is using a stock animation. frc::AddressableLED::LEDData color Color of LED. Only used when animated is false."},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#public-functions","title":"Public Functions","text":"Type Name bool operator!= (const LEDState &amp; other) constIt's an inequality comparison operator... LEDState &amp; operator= (const frc::AddressableLED::LEDData &amp; other) Copy assignment operator. bool operator== (const LEDState &amp; other) constIt's an equality comparison operator..."},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#variable-animated","title":"variable animated","text":"<p>True indicates this is using a stock animation. <pre><code>bool argos_lib::LEDState::animated;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#variable-color","title":"variable color","text":"<p>Color of LED. Only used when animated is false. <pre><code>frc::AddressableLED::LEDData argos_lib::LEDState::color;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#function-operator","title":"function operator!=","text":"<p>It's an inequality comparison operator... <pre><code>bool argos_lib::LEDState::operator!= (\n    const LEDState &amp; other\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>other</code> LEDState to compare to </li> </ul> <p>Returns:</p> <p>True when states are different </p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#function-operator_1","title":"function operator=","text":"<p>Copy assignment operator. <pre><code>LEDState &amp; argos_lib::LEDState::operator= (\n    const frc::AddressableLED::LEDData &amp; other\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>other</code> New value to assign to self </li> </ul> <p>Returns:</p> <p>LEDState&amp; Reference to this object after assignment </p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_state.html#function-operator_2","title":"function operator==","text":"<p>It's an equality comparison operator... <pre><code>bool argos_lib::LEDState::operator== (\n    const LEDState &amp; other\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>other</code> LEDState to compare to </li> </ul> <p>Returns:</p> <p>True when both states are equivalent </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/led_subsystem.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html","title":"Class argos_lib::LEDSubsystem","text":"<p>ClassList &gt; argos_lib &gt; LEDSubsystem</p> <p>Inherits the following classes: frc2::SubsystemBase</p>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#public-functions","title":"Public Functions","text":"Type Name void CustomAnimateAuxLEDs (argos_lib::led::Animation animation) Set LEDs in attached strip/panel to use custom animation. The LEDs will be updated on every call of the subsystem periodic function. void CustomAnimateIntegratedLEDs (argos_lib::led::Animation animation) Set LEDs built into CANdle to use custom animation. The LEDs will be updated on every call of the subsystem periodic function. LEDSubsystem (unsigned numAuxLEDs) Construct a new LEDSubsystem object. void Periodic () override void StockAnimateAuxLEDs (ctre::led::Animation &amp; animation, int slot) Set LEDs in attached strip/panel to use stock animation. void StockAnimateIntegratedLEDs (ctre::led::Animation &amp; animation, int slot) Set LEDs built into CANdle to use stock animation."},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#function-customanimateauxleds","title":"function CustomAnimateAuxLEDs","text":"<p>Set LEDs in attached strip/panel to use custom animation. The LEDs will be updated on every call of the subsystem periodic function. <pre><code>void argos_lib::LEDSubsystem::CustomAnimateAuxLEDs (\n    argos_lib::led::Animation animation\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>animation</code> Animation to use where led offset 0 is beginning of attached LEDs </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#function-customanimateintegratedleds","title":"function CustomAnimateIntegratedLEDs","text":"<p>Set LEDs built into CANdle to use custom animation. The LEDs will be updated on every call of the subsystem periodic function. <pre><code>void argos_lib::LEDSubsystem::CustomAnimateIntegratedLEDs (\n    argos_lib::led::Animation animation\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>animation</code> Animation to use </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#function-ledsubsystem","title":"function LEDSubsystem","text":"<p>Construct a new LEDSubsystem object. <pre><code>explicit argos_lib::LEDSubsystem::LEDSubsystem (\n    unsigned numAuxLEDs\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>numAuxLEDs</code> Number of LEDs attached to the CANdle </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#function-periodic","title":"function Periodic","text":"<pre><code>void argos_lib::LEDSubsystem::Periodic () override\n</code></pre> <p>Will be called periodically whenever the CommandScheduler runs. </p>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#function-stockanimateauxleds","title":"function StockAnimateAuxLEDs","text":"<p>Set LEDs in attached strip/panel to use stock animation. <pre><code>void argos_lib::LEDSubsystem::StockAnimateAuxLEDs (\n    ctre::phoenix::led::Animation &amp; animation,\n    int slot\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>animation</code> Animation to assign where led offset 0 is beginning of attached LEDs </li> <li><code>slot</code> Animation slot to use </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_l_e_d_subsystem.html#function-stockanimateintegratedleds","title":"function StockAnimateIntegratedLEDs","text":"<p>Set LEDs built into CANdle to use stock animation. <pre><code>void argos_lib::LEDSubsystem::StockAnimateIntegratedLEDs (\n    ctre::phoenix::led::Animation &amp; animation,\n    int slot\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>animation</code> Animation to assign </li> <li><code>slot</code> Animation slot to use </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/led_subsystem.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_n_t_motor_p_i_d_tuner.html","title":"Class argos_lib::NTMotorPIDTuner","text":"<p>ClassList &gt; argos_lib &gt; NTMotorPIDTuner</p> <p>Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. More...</p> <ul> <li><code>#include &lt;nt_motor_pid_tuner.h&gt;</code></li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_n_t_motor_p_i_d_tuner.html#public-functions","title":"Public Functions","text":"Type Name NTMotorPIDTuner (const std::string &amp; tableName, std::initializer_list&lt; BaseTalon * &gt; motors, unsigned pidSlot, ClosedLoopSensorConversions sensorConversions={}) Construct a new NTMotorPIDTuner object. ~NTMotorPIDTuner () Destroy the NTMotorPIDTuner object."},{"location":"argos-lib/classargos__lib_1_1_n_t_motor_p_i_d_tuner.html#detailed-description","title":"Detailed Description","text":"<p>Note:</p> <p>This runs a background thread to read statuses of motors without calling repeatedly </p>"},{"location":"argos-lib/classargos__lib_1_1_n_t_motor_p_i_d_tuner.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_n_t_motor_p_i_d_tuner.html#function-ntmotorpidtuner","title":"function NTMotorPIDTuner","text":"<p>Construct a new NTMotorPIDTuner object. <pre><code>argos_lib::NTMotorPIDTuner::NTMotorPIDTuner (\n    const std::string &amp; tableName,\n    std::initializer_list&lt; BaseTalon * &gt; motors,\n    unsigned pidSlot,\n    ClosedLoopSensorConversions sensorConversions={}\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tableName</code> Root table in which to make tuning and status keys </li> <li><code>motors</code> Pointers to motors that should be monitored and configured. Can be one motor if only one motor uses the control loop parameters </li> <li><code>pidSlot</code> PID slot to save tunes into </li> <li><code>sensorConversions</code> Sensor conversion factors to make status values human readable </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_n_t_motor_p_i_d_tuner.html#function-ntmotorpidtuner_1","title":"function ~NTMotorPIDTuner","text":"<p>Destroy the NTMotorPIDTuner object. <pre><code>argos_lib::NTMotorPIDTuner::~NTMotorPIDTuner () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_motor_pid_tuner.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_n_t_subscriber.html","title":"Class argos_lib::NTSubscriber","text":"<p>ClassList &gt; argos_lib &gt; NTSubscriber</p> <p>Subscribes to Network Tables entry updates and calls a specified callback to use the new value. </p> <ul> <li><code>#include &lt;nt_subscriber.h&gt;</code></li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_n_t_subscriber.html#public-functions","title":"Public Functions","text":"Type Name void AddMonitor (const std::string &amp; keyName, std::function&lt; void(double)&gt; onUpdateCallback, const double defaultValue=0.0, const bool forceUpdate=true) Register a new listener for the specified key and send values to callback on update. NTSubscriber (const std::string &amp; tableName) Construct a new NTSubscriber object. ~NTSubscriber ()"},{"location":"argos-lib/classargos__lib_1_1_n_t_subscriber.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_n_t_subscriber.html#function-addmonitor","title":"function AddMonitor","text":"<p>Register a new listener for the specified key and send values to callback on update. <pre><code>void argos_lib::NTSubscriber::AddMonitor (\n    const std::string &amp; keyName,\n    std::function&lt; void(double)&gt; onUpdateCallback,\n    const double defaultValue=0.0,\n    const bool forceUpdate=true\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>keyName</code> Key to listen for updates. Will be at tableName/keyName (keyName can have more slashes) </li> <li><code>onUpdateCallback</code> Callback to run when keyName changes </li> <li><code>defaultValue</code> Default value to initialize key if it doesn't exist yet </li> <li><code>forceUpdate</code> When true, update network tables value to default even if another value is already set </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_n_t_subscriber.html#function-ntsubscriber","title":"function NTSubscriber","text":"<p>Construct a new NTSubscriber object. <pre><code>explicit argos_lib::NTSubscriber::NTSubscriber (\n    const std::string &amp; tableName\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tableName</code> Name of the table containing keys to watch </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_n_t_subscriber.html#function-ntsubscriber_1","title":"function ~NTSubscriber","text":"<pre><code>argos_lib::NTSubscriber::~NTSubscriber () \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_subscriber.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_swap_controllers_command.html","title":"Class argos_lib::SwapControllersCommand","text":"<p>ClassList &gt; argos_lib &gt; SwapControllersCommand</p> <p>Swaps rolls of two controllers. Useful if one controller breaks during a match. </p> <ul> <li><code>#include &lt;swap_controllers_command.h&gt;</code></li> </ul> <p>Inherits the following classes: frc2::CommandHelper&lt; frc2::Command, SwapControllersCommand &gt;</p>"},{"location":"argos-lib/classargos__lib_1_1_swap_controllers_command.html#public-functions","title":"Public Functions","text":"Type Name void End (bool) overrideSwap controllers when trigger ends. void Initialize () overrideIndicate swap has started, but don't actually swap yet. SwapControllersCommand (SwappableControllersSubsystem * controllers)"},{"location":"argos-lib/classargos__lib_1_1_swap_controllers_command.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_swap_controllers_command.html#function-end","title":"function End","text":"<p>Swap controllers when trigger ends. <pre><code>void argos_lib::SwapControllersCommand::End (\n    bool\n) override\n</code></pre></p>"},{"location":"argos-lib/classargos__lib_1_1_swap_controllers_command.html#function-initialize","title":"function Initialize","text":"<p>Indicate swap has started, but don't actually swap yet. <pre><code>void argos_lib::SwapControllersCommand::Initialize () override\n</code></pre></p>"},{"location":"argos-lib/classargos__lib_1_1_swap_controllers_command.html#function-swapcontrollerscommand","title":"function SwapControllersCommand","text":"<pre><code>explicit argos_lib::SwapControllersCommand::SwapControllersCommand (\n    SwappableControllersSubsystem * controllers\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/commands/swap_controllers_command.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html","title":"Class argos_lib::SwappableControllersSubsystem","text":"<p>ClassList &gt; argos_lib &gt; SwappableControllersSubsystem</p> <p>Allows two controllers to swap between \"Driver\" and \"Operator\" control schemes on the fly by swapping the m_driverController and m_operatorController objects. </p> <ul> <li><code>#include &lt;swappable_controllers_subsystem.h&gt;</code></li> </ul> <p>Inherits the following classes: frc2::SubsystemBase</p>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#public-functions","title":"Public Functions","text":"Type Name argos_lib::XboxController &amp; DriverController () Get reference to active driver controller. argos_lib::XboxController &amp; OperatorController () Get reference to active operator controller. void Periodic () overrideWill be called periodically whenever the CommandScheduler runs. void Swap () Swap driver and operator controller rolls. SwappableControllersSubsystem () = delete SwappableControllersSubsystem (int driverControllerPort, int operatorControllerPort) Construct a new Swappable Controllers Subsystem object with two controllers. void VibrateAll (argos_lib::VibrationModel newModel) Change vibration model for both controllers."},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-drivercontroller","title":"function DriverController","text":"<p>Get reference to active driver controller. <pre><code>argos_lib::XboxController &amp; argos_lib::SwappableControllersSubsystem::DriverController () \n</code></pre></p> <p>Returns:</p> <p>Active driver controller based on swaps up to this point </p>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-operatorcontroller","title":"function OperatorController","text":"<p>Get reference to active operator controller. <pre><code>argos_lib::XboxController &amp; argos_lib::SwappableControllersSubsystem::OperatorController () \n</code></pre></p> <p>Returns:</p> <p>Active operator controller based on swaps up to this point </p>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-periodic","title":"function Periodic","text":"<p>Will be called periodically whenever the CommandScheduler runs. <pre><code>void argos_lib::SwappableControllersSubsystem::Periodic () override\n</code></pre></p> <p>Will be called periodically whenever the CommandScheduler runs. </p>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-swap","title":"function Swap","text":"<p>Swap driver and operator controller rolls. <pre><code>void argos_lib::SwappableControllersSubsystem::Swap () \n</code></pre></p>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-swappablecontrollerssubsystem-12","title":"function SwappableControllersSubsystem [1/2]","text":"<pre><code>argos_lib::SwappableControllersSubsystem::SwappableControllersSubsystem () = delete\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-swappablecontrollerssubsystem-22","title":"function SwappableControllersSubsystem [2/2]","text":"<p>Construct a new Swappable Controllers Subsystem object with two controllers. <pre><code>argos_lib::SwappableControllersSubsystem::SwappableControllersSubsystem (\n    int driverControllerPort,\n    int operatorControllerPort\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>driverControllerPort</code> Index of driver controller </li> <li><code>operatorControllerPort</code> Index of operator controller </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_swappable_controllers_subsystem.html#function-vibrateall","title":"function VibrateAll","text":"<p>Change vibration model for both controllers. <pre><code>void argos_lib::SwappableControllersSubsystem::VibrateAll (\n    argos_lib::VibrationModel newModel\n) \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/swappable_controllers_subsystem.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html","title":"Class argos_lib::SwerveFSHomingStorage","text":"<p>ClassList &gt; argos_lib &gt; SwerveFSHomingStorage</p> <p>Inherits the following classes: argos_lib::SwerveHomeStorageInterface</p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html#public-functions","title":"Public Functions","text":"Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () overrideLoad absolute positions that represent 0 degree module orientations. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) overrideSave positions as new homes. SwerveFSHomingStorage (const fs::path &amp; swerveHomesPath) Construct a new File System Homing Storage object."},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html#public-functions-inherited-from-argos_libswervehomestorageinterface","title":"Public Functions inherited from argos_lib::SwerveHomeStorageInterface","text":"<p>See argos_lib::SwerveHomeStorageInterface</p> Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html#function-load","title":"function Load","text":"<p>Load absolute positions that represent 0 degree module orientations. <pre><code>virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; argos_lib::SwerveFSHomingStorage::Load () override\n</code></pre></p> <p>Returns:</p> <p>Saved module positions if they exist, otherwise std::nullopt to indicate failure </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Load</p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html#function-save","title":"function Save","text":"<p>Save positions as new homes. <pre><code>virtual bool argos_lib::SwerveFSHomingStorage::Save (\n    const argos_lib::swerve::SwerveModulePositions &amp; homePosition\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Positions that represent 0 degree module orientations </li> </ul> <p>Returns:</p> <p>true if save successful, false otherwise </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Save</p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_f_s_homing_storage.html#function-swervefshomingstorage","title":"function SwerveFSHomingStorage","text":"<p>Construct a new File System Homing Storage object. <pre><code>explicit argos_lib::SwerveFSHomingStorage::SwerveFSHomingStorage (\n    const fs::path &amp; swerveHomesPath\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>swerveHomesPath</code> File path relative to home directory to save into and load from </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/fs_homing.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_home_storage_interface.html","title":"Class argos_lib::SwerveHomeStorageInterface","text":"<p>ClassList &gt; argos_lib &gt; SwerveHomeStorageInterface</p> <p>Interface capable of saving and loading module home positions from persistent storage. </p> <ul> <li><code>#include &lt;homing_interface.h&gt;</code></li> </ul> <p>Inherited by the following classes: argos_lib::SwerveFSHomingStorage,  argos_lib::swerve::NetworkTablesHomingStorage</p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_home_storage_interface.html#public-functions","title":"Public Functions","text":"Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/classargos__lib_1_1_swerve_home_storage_interface.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_swerve_home_storage_interface.html#function-load","title":"function Load","text":"<p>Load home position from persistent storage. <pre><code>virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; argos_lib::SwerveHomeStorageInterface::Load () = 0\n</code></pre></p> <p>Returns:</p> <p>Poisitions from persistent storage or std::nullopt if load failed or no positions were previously stored </p>"},{"location":"argos-lib/classargos__lib_1_1_swerve_home_storage_interface.html#function-save","title":"function Save","text":"<p>Save home position to persistent storage. <pre><code>virtual bool argos_lib::SwerveHomeStorageInterface::Save (\n    const argos_lib::swerve::SwerveModulePositions &amp; homePosition\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Positions to store </li> </ul> <p>Returns:</p> <p>true Save successful </p> <p>Returns:</p> <p>false Error saving </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/homing_interface.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_vibration_status.html","title":"Struct argos_lib::VibrationStatus","text":"<p>ClassList &gt; argos_lib &gt; VibrationStatus</p> <p>Vibration percentages that can be sent to controller for user feedback. </p> <ul> <li><code>#include &lt;vibration.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1_vibration_status.html#public-attributes","title":"Public Attributes","text":"Type Name double intensityLeft   = <code>0.0</code>Intensity percent for left vibration [0,1.0]. double intensityRight   = <code>0.0</code>Intensity percent for right vibration [0,1.0]."},{"location":"argos-lib/structargos__lib_1_1_vibration_status.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_vibration_status.html#variable-intensityleft","title":"variable intensityLeft","text":"<p>Intensity percent for left vibration [0,1.0]. <pre><code>double argos_lib::VibrationStatus::intensityLeft;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_vibration_status.html#variable-intensityright","title":"variable intensityRight","text":"<p>Intensity percent for right vibration [0,1.0]. <pre><code>double argos_lib::VibrationStatus::intensityRight;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/vibration.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html","title":"Class argos_lib::XboxController","text":"<p>ClassList &gt; argos_lib &gt; XboxController</p> <p>Inherits the following classes: frc::GenericHID</p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#classes","title":"Classes","text":"Type Name struct UpdateStatus State of an individual button."},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#public-types","title":"Public Types","text":"Type Name enum Axis enum Button enum JoystickHand Replaces legacy joystick hand API for WPILib."},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#public-functions","title":"Public Functions","text":"Type Name bool GetDebouncedButton (Button buttonIdx) Get the status of button after applying debounce. bool GetDebouncedButton (std::vector&lt; Button &gt; buttonCombo) Get the status of a combination of buttons after applying debounce. Raw combo button state is active when all buttons are simultaneously active based on their independent debounce settings. bool GetDebouncedButtonPressed (Button buttonIdx) Detect if a button just transitioned from inactive to active after applying debounce. bool GetDebouncedButtonPressed (std::vector&lt; Button &gt; buttonCombo) Detect if a combination of buttons just transitioned from inactive to active after applying debounce. Raw combo button state is active when all buttons are simultaneously active based on their independent debounce settings. bool GetDebouncedButtonReleased (Button buttonIdx) Detect if a button just transitioned from active to inactive after applying debounce. bool GetDebouncedButtonReleased (std::vector&lt; Button &gt; buttonCombo) Detect if a combination of buttons just transitioned from active to inactive after applying debounce. Raw combo button state is active when all buttons are simultaneously active based on their independent debounce settings. bool GetRawButton (Button buttonIdx) Get the status of button. bool GetRawButton (std::vector&lt; Button &gt; buttonCombo) Get the status of a combination of buttons ignoring debounce. Raw combo button state is active when all buttons are simultaneously active. bool GetRawButtonPressed (Button buttonIdx) Detect if a button just transitioned from inactive to active. bool GetRawButtonPressed (std::vector&lt; Button &gt; buttonCombo) Detect if a combination of buttons just transitioned from inactive to active. Raw combo button state is active when all buttons are simultaneously active. bool GetRawButtonReleased (Button buttonIdx) Detect if a button just transitioned from active to inactive. bool GetRawButtonReleased (std::vector&lt; Button &gt; buttonCombo) Detect if a combination of buttons just transitioned from active to inactive. Raw combo button state is active when all buttons are simultaneously active. double GetTriggerAxis (JoystickHand hand) constGet percent from specified controller trigger button. VibrationModel GetVibration () constGet the active vibration model. double GetX (JoystickHand hand) constGet X joystick percent from specified joystick. double GetY (JoystickHand hand) constGet Y joystick percent from specified joystick. void SetButtonDebounce (Button targetButton, DebounceSettings newSettings) Configure debounce for a specified button. void SetVibration (VibrationModel newVibrationModel) Sets a new vibration pattern and updates vibration output based on that new model. void SwapSettings (XboxController &amp; other) Swap all configurations (debounce, etc) between this and other controller. Useful in conjunction with argos_lib::SwappableControllersSubsystem . frc2::Trigger TriggerDebounced (Button button) Generates a trigger that is true when debounced button is true. frc2::Trigger TriggerDebounced (std::vector&lt; Button &gt; buttonCombo) Generates a trigger that is true when all debounced buttons in buttonCombo are true. frc2::Trigger TriggerDebouncedAllOf (std::vector&lt; Button &gt; buttonCombo) Trigger when all of the selected buttons' debounced values are true. frc2::Trigger TriggerDebouncedAnyOf (std::vector&lt; Button &gt; buttonCombo) Trigger when any of the selected buttons' debounced value is true. frc2::Trigger TriggerDebouncedNoneOf (std::vector&lt; Button &gt; buttonCombo) Trigger when none of the selected buttons' debounced value is true. frc2::Trigger TriggerDebouncedOneOf (std::vector&lt; Button &gt; buttonCombo) Trigger when exactly one of the selected buttons' debounced value is true. frc2::Trigger TriggerRaw (Button button) Generates a trigger that is true when button is true. frc2::Trigger TriggerRaw (std::vector&lt; Button &gt; buttonCombo) Generates a trigger that is true when all buttons in buttonCombo are true. frc2::Trigger TriggerRawAllOf (std::vector&lt; Button &gt; buttonCombo) Trigger when all of the selected buttons' raw values are true. frc2::Trigger TriggerRawAnyOf (std::vector&lt; Button &gt; buttonCombo) Trigger when any of the selected buttons' raw value is true. frc2::Trigger TriggerRawNoneOf (std::vector&lt; Button &gt; buttonCombo) Trigger when none of the selected buttons' raw value is true. frc2::Trigger TriggerRawOneOf (std::vector&lt; Button &gt; buttonCombo) Trigger when exactly one of the selected buttons' raw value is true. UpdateStatus UpdateButton (Button buttonIdx) Determines the new status of a button. This is used by the other status retrieval functions. void UpdateVibration () Update vibration output based on current vibration model. XboxController () = delete XboxController (int port) Construct a new Xbox Controller object connected at port index."},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#enum-axis","title":"enum Axis","text":"<pre><code>enum argos_lib::XboxController::Axis {\n    kLeftX = 0,\n    kLeftY = 1,\n    kLeftTrigger = 2,\n    kRightTrigger = 3,\n    kRightX = 4,\n    kRightY = 5,\n    COUNT\n};\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#enum-button","title":"enum Button","text":"<pre><code>enum argos_lib::XboxController::Button {\n    kA = 1,\n    kB = 2,\n    kX = 3,\n    kY = 4,\n    kBumperLeft = 5,\n    kBumperRight = 6,\n    kBack = 7,\n    kStart = 8,\n    kStickLeft = 9,\n    kStickRight = 10,\n    kLeftTrigger = 11,\n    kRightTrigger = 12,\n    kUp = 13,\n    kRight = 14,\n    kDown = 15,\n    kLeft = 16,\n    COUNT\n};\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#enum-joystickhand","title":"enum JoystickHand","text":"<p>Replaces legacy joystick hand API for WPILib. <pre><code>enum argos_lib::XboxController::JoystickHand {\n    kLeftHand,\n    kRightHand\n};\n</code></pre></p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getdebouncedbutton-12","title":"function GetDebouncedButton [1/2]","text":"<p>Get the status of button after applying debounce. <pre><code>bool argos_lib::XboxController::GetDebouncedButton (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of requested button </li> </ul> <p>Returns:</p> <p>debounced status </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getdebouncedbutton-22","title":"function GetDebouncedButton [2/2]","text":"<p>Get the status of a combination of buttons after applying debounce. Raw combo button state is active when all buttons are simultaneously active based on their independent debounce settings. <pre><code>bool argos_lib::XboxController::GetDebouncedButton (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons that make up the combination </li> </ul> <p>Returns:</p> <p>debounced status </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getdebouncedbuttonpressed-12","title":"function GetDebouncedButtonPressed [1/2]","text":"<p>Detect if a button just transitioned from inactive to active after applying debounce. <pre><code>bool argos_lib::XboxController::GetDebouncedButtonPressed (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of requested button </li> </ul> <p>Returns:</p> <p>true if inactive to active transition occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getdebouncedbuttonpressed-22","title":"function GetDebouncedButtonPressed [2/2]","text":"<p>Detect if a combination of buttons just transitioned from inactive to active after applying debounce. Raw combo button state is active when all buttons are simultaneously active based on their independent debounce settings. <pre><code>bool argos_lib::XboxController::GetDebouncedButtonPressed (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons that make up the combination </li> </ul> <p>Returns:</p> <p>true if combination transition to active occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getdebouncedbuttonreleased-12","title":"function GetDebouncedButtonReleased [1/2]","text":"<p>Detect if a button just transitioned from active to inactive after applying debounce. <pre><code>bool argos_lib::XboxController::GetDebouncedButtonReleased (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of requested button </li> </ul> <p>Returns:</p> <p>true if active to inactive transition occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getdebouncedbuttonreleased-22","title":"function GetDebouncedButtonReleased [2/2]","text":"<p>Detect if a combination of buttons just transitioned from active to inactive after applying debounce. Raw combo button state is active when all buttons are simultaneously active based on their independent debounce settings. <pre><code>bool argos_lib::XboxController::GetDebouncedButtonReleased (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons that make up the combination </li> </ul> <p>Returns:</p> <p>true if combination transition to inactive occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getrawbutton-12","title":"function GetRawButton [1/2]","text":"<p>Get the status of button. <pre><code>bool argos_lib::XboxController::GetRawButton (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of requested button </li> </ul> <p>Returns:</p> <p>Status ignoring any debounce </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getrawbutton-22","title":"function GetRawButton [2/2]","text":"<p>Get the status of a combination of buttons ignoring debounce. Raw combo button state is active when all buttons are simultaneously active. <pre><code>bool argos_lib::XboxController::GetRawButton (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons that make up the combination </li> </ul> <p>Returns:</p> <p>Status ignoring any debounce </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getrawbuttonpressed-12","title":"function GetRawButtonPressed [1/2]","text":"<p>Detect if a button just transitioned from inactive to active. <pre><code>bool argos_lib::XboxController::GetRawButtonPressed (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of requested button </li> </ul> <p>Returns:</p> <p>true if inactive to active transition occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getrawbuttonpressed-22","title":"function GetRawButtonPressed [2/2]","text":"<p>Detect if a combination of buttons just transitioned from inactive to active. Raw combo button state is active when all buttons are simultaneously active. <pre><code>bool argos_lib::XboxController::GetRawButtonPressed (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons that make up the combination </li> </ul> <p>Returns:</p> <p>true if combination transition to active occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getrawbuttonreleased-12","title":"function GetRawButtonReleased [1/2]","text":"<p>Detect if a button just transitioned from active to inactive. <pre><code>bool argos_lib::XboxController::GetRawButtonReleased (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of requested button </li> </ul> <p>Returns:</p> <p>true if active to inactive transition occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getrawbuttonreleased-22","title":"function GetRawButtonReleased [2/2]","text":"<p>Detect if a combination of buttons just transitioned from active to inactive. Raw combo button state is active when all buttons are simultaneously active. <pre><code>bool argos_lib::XboxController::GetRawButtonReleased (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons that make up the combination </li> </ul> <p>Returns:</p> <p>true if combination transition to inactive occurred </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-gettriggeraxis","title":"function GetTriggerAxis","text":"<p>Get percent from specified controller trigger button. <pre><code>double argos_lib::XboxController::GetTriggerAxis (\n    JoystickHand hand\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>hand</code> Left or right trigger </li> </ul> <p>Returns:</p> <p>double Percent [0,1] </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getvibration","title":"function GetVibration","text":"<p>Get the active vibration model. <pre><code>VibrationModel argos_lib::XboxController::GetVibration () const\n</code></pre></p> <p>Returns:</p> <p>Active vibration model </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-getx","title":"function GetX","text":"<p>Get X joystick percent from specified joystick. <pre><code>double argos_lib::XboxController::GetX (\n    JoystickHand hand\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>hand</code> Left or right joystick </li> </ul> <p>Returns:</p> <p>double Percent [-1,1] </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-gety","title":"function GetY","text":"<p>Get Y joystick percent from specified joystick. <pre><code>double argos_lib::XboxController::GetY (\n    JoystickHand hand\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>hand</code> Left or right joystick </li> </ul> <p>Returns:</p> <p>double Percent [-1,1] </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-setbuttondebounce","title":"function SetButtonDebounce","text":"<p>Configure debounce for a specified button. <pre><code>void argos_lib::XboxController::SetButtonDebounce (\n    Button targetButton,\n    DebounceSettings newSettings\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>targetButton</code> Button to configure </li> <li><code>newSettings</code> New debounce configuration </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-setvibration","title":"function SetVibration","text":"<p>Sets a new vibration pattern and updates vibration output based on that new model. <pre><code>void argos_lib::XboxController::SetVibration (\n    VibrationModel newVibrationModel\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>newVibrationModel</code> Model to generate vibration output </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-swapsettings","title":"function SwapSettings","text":"<p>Swap all configurations (debounce, etc) between this and other controller. Useful in conjunction with argos_lib::SwappableControllersSubsystem . <pre><code>void argos_lib::XboxController::SwapSettings (\n    XboxController &amp; other\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>other</code> Controller to swap settings with </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerdebounced-12","title":"function TriggerDebounced [1/2]","text":"<p>Generates a trigger that is true when debounced button is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerDebounced (\n    Button button\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>button</code> Button to monitor </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger to monitor debounced button </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerdebounced-22","title":"function TriggerDebounced [2/2]","text":"<p>Generates a trigger that is true when all debounced buttons in buttonCombo are true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerDebounced (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to monitor </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger to monitor debounced buttons </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerdebouncedallof","title":"function TriggerDebouncedAllOf","text":"<p>Trigger when all of the selected buttons' debounced values are true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerDebouncedAllOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating all button debounced values are true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerdebouncedanyof","title":"function TriggerDebouncedAnyOf","text":"<p>Trigger when any of the selected buttons' debounced value is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerDebouncedAnyOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating any button debounced value is true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerdebouncednoneof","title":"function TriggerDebouncedNoneOf","text":"<p>Trigger when none of the selected buttons' debounced value is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerDebouncedNoneOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating none button debounced value is true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerdebouncedoneof","title":"function TriggerDebouncedOneOf","text":"<p>Trigger when exactly one of the selected buttons' debounced value is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerDebouncedOneOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating one button's debounced value is true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerraw-12","title":"function TriggerRaw [1/2]","text":"<p>Generates a trigger that is true when button is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerRaw (\n    Button button\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>button</code> Button to monitor </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger to monitor button </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerraw-22","title":"function TriggerRaw [2/2]","text":"<p>Generates a trigger that is true when all buttons in buttonCombo are true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerRaw (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to monitor </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger to monitor buttons </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerrawallof","title":"function TriggerRawAllOf","text":"<p>Trigger when all of the selected buttons' raw values are true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerRawAllOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating all button raw values are true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerrawanyof","title":"function TriggerRawAnyOf","text":"<p>Trigger when any of the selected buttons' raw value is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerRawAnyOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating any button raw value is true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerrawnoneof","title":"function TriggerRawNoneOf","text":"<p>Trigger when none of the selected buttons' raw value is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerRawNoneOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating none button raw value is true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-triggerrawoneof","title":"function TriggerRawOneOf","text":"<p>Trigger when exactly one of the selected buttons' raw value is true. <pre><code>frc2::Trigger argos_lib::XboxController::TriggerRawOneOf (\n    std::vector&lt; Button &gt; buttonCombo\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonCombo</code> Buttons to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Trigger indicating one button's raw value is true </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-updatebutton","title":"function UpdateButton","text":"<p>Determines the new status of a button. This is used by the other status retrieval functions. <pre><code>UpdateStatus argos_lib::XboxController::UpdateButton (\n    Button buttonIdx\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>buttonIdx</code> Index of button to update </li> </ul> <p>Returns:</p> <p>UpdateStatus Full button state </p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-updatevibration","title":"function UpdateVibration","text":"<p>Update vibration output based on current vibration model. <pre><code>void argos_lib::XboxController::UpdateVibration () \n</code></pre></p>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-xboxcontroller-12","title":"function XboxController [1/2]","text":"<pre><code>argos_lib::XboxController::XboxController () = delete\n</code></pre>"},{"location":"argos-lib/classargos__lib_1_1_xbox_controller.html#function-xboxcontroller-22","title":"function XboxController [2/2]","text":"<p>Construct a new Xbox Controller object connected at port index. <pre><code>explicit argos_lib::XboxController::XboxController (\n    int port\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>port</code> Index of new controller </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/xbox_controller.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html","title":"Struct argos_lib::XboxController::UpdateStatus","text":"<p>ClassList &gt; argos_lib &gt; XboxController &gt; UpdateStatus</p> <p>State of an individual button. </p> <ul> <li><code>#include &lt;xbox_controller.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#public-attributes","title":"Public Attributes","text":"Type Name bool debounceActive   = <code>false</code>Button status after debounce applied. bool debouncePress   = <code>false</code>Transitioned from inactive to active after debounce applied. bool debounceRelease   = <code>false</code>Transitioned from active to inactive after debounce applied. bool pressed   = <code>false</code>Transitioned from inactive to active. bool rawActive   = <code>false</code>Raw button status. bool released   = <code>false</code>Transitioned from active to inactive."},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#variable-debounceactive","title":"variable debounceActive","text":"<p>Button status after debounce applied. <pre><code>bool argos_lib::XboxController::UpdateStatus::debounceActive;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#variable-debouncepress","title":"variable debouncePress","text":"<p>Transitioned from inactive to active after debounce applied. <pre><code>bool argos_lib::XboxController::UpdateStatus::debouncePress;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#variable-debouncerelease","title":"variable debounceRelease","text":"<p>Transitioned from active to inactive after debounce applied. <pre><code>bool argos_lib::XboxController::UpdateStatus::debounceRelease;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#variable-pressed","title":"variable pressed","text":"<p>Transitioned from inactive to active. <pre><code>bool argos_lib::XboxController::UpdateStatus::pressed;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#variable-rawactive","title":"variable rawActive","text":"<p>Raw button status. <pre><code>bool argos_lib::XboxController::UpdateStatus::rawActive;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_update_status.html#variable-released","title":"variable released","text":"<p>Transitioned from active to inactive. <pre><code>bool argos_lib::XboxController::UpdateStatus::released;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/xbox_controller.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1angle.html","title":"Namespace argos_lib::angle","text":"<p>Namespace List &gt; argos_lib &gt; angle</p>"},{"location":"argos-lib/namespaceargos__lib_1_1angle.html#public-functions","title":"Public Functions","text":"Type Name units::degree_t ConstrainAngle (units::degree_t inVal, units::degree_t minVal, units::degree_t maxVal) Normalize angle to specified range. double ConstrainAngle (double inVal, double minVal, double maxVal) Normalize angle to specified range. units::degree_t InvertedAngle (units::degree_t desiredAngle, units::degree_t referenceAngle) Finds closest angle alias of a vector 180-degrees offset from desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. units::degree_t NearestAngle (units::degree_t desiredAngle, units::degree_t referenceAngle) Finds closest angle alias of desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded."},{"location":"argos-lib/namespaceargos__lib_1_1angle.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1angle.html#function-constrainangle","title":"function ConstrainAngle","text":"<p>Normalize angle to specified range. <pre><code>units::degree_t argos_lib::angle::ConstrainAngle (\n    units::degree_t inVal,\n    units::degree_t minVal,\n    units::degree_t maxVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>inVal</code> Angle to constrain </li> <li><code>minVal</code> Normalization lower bound </li> <li><code>maxVal</code> Normalization upper bound </li> </ul> <p>Returns:</p> <p>Normalized value in range [minVal, maxVal] </p>"},{"location":"argos-lib/namespaceargos__lib_1_1angle.html#function-constrainangle_1","title":"function ConstrainAngle","text":"<p>Normalize angle to specified range. <pre><code>double argos_lib::angle::ConstrainAngle (\n    double inVal,\n    double minVal,\n    double maxVal\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>inVal</code> Angle to constrain (degrees) </li> <li><code>minVal</code> Normalization lower bound (degrees) </li> <li><code>maxVal</code> Normalization upper bound (degrees) </li> </ul> <p>Returns:</p> <p>Normalized value in range [minVal, maxVal] (degrees) </p>"},{"location":"argos-lib/namespaceargos__lib_1_1angle.html#function-invertedangle","title":"function InvertedAngle","text":"<p>Finds closest angle alias of a vector 180-degrees offset from desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. <pre><code>units::degree_t argos_lib::angle::InvertedAngle (\n    units::degree_t desiredAngle,\n    units::degree_t referenceAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredAngle</code> Angle to find 180-degree offset alias for </li> <li><code>referenceAngle</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Offset angle alias of desiredAngle in range (referencedAngle - 180_deg, referencedAngle + 180_deg] </p>"},{"location":"argos-lib/namespaceargos__lib_1_1angle.html#function-nearestangle","title":"function NearestAngle","text":"<p>Finds closest angle alias of desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. <pre><code>units::degree_t argos_lib::angle::NearestAngle (\n    units::degree_t desiredAngle,\n    units::degree_t referenceAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredAngle</code> Angle to find alias for </li> <li><code>referenceAngle</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Angle alias of desiredAngle in range (referencedAngle - 180_deg, referencedAngle + 180_deg] </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/angle_utils.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html","title":"Namespace argos_lib::cancoder_config","text":"<p>Namespace List &gt; argos_lib &gt; cancoder_config</p>"},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#public-types","title":"Public Types","text":"Type Name typedef ctre::phoenix6::hardware::CANcoder CANcoder"},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#public-functions","title":"Public Functions","text":"Type Name bool CanCoderConfig (CANcoder &amp; encoder, units::millisecond_t configTimeout) Configures a CTRE CanCoder with only the fields provided. All other fields are given the factory default values. bool CanCoderConfig (CANcoder &amp; encoder, units::millisecond_t configTimeout, argos_lib::RobotInstance instance) Configures a CTRE CanCoder with configuration values according to specified robot instance."},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#typedef-cancoder","title":"typedef CANcoder","text":"<pre><code>using argos_lib::cancoder_config::CANcoder =  ctre::phoenix6::hardware::CANcoder;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#function-cancoderconfig","title":"function CanCoderConfig","text":"<p>Configures a CTRE CanCoder with only the fields provided. All other fields are given the factory default values. <pre><code>template&lt;typename T&gt;\nbool argos_lib::cancoder_config::CanCoderConfig (\n    CANcoder &amp; encoder,\n    units::millisecond_t configTimeout\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>T</code> Structure containing any combination of the following members:</li> <li>direction</li> <li>magOffset</li> <li>absoluteSensorDiscontinuityPoint </li> </ul> <p>Parameters:</p> <ul> <li><code>encoder</code> CANcoder object to configure </li> <li><code>configTimeout</code> Time to wait for response from CANcoder </li> </ul> <p>Returns:</p> <p>true Configuration succeeded </p> <p>Returns:</p> <p>false Configuration failed </p>"},{"location":"argos-lib/namespaceargos__lib_1_1cancoder__config.html#function-cancoderconfig_1","title":"function CanCoderConfig","text":"<p>Configures a CTRE CanCoder with configuration values according to specified robot instance. <pre><code>template&lt;typename CompetitionConfig, typename PracticeConfig&gt;\nbool argos_lib::cancoder_config::CanCoderConfig (\n    CANcoder &amp; encoder,\n    units::millisecond_t configTimeout,\n    argos_lib::RobotInstance instance\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>CompetitionConfig</code> Configurations to use in competition robot instance </li> <li><code>PracticeConfig</code> Configurations to use in practice robot instance </li> </ul> <p>Parameters:</p> <ul> <li><code>encoder</code> CANcoder object to configure </li> <li><code>configTimeout</code> Time to wait for response from CANcoder </li> <li><code>instance</code> Robot instance to use </li> </ul> <p>Returns:</p> <p>true Configuration succeeded </p> <p>Returns:</p> <p>false Configuration failed </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/cancoder_config.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html","title":"Namespace argos_lib::colors","text":"<p>Namespace List &gt; argos_lib &gt; colors</p>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#public-static-attributes","title":"Public Static Attributes","text":"Type Name ArgosColor kCatYellow   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){255, 163, 0}</code> ArgosColor kConeYellow   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){222, 178, 18}</code> ArgosColor kCubePurple   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){130, 0, 130}</code> ArgosColor kHotPink   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){255, 105, 180}</code> ArgosColor kNoteOrange   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){255, 130, 50}</code> ArgosColor kOff   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){0, 0, 0}</code> ArgosColor kPlum   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){160, 100, 150}</code> ArgosColor kPurple   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){75, 0, 130}</code> ArgosColor kReallyBlue   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){0, 0, 255}</code> ArgosColor kReallyGreen   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){0, 255, 0}</code> ArgosColor kReallyRed   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){255, 0, 0}</code> ArgosColor kWhite   = <code>[**ArgosColor**](structargos__lib_1_1_argos_color.md){120, 120, 120}</code>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kcatyellow","title":"variable kCatYellow","text":"<pre><code>ArgosColor argos_lib::colors::kCatYellow;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kconeyellow","title":"variable kConeYellow","text":"<pre><code>ArgosColor argos_lib::colors::kConeYellow;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kcubepurple","title":"variable kCubePurple","text":"<pre><code>ArgosColor argos_lib::colors::kCubePurple;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-khotpink","title":"variable kHotPink","text":"<pre><code>ArgosColor argos_lib::colors::kHotPink;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-knoteorange","title":"variable kNoteOrange","text":"<pre><code>ArgosColor argos_lib::colors::kNoteOrange;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-koff","title":"variable kOff","text":"<pre><code>ArgosColor argos_lib::colors::kOff;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kplum","title":"variable kPlum","text":"<pre><code>ArgosColor argos_lib::colors::kPlum;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kpurple","title":"variable kPurple","text":"<pre><code>ArgosColor argos_lib::colors::kPurple;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kreallyblue","title":"variable kReallyBlue","text":"<pre><code>ArgosColor argos_lib::colors::kReallyBlue;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kreallygreen","title":"variable kReallyGreen","text":"<pre><code>ArgosColor argos_lib::colors::kReallyGreen;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kreallyred","title":"variable kReallyRed","text":"<pre><code>ArgosColor argos_lib::colors::kReallyRed;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1colors.html#variable-kwhite","title":"variable kWhite","text":"<pre><code>ArgosColor argos_lib::colors::kWhite;\n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/color.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1falcon__config.html","title":"Namespace argos_lib::falcon_config","text":"<p>Namespace List &gt; argos_lib &gt; falcon_config</p>"},{"location":"argos-lib/namespaceargos__lib_1_1falcon__config.html#public-functions","title":"Public Functions","text":"Type Name bool FalconConfig (ctre::phoenix6::hardware::TalonFX &amp; motorController, units::millisecond_t configTimeout) Configures a CTRE Falcon with only the fields provided. All other fields are given the factory default values. bool FalconConfig (ctre::phoenix6::hardware::TalonFX &amp; motorController, units::millisecond_t configTimeout, argos_lib::RobotInstance instance) Configures a CTRE Falcon with configuration values according to specified robot instance."},{"location":"argos-lib/namespaceargos__lib_1_1falcon__config.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1falcon__config.html#function-falconconfig","title":"function FalconConfig","text":"<p>Configures a CTRE Falcon with only the fields provided. All other fields are given the factory default values. <pre><code>template&lt;typename T&gt;\nbool argos_lib::falcon_config::FalconConfig (\n    ctre::phoenix6::hardware::TalonFX &amp; motorController,\n    units::millisecond_t configTimeout\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>T</code> Structure containing any combination of the following members:</li> <li>forwardLimit_deviceID</li> <li>forwardLimit_normalState</li> <li>forwardLimit_source</li> <li>inverted</li> <li>neutralDeadband</li> <li>neutralMode</li> <li>dutyCycleNeutralDeadband</li> <li>peakOutputForward</li> <li>peakOutputReverse</li> <li>voltageOpenLoopRampPeriod</li> <li>dutyCycleOpenLoopRampPeriod</li> <li>pid0_kP</li> <li>pid0_kI</li> <li>pid0_kD</li> <li>pid0_kS</li> <li>pid0_kV</li> <li>pid0_kA</li> <li>pid0_kG</li> <li>pid0_gravityType</li> <li>pid1_kP</li> <li>pid1_kI</li> <li>pid1_kD</li> <li>pid1_kS</li> <li>pid1_kV</li> <li>pid1_kA</li> <li>pid1_kG</li> <li>pid1_gravityType</li> <li>motionMagic_cruiseVelocity</li> <li>motionMagic_acceleration</li> <li>motionMagic_jerk</li> <li>motionMagic_expo_kV</li> <li>motionMagic_expo_kA</li> <li>reverseLimit_deviceID</li> <li>reverseLimit_normalState</li> <li>reverseLimit_source</li> <li>rotorToSensorRatio</li> <li>selectedSensor</li> <li>selectedSensor_addr</li> <li>sensorToMechanismRatio</li> <li>statorCurrentLimit</li> <li>statusFrameMotorMode</li> <li>supplyCurrentLimit</li> <li>supplyCurrentLowerLimit</li> <li>supplyCurrentLowerTime </li> </ul> <p>Parameters:</p> <ul> <li><code>motorController</code> Falcon object to configure </li> <li><code>configTimeout</code> Time to wait for response from Falcon </li> </ul> <p>Returns:</p> <p>true Configuration succeeded </p> <p>Returns:</p> <p>false Configuration failed </p>"},{"location":"argos-lib/namespaceargos__lib_1_1falcon__config.html#function-falconconfig_1","title":"function FalconConfig","text":"<p>Configures a CTRE Falcon with configuration values according to specified robot instance. <pre><code>template&lt;typename CompetitionConfig, typename PracticeConfig&gt;\nbool argos_lib::falcon_config::FalconConfig (\n    ctre::phoenix6::hardware::TalonFX &amp; motorController,\n    units::millisecond_t configTimeout,\n    argos_lib::RobotInstance instance\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>CompetitionConfig</code> Configurations to use in competition robot instance </li> <li><code>PracticeConfig</code> Configurations to use in practice robot instance </li> </ul> <p>Parameters:</p> <ul> <li><code>motorController</code> Falcon object to configure </li> <li><code>configTimeout</code> Time to wait for response from Falcon </li> <li><code>instance</code> Robot instance to use </li> </ul> <p>Returns:</p> <p>true Configuration succeeded </p> <p>Returns:</p> <p>false Configuration failed </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/falcon_config.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html","title":"Namespace argos_lib::gamma_corrected_colors","text":"<p>Namespace List &gt; argos_lib &gt; gamma_corrected_colors</p>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#public-static-attributes","title":"Public Static Attributes","text":"Type Name ArgosColor kCatYellow   = <code>GammaCorrect(argos\\_lib::colors::kCatYellow)</code> ArgosColor kConeYellow   = <code>GammaCorrect(argos\\_lib::colors::kConeYellow)</code> ArgosColor kCubePurple   = <code>GammaCorrect(argos\\_lib::colors::kCubePurple)</code> ArgosColor kHotPink   = <code>GammaCorrect(argos\\_lib::colors::kHotPink)</code> ArgosColor kNoteOrange   = <code>GammaCorrect(argos\\_lib::colors::kNoteOrange)</code> ArgosColor kOff   = <code>GammaCorrect(argos\\_lib::colors::kOff)</code> ArgosColor kPlum   = <code>GammaCorrect(argos\\_lib::colors::kPlum)</code> ArgosColor kPurple   = <code>GammaCorrect(argos\\_lib::colors::kPurple)</code> ArgosColor kReallyBlue   = <code>GammaCorrect(argos\\_lib::colors::kReallyBlue)</code> ArgosColor kReallyGreen   = <code>GammaCorrect(argos\\_lib::colors::kReallyGreen)</code> ArgosColor kReallyRed   = <code>GammaCorrect(argos\\_lib::colors::kReallyRed)</code> ArgosColor kWhite   = <code>GammaCorrect(argos\\_lib::colors::kWhite)</code>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kcatyellow","title":"variable kCatYellow","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kCatYellow;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kconeyellow","title":"variable kConeYellow","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kConeYellow;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kcubepurple","title":"variable kCubePurple","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kCubePurple;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-khotpink","title":"variable kHotPink","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kHotPink;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-knoteorange","title":"variable kNoteOrange","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kNoteOrange;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-koff","title":"variable kOff","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kOff;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kplum","title":"variable kPlum","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kPlum;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kpurple","title":"variable kPurple","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kPurple;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kreallyblue","title":"variable kReallyBlue","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kReallyBlue;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kreallygreen","title":"variable kReallyGreen","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kReallyGreen;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kreallyred","title":"variable kReallyRed","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kReallyRed;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1gamma__corrected__colors.html#variable-kwhite","title":"variable kWhite","text":"<pre><code>ArgosColor argos_lib::gamma_corrected_colors::kWhite;\n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/color.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html","title":"Namespace argos_lib::led","text":"<p>Namespace List &gt; argos_lib &gt; led</p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#namespaces","title":"Namespaces","text":"Type Name namespace animation"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#classes","title":"Classes","text":"Type Name struct Animation A representation of a custom LED animation. class Array2D &lt;typename T&gt;Array2D representation where origin is at bottom left. struct PanelScanParams struct Sprite https://en.wikipedia.org/wiki/Sprite_(computer_graphics) __"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; Sprite()&gt; AnimatedSprite Callable to get dynamic sprite. enum FirstPixelPosition When representing a panel as a strip, which pixel is the first address. typedef Array2D&lt; float &gt; Mask typedef Array2D&lt; frc::AddressableLED::LEDData &gt; Panel Pixels in a panel. enum PrimaryScanDirection When representing a panel as a strip, sequential addresses are in this direction. Note that the actual scan direction will alternate on every row/column in the secondary scan direction. For example, if the primary scan direction is vertical, adjacent columns will alternate between up and down. typedef std::vector&lt; frc::AddressableLED::LEDData &gt; Strip A strip of LEDs."},{"location":"argos-lib/namespaceargos__lib_1_1led.html#public-functions","title":"Public Functions","text":"Type Name units::degree_t FlipHorizontal (units::degree_t incidentAngle) Flip an angle horizontally as though a ray bounces off a horizontal surface. units::degree_t FlipVertical (units::degree_t inicidentAngle) Flip an angle vertically as though a ray bounces off a vertical surface. bool PointInBox (float corner1X, float corner1Y, float corner2X, float corner2Y, float pointX, float pointY) Determine if a point (pointX, pointY) is within the bounds of an axis-aligned bounding box with opposite corners (corner1X, corner1Y) and (corner2X, corner2Y) std::optional&lt; std::pair&lt; float, float &gt; &gt; SegmentIntersection (float s1x1, float s1y1, float s1x2, float s1y2, float s2x1, float s2y1, float s2x2, float s2y2) Finds the intersection point of two lines [(s1x1, s1y1), (s1x2, s1y2)] and [(s2x1, s2y1), (s2x2, s2y2)] if it exists. If the two lines are colinear, no intersection point is returned. Strip Serialize (const Panel &amp; panel, const PanelScanParams &amp; params) Convert a panel to a 1D vector of pixels in addressing order. This is a helper function because many panel animations are easier to design in 2D space then convert back to address order when it comes time to display."},{"location":"argos-lib/namespaceargos__lib_1_1led.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1led.html#typedef-animatedsprite","title":"typedef AnimatedSprite","text":"<p>Callable to get dynamic sprite. <pre><code>using argos_lib::led::AnimatedSprite =  std::function&lt;Sprite()&gt;;\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#enum-firstpixelposition","title":"enum FirstPixelPosition","text":"<p>When representing a panel as a strip, which pixel is the first address. <pre><code>enum argos_lib::led::FirstPixelPosition {\n    TopRight,\n    TopLeft,\n    BottomLeft,\n    BottomRight\n};\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#typedef-mask","title":"typedef Mask","text":"<pre><code>using argos_lib::led::Mask =  Array2D&lt;float&gt;;\n</code></pre> <p>Transparency mask (alpha channel) for a panel. Range [0,1] where 0 is fully transparent and 1 is fully opaque. </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#typedef-panel","title":"typedef Panel","text":"<p>Pixels in a panel. <pre><code>using argos_lib::led::Panel =  Array2D&lt;frc::AddressableLED::LEDData&gt;;\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#enum-primaryscandirection","title":"enum PrimaryScanDirection","text":"<p>When representing a panel as a strip, sequential addresses are in this direction. Note that the actual scan direction will alternate on every row/column in the secondary scan direction. For example, if the primary scan direction is vertical, adjacent columns will alternate between up and down. <pre><code>enum argos_lib::led::PrimaryScanDirection {\n    Vertical,\n    Horizontal\n};\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#typedef-strip","title":"typedef Strip","text":"<p>A strip of LEDs. <pre><code>using argos_lib::led::Strip =  std::vector&lt;frc::AddressableLED::LEDData&gt;;\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1led.html#function-fliphorizontal","title":"function FlipHorizontal","text":"<p>Flip an angle horizontally as though a ray bounces off a horizontal surface. <pre><code>units::degree_t argos_lib::led::FlipHorizontal (\n    units::degree_t incidentAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>incidentAngle</code> Angle of original motion </li> </ul> <p>Returns:</p> <p>Reflected angle</p> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#function-flipvertical","title":"function FlipVertical","text":"<p>Flip an angle vertically as though a ray bounces off a vertical surface. <pre><code>units::degree_t argos_lib::led::FlipVertical (\n    units::degree_t inicidentAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>incidentAngle</code> Angle of original motion </li> </ul> <p>Returns:</p> <p>Reflected angle </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#function-pointinbox","title":"function PointInBox","text":"<p>Determine if a point (pointX, pointY) is within the bounds of an axis-aligned bounding box with opposite corners (corner1X, corner1Y) and (corner2X, corner2Y) <pre><code>bool argos_lib::led::PointInBox (\n    float corner1X,\n    float corner1Y,\n    float corner2X,\n    float corner2Y,\n    float pointX,\n    float pointY\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>corner1X</code> First corner X coordinate </li> <li><code>corner1Y</code> First corner Y coordinate </li> <li><code>corner2X</code> Second corner X coordinate </li> <li><code>corner2Y</code> Second corner Y coordinate </li> <li><code>pointX</code> Test point X coordinate </li> <li><code>pointY</code> Test point Y coordinate </li> </ul> <p>Returns:</p> <p>true if point is in bounding box </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#function-segmentintersection","title":"function SegmentIntersection","text":"<p>Finds the intersection point of two lines [(s1x1, s1y1), (s1x2, s1y2)] and [(s2x1, s2y1), (s2x2, s2y2)] if it exists. If the two lines are colinear, no intersection point is returned. <pre><code>std::optional&lt; std::pair&lt; float, float &gt; &gt; argos_lib::led::SegmentIntersection (\n    float s1x1,\n    float s1y1,\n    float s1x2,\n    float s1y2,\n    float s2x1,\n    float s2y1,\n    float s2x2,\n    float s2y2\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>s1x1</code> First point of first segment x coordinate </li> <li><code>s1y1</code> First point of first segment y coordinate </li> <li><code>s1x2</code> Second point of first segment x coordinate </li> <li><code>s1y2</code> Second point of first segment y coordinate </li> <li><code>s2x1</code> First point of second segment x coordinate </li> <li><code>s2y1</code> First point of second segment y coordinate </li> <li><code>s2x2</code> Second point of second segment x coordinate </li> <li><code>s2y2</code> Second point of second segment y coordinate </li> </ul> <p>Returns:</p> <p>(x,y) pair indicating intersection point if it exists, std::nullopt otherwise </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led.html#function-serialize","title":"function Serialize","text":"<p>Convert a panel to a 1D vector of pixels in addressing order. This is a helper function because many panel animations are easier to design in 2D space then convert back to address order when it comes time to display. <pre><code>Strip argos_lib::led::Serialize (\n    const Panel &amp; panel,\n    const PanelScanParams &amp; params\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>panel</code> Panel to serialize </li> <li><code>params</code> Parameters describing panel addressing and orientation </li> </ul> <p>Returns:</p> <p>A strip representation of panel with all pixels in address order</p> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/animiation.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html","title":"Struct argos_lib::led::Animation","text":"<p>ClassList &gt; argos_lib &gt; led &gt; Animation</p> <p>A representation of a custom LED animation. </p> <ul> <li><code>#include &lt;animiation.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#public-attributes","title":"Public Attributes","text":"Type Name unsigned numLEDs Number of LEDs in the animation. unsigned offset Address of first LED. std::function&lt; Strip()&gt; update This function can be any callable that returns a sequence of LED colors."},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#public-functions","title":"Public Functions","text":"Type Name Animation () = deleteDelete default constructor because it is meaningless. Animation (std::function&lt; Strip()&gt; update, unsigned numLEDs, unsigned offset) Construct a new Animation object."},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#variable-numleds","title":"variable numLEDs","text":"<p>Number of LEDs in the animation. <pre><code>unsigned argos_lib::led::Animation::numLEDs;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#variable-offset","title":"variable offset","text":"<p>Address of first LED. <pre><code>unsigned argos_lib::led::Animation::offset;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#variable-update","title":"variable update","text":"<p>This function can be any callable that returns a sequence of LED colors. <pre><code>std::function&lt;Strip()&gt; argos_lib::led::Animation::update;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#function-animation-12","title":"function Animation [1/2]","text":"<p>Delete default constructor because it is meaningless. <pre><code>argos_lib::led::Animation::Animation () = delete\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_animation.html#function-animation-22","title":"function Animation [2/2]","text":"<p>Construct a new Animation object. <pre><code>inline argos_lib::led::Animation::Animation (\n    std::function&lt; Strip()&gt; update,\n    unsigned numLEDs,\n    unsigned offset\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>update</code> Function to call that generates the new LED states for this animation </li> <li><code>numLEDs</code> Number of LEDs in the animation </li> <li><code>offset</code> Address of first LED controlled by this animation </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/animiation.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html","title":"Class argos_lib::led::Array2D","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; argos_lib &gt; led &gt; Array2D</p> <p>Array2D representation where origin is at bottom left.</p> <ul> <li><code>#include &lt;panel.h&gt;</code></li> </ul>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#public-functions","title":"Public Functions","text":"Type Name Array2D () = deleteDisable default constructor because we need dimensions. Array2D (unsigned width, unsigned height, T fillValue={}) Construct a new Array2D object. unsigned Height () noexcept constCells in vertical dimension. unsigned Width () noexcept constCells in horizontal dimension. T &amp; at (unsigned x, unsigned y) Get mutable reference to cell at a given coordinate. const T &amp; at (unsigned x, unsigned y) constConst reference to cell at a given coordinate. Useful to read a value and allowing the compiler to protect against modifications."},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#function-array2d-12","title":"function Array2D [1/2]","text":"<p>Disable default constructor because we need dimensions. <pre><code>argos_lib::led::Array2D::Array2D () = delete\n</code></pre></p>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#function-array2d-22","title":"function Array2D [2/2]","text":"<p>Construct a new Array2D object. <pre><code>inline argos_lib::led::Array2D::Array2D (\n    unsigned width,\n    unsigned height,\n    T fillValue={}\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>width</code> Number of cells in horizontal axis </li> <li><code>height</code> Number of cells in vertical axis </li> <li><code>fillValue</code> Initial value for all cells </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#function-height","title":"function Height","text":"<p>Cells in vertical dimension. <pre><code>inline unsigned argos_lib::led::Array2D::Height () noexcept const\n</code></pre></p> <p>Returns:</p> <p>Array height in cells </p>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#function-width","title":"function Width","text":"<p>Cells in horizontal dimension. <pre><code>inline unsigned argos_lib::led::Array2D::Width () noexcept const\n</code></pre></p> <p>Returns:</p> <p>Array width in cells </p>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#function-at-12","title":"function at [1/2]","text":"<p>Get mutable reference to cell at a given coordinate. <pre><code>inline T &amp; argos_lib::led::Array2D::at (\n    unsigned x,\n    unsigned y\n) \n</code></pre></p> <p>Note:</p> <p>This can throw an out_of_range exception if a cell is requested outside the bounds of the array dimensions.</p> <p>Parameters:</p> <ul> <li><code>x</code> Coordinate in x dimesion. 0 is leftmost cell. </li> <li><code>y</code> Coordinate in y dimension. 0 is bottommost cell. </li> </ul> <p>Returns:</p> <p>Cell at specified coordinate </p>"},{"location":"argos-lib/classargos__lib_1_1led_1_1_array2_d.html#function-at-22","title":"function at [2/2]","text":"<p>Const reference to cell at a given coordinate. Useful to read a value and allowing the compiler to protect against modifications. <pre><code>inline const T &amp; argos_lib::led::Array2D::at (\n    unsigned x,\n    unsigned y\n) const\n</code></pre></p> <p>Note:</p> <p>This can throw an out_of_range exception if a cell is requested outside the bounds of the array dimensions.</p> <p>Parameters:</p> <ul> <li><code>x</code> Coordinate in x dimesion. 0 is leftmost cell. </li> <li><code>y</code> Coordinate in y dimension. 0 is bottommost cell. </li> </ul> <p>Returns:</p> <p>Cell at specified coordinate </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/panel.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_panel_scan_params.html","title":"Struct argos_lib::led::PanelScanParams","text":"<p>ClassList &gt; argos_lib &gt; led &gt; PanelScanParams</p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_panel_scan_params.html#public-attributes","title":"Public Attributes","text":"Type Name FirstPixelPosition firstPixel Location of lowest address pixel. PrimaryScanDirection scanDirection Sequential address direction."},{"location":"argos-lib/structargos__lib_1_1led_1_1_panel_scan_params.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1led_1_1_panel_scan_params.html#variable-firstpixel","title":"variable firstPixel","text":"<p>Location of lowest address pixel. <pre><code>FirstPixelPosition argos_lib::led::PanelScanParams::firstPixel;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_panel_scan_params.html#variable-scandirection","title":"variable scanDirection","text":"<p>Sequential address direction. <pre><code>PrimaryScanDirection argos_lib::led::PanelScanParams::scanDirection;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/panel.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_sprite.html","title":"Struct argos_lib::led::Sprite","text":"<p>ClassList &gt; argos_lib &gt; led &gt; Sprite</p> <p>https://en.wikipedia.org/wiki/Sprite_(computer_graphics) __</p> <ul> <li><code>#include &lt;animiation.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_sprite.html#public-attributes","title":"Public Attributes","text":"Type Name Mask alpha Per-pixel transparency. Panel colors Colors of the sprite."},{"location":"argos-lib/structargos__lib_1_1led_1_1_sprite.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1led_1_1_sprite.html#variable-alpha","title":"variable alpha","text":"<p>Per-pixel transparency. <pre><code>Mask argos_lib::led::Sprite::alpha;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1led_1_1_sprite.html#variable-colors","title":"variable colors","text":"<p>Colors of the sprite. <pre><code>Panel argos_lib::led::Sprite::colors;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/animiation.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html","title":"Namespace argos_lib::led::animation","text":"<p>Namespace List &gt; argos_lib &gt; led &gt; animation</p>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#public-functions","title":"Public Functions","text":"Type Name AnimatedSprite ChompingPacMan (float radius, frc::AddressableLED::LEDData color, units::degree_t direction, units::millisecond_t chompPeriod, bool feathered=false)  void DrawCircle (Panel &amp; dest, float radius, float x, float y, frc::AddressableLED::LEDData color, bool feathered=false) Draw a circle to the panel. Sprite DrawCircleSprite (float radius, frc::AddressableLED::LEDData color, bool feathered=false) Generate a sprite containing a circle with transparent background. Sprite DrawPacMan (float radius, frc::AddressableLED::LEDData color, units::degree_t direction, units::degree_t mouthAngle, bool feathered=false) Generate PacMan sprite :D. void DrawRectangle (Panel &amp; dest, unsigned rectWidth, unsigned rectHeight, float x, float y, frc::AddressableLED::LEDData color) Draws an axis-aligned rectangle to a panel. All pixels outside the rectangle are unmodified. AnimatedSprite DyingPacMan (float radius, frc::AddressableLED::LEDData color, units::degree_t direction, units::degree_t initialMouthAngle, units::millisecond_t animationTime, bool feathered=false)  Animation PacManPacing (unsigned offset, unsigned width, unsigned height, bool rainbow, frc::AddressableLED::LEDData pacManColor, argos_lib::led::PrimaryScanDirection paceDirection, units::millisecond_t chompPeriod, units::millisecond_t moveSpeed, argos_lib::led::PanelScanParams scanParams, bool feathered=false)  Animation Pong (unsigned offset, unsigned width, unsigned height, unsigned ballSize, bool rainbow, frc::AddressableLED::LEDData ballColor, frc::AddressableLED::LEDData backgroundColor, units::millisecond_t frameTime, argos_lib::led::PanelScanParams scanParams) Animation that kind of works like a DVD player screensaver (https://youtu.be/QOtuX0jL85Y ). A ball bounces around the panel changing color. void RenderSprite (Panel &amp; dest, const Sprite &amp; sprite, float x, float y, float alpha=1.0) Draw a sprite centered at a point to a panel. This will align the sprite to the nearest pixel alignment on the panel."},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-chompingpacman","title":"function ChompingPacMan","text":"<pre><code>AnimatedSprite argos_lib::led::animation::ChompingPacMan (\n    float radius,\n    frc::AddressableLED::LEDData color,\n    units::degree_t direction,\n    units::millisecond_t chompPeriod,\n    bool feathered=false\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-drawcircle","title":"function DrawCircle","text":"<p>Draw a circle to the panel. <pre><code>void argos_lib::led::animation::DrawCircle (\n    Panel &amp; dest,\n    float radius,\n    float x,\n    float y,\n    frc::AddressableLED::LEDData color,\n    bool feathered=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dest</code> Panel to draw to </li> <li><code>float</code> radius </li> <li><code>x</code> Horizontal center </li> <li><code>y</code> Vertical center </li> <li><code>color</code> Fill color </li> <li><code>feathered</code> When true, make border pixels semi-transparent to soften edge </li> </ul>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-drawcirclesprite","title":"function DrawCircleSprite","text":"<p>Generate a sprite containing a circle with transparent background. <pre><code>Sprite argos_lib::led::animation::DrawCircleSprite (\n    float radius,\n    frc::AddressableLED::LEDData color,\n    bool feathered=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>radius</code> Radius in pixels </li> <li><code>color</code> Fill color </li> <li><code>feathered</code> When true, make border pixels semi-transparent to soften edge </li> </ul> <p>Returns:</p> <p>Sprite within square canvas with edge size ceil(2*radius) </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-drawpacman","title":"function DrawPacMan","text":"<p>Generate PacMan sprite :D. <pre><code>Sprite argos_lib::led::animation::DrawPacMan (\n    float radius,\n    frc::AddressableLED::LEDData color,\n    units::degree_t direction,\n    units::degree_t mouthAngle,\n    bool feathered=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>radius</code> Radius of our fearless hero </li> <li><code>color</code> Why does he have to be yellow? </li> <li><code>direction</code> Mouth direction </li> <li><code>mouthAngle</code> Jaw separation angle from mandible to palate </li> <li><code>feathered</code> When true, make border pixels semi-transparent to soften edge </li> </ul> <p>Returns:</p> <p>PacMan </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-drawrectangle","title":"function DrawRectangle","text":"<p>Draws an axis-aligned rectangle to a panel. All pixels outside the rectangle are unmodified. <pre><code>void argos_lib::led::animation::DrawRectangle (\n    Panel &amp; dest,\n    unsigned rectWidth,\n    unsigned rectHeight,\n    float x,\n    float y,\n    frc::AddressableLED::LEDData color\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dest</code> Panel to draw to </li> <li><code>rectWidth</code> Width of rectangle in pixels </li> <li><code>rectHeight</code> Height of rectangle in pixels </li> <li><code>x</code> Rectangle center x coordinate </li> <li><code>y</code> Rectangle center y coordinate </li> <li><code>color</code> Color of drawn rectangle </li> </ul>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-dyingpacman","title":"function DyingPacMan","text":"<pre><code>AnimatedSprite argos_lib::led::animation::DyingPacMan (\n    float radius,\n    frc::AddressableLED::LEDData color,\n    units::degree_t direction,\n    units::degree_t initialMouthAngle,\n    units::millisecond_t animationTime,\n    bool feathered=false\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-pacmanpacing","title":"function PacManPacing","text":"<pre><code>Animation argos_lib::led::animation::PacManPacing (\n    unsigned offset,\n    unsigned width,\n    unsigned height,\n    bool rainbow,\n    frc::AddressableLED::LEDData pacManColor,\n    argos_lib::led::PrimaryScanDirection paceDirection,\n    units::millisecond_t chompPeriod,\n    units::millisecond_t moveSpeed,\n    argos_lib::led::PanelScanParams scanParams,\n    bool feathered=false\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-pong","title":"function Pong","text":"<p>Animation that kind of works like a DVD player screensaver (https://youtu.be/QOtuX0jL85Y ). A ball bounces around the panel changing color. <pre><code>Animation argos_lib::led::animation::Pong (\n    unsigned offset,\n    unsigned width,\n    unsigned height,\n    unsigned ballSize,\n    bool rainbow,\n    frc::AddressableLED::LEDData ballColor,\n    frc::AddressableLED::LEDData backgroundColor,\n    units::millisecond_t frameTime,\n    argos_lib::led::PanelScanParams scanParams\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>offset</code> Address of first LED in controlled panel </li> <li><code>width</code> Width of panel in pixels </li> <li><code>height</code> Height of panel in pixels </li> <li><code>ballSize</code> Width and height of ball in pixels (it's a square... a circle would basically be the same at this size and I'm lazy) </li> <li><code>rainbow</code> When true, ball changes to a random hue on every bounce! </li> <li><code>ballColor</code> Initial color of the bouncing ball </li> <li><code>backgroundColor</code> Background color behind the ball </li> <li><code>frameTime</code> Time for ball to travel one pixel distance </li> <li><code>scanParams</code> Parameters controlling the serialization of the internal panel to pixel addresses </li> </ul> <p>Returns:</p> <p>Animation to use to control a panel with this animation pattern</p> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/namespaceargos__lib_1_1led_1_1animation.html#function-rendersprite","title":"function RenderSprite","text":"<p>Draw a sprite centered at a point to a panel. This will align the sprite to the nearest pixel alignment on the panel. <pre><code>void argos_lib::led::animation::RenderSprite (\n    Panel &amp; dest,\n    const Sprite &amp; sprite,\n    float x,\n    float y,\n    float alpha=1.0\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dest</code> Panel to draw to </li> <li><code>sprite</code> Sprite to draw </li> <li><code>x</code> Horizontal center </li> <li><code>y</code> Vertical center </li> <li><code>alpha</code> Global sprite transparency where 0 is fully transparent and 1 is fully opaque </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/animiation.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1odometry__aim.html","title":"Namespace argos_lib::odometry_aim","text":"<p>Namespace List &gt; argos_lib &gt; odometry_aim</p>"},{"location":"argos-lib/namespaceargos__lib_1_1odometry__aim.html#public-functions","title":"Public Functions","text":"Type Name units::degree_t GetAngleToTarget (const frc::Translation2d &amp; currentEstimatedRobotPose, const frc::Translation3d &amp; targetPoseOnField) Gets the Angle(Yaw) required for the Robot to orient towards the target of interest assuming the robot is field-centric. units::meter_t GetDistanceToTarget (const frc::Translation2d &amp; currentEstimatedRobotPose, const frc::Translation3d &amp; targetPoseOnField) Gets the Distance of the Robot to from the target of interest."},{"location":"argos-lib/namespaceargos__lib_1_1odometry__aim.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1odometry__aim.html#function-getangletotarget","title":"function GetAngleToTarget","text":"<p>Gets the Angle(Yaw) required for the Robot to orient towards the target of interest assuming the robot is field-centric. <pre><code>units::degree_t argos_lib::odometry_aim::GetAngleToTarget (\n    const frc::Translation2d &amp; currentEstimatedRobotPose,\n    const frc::Translation3d &amp; targetPoseOnField\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>currentEstimatedRobotPose</code> Fused pose of the robot currently on the field </li> <li><code>targetPoseOnField</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Angle(Yaw) of robot in degrees</p> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/namespaceargos__lib_1_1odometry__aim.html#function-getdistancetotarget","title":"function GetDistanceToTarget","text":"<p>Gets the Distance of the Robot to from the target of interest. <pre><code>units::meter_t argos_lib::odometry_aim::GetDistanceToTarget (\n    const frc::Translation2d &amp; currentEstimatedRobotPose,\n    const frc::Translation3d &amp; targetPoseOnField\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>currentEstimatedRobotPose</code> Fused pose of the robot currently on the field </li> <li><code>targetPoseOnField</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Distance in inches of robot from the target of interest </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/odometry_aim.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html","title":"Namespace argos_lib::status_frame_config","text":"<p>Namespace List &gt; argos_lib &gt; status_frame_config</p>"},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#public-types","title":"Public Types","text":"Type Name typedef ctre::phoenix6::hardware::core::CoreTalonFX BaseTalon enum MotorPresetMode Motor mode used for setting status frame update periods."},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#public-functions","title":"Public Functions","text":"Type Name void SetMotorStatusFrameRates (BaseTalon &amp; motor, MotorPresetMode motorMode) Set motor controller status frame update periods based on the motor preset."},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#typedef-basetalon","title":"typedef BaseTalon","text":"<pre><code>using argos_lib::status_frame_config::BaseTalon =  ctre::phoenix6::hardware::core::CoreTalonFX;\n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#enum-motorpresetmode","title":"enum MotorPresetMode","text":"<p>Motor mode used for setting status frame update periods. <pre><code>enum argos_lib::status_frame_config::MotorPresetMode {\n    Basic,\n    BasicFX,\n    Leader,\n    LeaderFX,\n    Follower,\n    FollowerFX,\n    MotionProfiling,\n    MotionProfilingFX,\n    Tuning,\n    TuningFX\n};\n</code></pre></p>"},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1status__frame__config.html#function-setmotorstatusframerates","title":"function SetMotorStatusFrameRates","text":"<p>Set motor controller status frame update periods based on the motor preset. <pre><code>void argos_lib::status_frame_config::SetMotorStatusFrameRates (\n    BaseTalon &amp; motor,\n    MotorPresetMode motorMode\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>motor</code> Motor controller to configure </li> <li><code>motorMode</code> Preset mode to use </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/status_frame_config.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1swerve.html","title":"Namespace argos_lib::swerve","text":"<p>Namespace List &gt; argos_lib &gt; swerve</p>"},{"location":"argos-lib/namespaceargos__lib_1_1swerve.html#classes","title":"Classes","text":"Type Name class NetworkTablesHomingStorage Saves and loads swerve module homes to networkTables. struct SwerveModulePositions Representation of the absolute encoder position of each module at home position. struct TranslationSpeeds Translation speeds as percent max output."},{"location":"argos-lib/namespaceargos__lib_1_1swerve.html#public-functions","title":"Public Functions","text":"Type Name TranslationSpeeds CircularInterpolate (const TranslationSpeeds rawSpeeds, const T interpMap) Use argos_lib::InterpolationMap to apply mapping according to joystick vector magnitude. frc::SwerveModuleState Optimize (frc::SwerveModuleState desiredState, units::degree_t currentModuleAngle, units::degrees_per_second_t currentModuleAngularRate, units::feet_per_second_t currentModuleDriveVel, units::feet_per_second_t maxVelocity) Optimize swerve module to minimize rotations and drive direction changes."},{"location":"argos-lib/namespaceargos__lib_1_1swerve.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1swerve.html#function-circularinterpolate","title":"function CircularInterpolate","text":"<p>Use argos_lib::InterpolationMap to apply mapping according to joystick vector magnitude. <pre><code>template&lt;class T&gt;\nTranslationSpeeds argos_lib::swerve::CircularInterpolate (\n    const TranslationSpeeds rawSpeeds,\n    const T interpMap\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>T</code> Type of interpolated input </li> </ul> <p>Parameters:</p> <ul> <li><code>rawSpeeds</code> Joystick inputs as percentages </li> <li><code>interpMap</code> Interpolation map to apply to magnitudes </li> </ul> <p>Returns:</p> <p>Remapped joystick percentages. Angle of vector will match rawSpeeds, but magnitude will scale according to interpMap. This results in circular deadband and other mapping results. </p>"},{"location":"argos-lib/namespaceargos__lib_1_1swerve.html#function-optimize","title":"function Optimize","text":"<p>Optimize swerve module to minimize rotations and drive direction changes. <pre><code>frc::SwerveModuleState argos_lib::swerve::Optimize (\n    frc::SwerveModuleState desiredState,\n    units::degree_t currentModuleAngle,\n    units::degrees_per_second_t currentModuleAngularRate,\n    units::feet_per_second_t currentModuleDriveVel,\n    units::feet_per_second_t maxVelocity\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredState</code> Requested state. Output must result in same motion </li> <li><code>currentModuleAngle</code> Module rotation angle in relative or absolute position </li> <li><code>currentModuleAngularRate</code> Current module rotation speed. To prevent rapid changes in rotation direction. </li> <li><code>currentModuleDriveVel</code> Current module drive velocity. To prevent rapid changes in drive motor velocity. </li> <li><code>maxVelocity</code> Max velocity for determining max transition change thresholds </li> </ul> <p>Returns:</p> <p>Optimized swerve module state that results in same motion as desiredState </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/swerve_utils.h</code></p>"},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html","title":"Class argos_lib::swerve::NetworkTablesHomingStorage","text":"<p>ClassList &gt; argos_lib &gt; swerve &gt; NetworkTablesHomingStorage</p> <p>Saves and loads swerve module homes to networkTables. </p> <ul> <li><code>#include &lt;network_tables_homing_storage.h&gt;</code></li> </ul> <p>Inherits the following classes: argos_lib::SwerveHomeStorageInterface</p>"},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html#public-functions","title":"Public Functions","text":"Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () overrideLoad home positions from network tables. NetworkTablesHomingStorage (const std::string &amp; tableName, const std::string &amp; frontLeftPath, const std::string &amp; frontRightPath, const std::string &amp; rearRightPath, const std::string &amp; rearLeftPath) Construct a new Network Tables Homing Storage object. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) overrideSave home positions to network tables."},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html#public-functions-inherited-from-argos_libswervehomestorageinterface","title":"Public Functions inherited from argos_lib::SwerveHomeStorageInterface","text":"<p>See argos_lib::SwerveHomeStorageInterface</p> Type Name virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; Load () = 0Load home position from persistent storage. virtual bool Save (const argos_lib::swerve::SwerveModulePositions &amp; homePosition) = 0Save home position to persistent storage."},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html#function-load","title":"function Load","text":"<p>Load home positions from network tables. <pre><code>virtual std::optional&lt; argos_lib::swerve::SwerveModulePositions &gt; argos_lib::swerve::NetworkTablesHomingStorage::Load () override\n</code></pre></p> <p>Returns:</p> <p>Loaded positions or nullopt if failed </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Load</p>"},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html#function-networktableshomingstorage","title":"function NetworkTablesHomingStorage","text":"<p>Construct a new Network Tables Homing Storage object. <pre><code>argos_lib::swerve::NetworkTablesHomingStorage::NetworkTablesHomingStorage (\n    const std::string &amp; tableName,\n    const std::string &amp; frontLeftPath,\n    const std::string &amp; frontRightPath,\n    const std::string &amp; rearRightPath,\n    const std::string &amp; rearLeftPath\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tableName</code> Network table name </li> <li><code>frontLeftPath</code> Key name for front left module </li> <li><code>frontRightPath</code> Key name for front right module </li> <li><code>rearRightPath</code> Key name for rear right module </li> <li><code>rearLeftPath</code> Key name for rear left module </li> </ul>"},{"location":"argos-lib/classargos__lib_1_1swerve_1_1_network_tables_homing_storage.html#function-save","title":"function Save","text":"<p>Save home positions to network tables. <pre><code>virtual bool argos_lib::swerve::NetworkTablesHomingStorage::Save (\n    const argos_lib::swerve::SwerveModulePositions &amp; homePosition\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>homePosition</code> Positions to store </li> </ul> <p>Returns:</p> <p>true if successful </p> <p>Implements argos_lib::SwerveHomeStorageInterface::Save</p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/network_tables_homing_storage.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html","title":"Struct argos_lib::swerve::SwerveModulePositions","text":"<p>ClassList &gt; argos_lib &gt; swerve &gt; SwerveModulePositions</p> <p>Representation of the absolute encoder position of each module at home position. </p> <ul> <li><code>#include &lt;swerve_utils.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html#public-attributes","title":"Public Attributes","text":"Type Name units::degree_t FrontLeft units::degree_t FrontRight units::degree_t RearLeft units::degree_t RearRight"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html#variable-frontleft","title":"variable FrontLeft","text":"<pre><code>units::degree_t argos_lib::swerve::SwerveModulePositions::FrontLeft;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html#variable-frontright","title":"variable FrontRight","text":"<pre><code>units::degree_t argos_lib::swerve::SwerveModulePositions::FrontRight;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html#variable-rearleft","title":"variable RearLeft","text":"<pre><code>units::degree_t argos_lib::swerve::SwerveModulePositions::RearLeft;\n</code></pre>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_swerve_module_positions.html#variable-rearright","title":"variable RearRight","text":"<pre><code>units::degree_t argos_lib::swerve::SwerveModulePositions::RearRight;\n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/swerve_utils.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_translation_speeds.html","title":"Struct argos_lib::swerve::TranslationSpeeds","text":"<p>ClassList &gt; argos_lib &gt; swerve &gt; TranslationSpeeds</p> <p>Translation speeds as percent max output. </p> <ul> <li><code>#include &lt;swerve_utils.h&gt;</code></li> </ul>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_translation_speeds.html#public-attributes","title":"Public Attributes","text":"Type Name double forwardSpeedPct Speed with positive forward in range [-1, 1]. double leftSpeedPct Speed with positive left in range [-1, 1]."},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_translation_speeds.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_translation_speeds.html#variable-forwardspeedpct","title":"variable forwardSpeedPct","text":"<p>Speed with positive forward in range [-1, 1]. <pre><code>double argos_lib::swerve::TranslationSpeeds::forwardSpeedPct;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1swerve_1_1_translation_speeds.html#variable-leftspeedpct","title":"variable leftSpeedPct","text":"<p>Speed with positive left in range [-1, 1]. <pre><code>double argos_lib::swerve::TranslationSpeeds::leftSpeedPct;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/swerve_utils.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1talonsrx__config.html","title":"Namespace argos_lib::talonsrx_config","text":"<p>Namespace List &gt; argos_lib &gt; talonsrx_config</p>"},{"location":"argos-lib/namespaceargos__lib_1_1talonsrx__config.html#public-functions","title":"Public Functions","text":"Type Name bool TalonSRXConfig (ctre::motorcontrol::can::TalonSRX &amp; motorController, units::millisecond_t configTimeout) Configures a CTRE TalonSRX with only the fields provided. All other fields are given the factory default values. bool TalonSRXConfig (ctre::motorcontrol::can::TalonSRX &amp; motorController, units::millisecond_t configTimeout, argos_lib::RobotInstance instance) Configures a CTRE TalonSRX with configuration values according to specified robot instance."},{"location":"argos-lib/namespaceargos__lib_1_1talonsrx__config.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1talonsrx__config.html#function-talonsrxconfig","title":"function TalonSRXConfig","text":"<p>Configures a CTRE TalonSRX with only the fields provided. All other fields are given the factory default values. <pre><code>template&lt;typename T&gt;\nbool argos_lib::talonsrx_config::TalonSRXConfig (\n    ctre::phoenix::motorcontrol::can::TalonSRX &amp; motorController,\n    units::millisecond_t configTimeout\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>T</code> Structure containing any combination of the following members:</li> <li>inverted</li> <li>neutralMode</li> <li>pid0_allowableError</li> <li>pid0_iZone</li> <li>pid0_kD,</li> <li>pid0_kF</li> <li>pid0_kI</li> <li>pid0_kP</li> <li>pid0_selectedSensor</li> <li>remoteFilter0_addr,</li> <li>remoteFilter0_type</li> <li>sensorPhase</li> <li>voltCompSat</li> <li>statusFrameMotorMode</li> <li>peakCurrentLimit</li> <li>peakCurrentDuration</li> <li>continuousCurrentLimit</li> <li>peakOutputForward</li> <li>peakOutputReverse</li> <li>forwardLimitSwitchSource</li> <li>reverseLimitSwitchSource</li> <li>forwardLimitSwitchNormal</li> <li>reverseLimitSwitchNormal </li> </ul> <p>Parameters:</p> <ul> <li><code>motorController</code> TalonSRX object to configure </li> <li><code>configTimeout</code> Time to wait for response from TalonSRX </li> </ul> <p>Returns:</p> <p>true Configuration succeeded </p> <p>Returns:</p> <p>false Configuration failed </p>"},{"location":"argos-lib/namespaceargos__lib_1_1talonsrx__config.html#function-talonsrxconfig_1","title":"function TalonSRXConfig","text":"<p>Configures a CTRE TalonSRX with configuration values according to specified robot instance. <pre><code>template&lt;typename CompetitionConfig, typename PracticeConfig&gt;\nbool argos_lib::talonsrx_config::TalonSRXConfig (\n    ctre::phoenix::motorcontrol::can::TalonSRX &amp; motorController,\n    units::millisecond_t configTimeout,\n    argos_lib::RobotInstance instance\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>CompetitionConfig</code> Configurations to use in competition robot instance </li> <li><code>PracticeConfig</code> Configurations to use in practice robot instance </li> </ul> <p>Parameters:</p> <ul> <li><code>motorController</code> TalonSRX object to configure </li> <li><code>configTimeout</code> Time to wait for response from TalonSRX </li> <li><code>instance</code> Robot instance to use </li> </ul> <p>Returns:</p> <p>true Configuration succeeded </p> <p>Returns:</p> <p>false Configuration failed </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/talonsrx_config.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1testing.html","title":"Namespace argos_lib::testing","text":"<p>Namespace List &gt; argos_lib &gt; testing</p>"},{"location":"argos-lib/namespaceargos__lib_1_1testing.html#public-functions","title":"Public Functions","text":"Type Name ::testing::AssertionResult UnitEqual (UnitTypeLhs actual, UnitTypeRhs expected, UnitTypeTol tolerance)  ::testing::AssertionResult UnitEqual (UnitTypeLhs actual, UnitTypeRhs expected)"},{"location":"argos-lib/namespaceargos__lib_1_1testing.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1testing.html#function-unitequal","title":"function UnitEqual","text":"<pre><code>template&lt;class UnitTypeLhs, class UnitTypeRhs, class UnitTypeTol&gt;\n::testing::AssertionResult argos_lib::testing::UnitEqual (\n    UnitTypeLhs actual,\n    UnitTypeRhs expected,\n    UnitTypeTol tolerance\n) \n</code></pre>"},{"location":"argos-lib/namespaceargos__lib_1_1testing.html#function-unitequal_1","title":"function UnitEqual","text":"<pre><code>template&lt;class UnitTypeLhs, class UnitTypeRhs&gt;\n::testing::AssertionResult argos_lib::testing::UnitEqual (\n    UnitTypeLhs actual,\n    UnitTypeRhs expected\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/testing/assertions.h</code></p>"},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html","title":"Namespace argos_lib::triggers","text":"<p>Namespace List &gt; argos_lib &gt; triggers</p>"},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html#public-functions","title":"Public Functions","text":"Type Name frc2::Trigger AllOf (std::vector&lt; frc2::Trigger &gt; triggers) Generates composite trigger that is true when all of the triggers are true. frc2::Trigger AnyOf (std::vector&lt; frc2::Trigger &gt; triggers) Generates composite trigger that is true when any of the triggers is true. frc2::Trigger NoneOf (std::vector&lt; frc2::Trigger &gt; triggers) Generates composite trigger that is true when none of the triggers is true. frc2::Trigger OneOf (std::vector&lt; frc2::Trigger &gt; triggers) Generates composite trigger that is true when exactly one of the triggers is true."},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html#function-allof","title":"function AllOf","text":"<p>Generates composite trigger that is true when all of the triggers are true. <pre><code>frc2::Trigger argos_lib::triggers::AllOf (\n    std::vector&lt; frc2::Trigger &gt; triggers\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>triggers</code> Triggers to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Composite trigger </p>"},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html#function-anyof","title":"function AnyOf","text":"<p>Generates composite trigger that is true when any of the triggers is true. <pre><code>frc2::Trigger argos_lib::triggers::AnyOf (\n    std::vector&lt; frc2::Trigger &gt; triggers\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>triggers</code> Triggers to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Composite trigger </p>"},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html#function-noneof","title":"function NoneOf","text":"<p>Generates composite trigger that is true when none of the triggers is true. <pre><code>frc2::Trigger argos_lib::triggers::NoneOf (\n    std::vector&lt; frc2::Trigger &gt; triggers\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>triggers</code> Triggers to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Composite trigger </p>"},{"location":"argos-lib/namespaceargos__lib_1_1triggers.html#function-oneof","title":"function OneOf","text":"<p>Generates composite trigger that is true when exactly one of the triggers is true. <pre><code>frc2::Trigger argos_lib::triggers::OneOf (\n    std::vector&lt; frc2::Trigger &gt; triggers\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>triggers</code> Triggers to check </li> </ul> <p>Returns:</p> <p>frc2::Trigger Composite trigger </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/trigger_composition.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html","title":"Struct argos_lib::LEDSubsystem::LEDUpdateGroup","text":"<p>ClassList &gt; LEDUpdateGroup</p> <p>Represents a contiguous block of LEDs that have the same color. </p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#public-attributes","title":"Public Attributes","text":"Type Name frc::AddressableLED::LEDData color Color of LEDs. unsigned numLEDs Number of LEDs in group. unsigned startIndex Address of first LED."},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#public-functions","title":"Public Functions","text":"Type Name LEDUpdateGroup (unsigned startIndex, unsigned numLEDs, frc::AddressableLED::LEDData color) Construct a new LEDUpdateGroup with specified color."},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#variable-color","title":"variable color","text":"<p>Color of LEDs. <pre><code>frc::AddressableLED::LEDData argos_lib::LEDSubsystem::LEDUpdateGroup::color;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#variable-numleds","title":"variable numLEDs","text":"<p>Number of LEDs in group. <pre><code>unsigned argos_lib::LEDSubsystem::LEDUpdateGroup::numLEDs;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#variable-startindex","title":"variable startIndex","text":"<p>Address of first LED. <pre><code>unsigned argos_lib::LEDSubsystem::LEDUpdateGroup::startIndex;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_l_e_d_subsystem_1_1_l_e_d_update_group.html#function-ledupdategroup","title":"function LEDUpdateGroup","text":"<p>Construct a new LEDUpdateGroup with specified color. <pre><code>inline LEDUpdateGroup::LEDUpdateGroup (\n    unsigned startIndex,\n    unsigned numLEDs,\n    frc::AddressableLED::LEDData color\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>startIndex</code> Address of first LED in group </li> <li><code>numLEDs</code> Number of LEDs in group </li> <li><code>color</code> Color of LEDs in group </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/led_subsystem.h</code></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html","title":"Struct argos_lib::XboxController::DPadButtons","text":"<p>ClassList &gt; DPadButtons</p> <p>Parsed directional pad button states. </p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html#public-attributes","title":"Public Attributes","text":"Type Name bool down   = <code>false</code>Down active (including adjacent diagonals) bool left   = <code>false</code>Left active (including adjacent diagonals) bool right   = <code>false</code>Right active (including adjacent diagonals) bool up   = <code>false</code>Up active (including adjacent diagonals)"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html#variable-down","title":"variable down","text":"<p>Down active (including adjacent diagonals) <pre><code>bool argos_lib::XboxController::DPadButtons::down;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html#variable-left","title":"variable left","text":"<p>Left active (including adjacent diagonals) <pre><code>bool argos_lib::XboxController::DPadButtons::left;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html#variable-right","title":"variable right","text":"<p>Right active (including adjacent diagonals) <pre><code>bool argos_lib::XboxController::DPadButtons::right;\n</code></pre></p>"},{"location":"argos-lib/structargos__lib_1_1_xbox_controller_1_1_d_pad_buttons.html#variable-up","title":"variable up","text":"<p>Up active (including adjacent diagonals) <pre><code>bool argos_lib::XboxController::DPadButtons::up;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/xbox_controller.h</code></p>"},{"location":"argos-lib/namespacefrc.html","title":"Namespace frc","text":"<p>Namespace List &gt; frc</p> <p>The documentation for this class was generated from the following file <code>[generated]</code></p>"},{"location":"argos-lib/namespacefrc2.html","title":"Namespace frc2","text":"<p>Namespace List &gt; frc2</p> <p>The documentation for this class was generated from the following file <code>[generated]</code></p>"},{"location":"argos-lib/namespacestd_1_1literals_1_1chrono__literals.html","title":"Namespace std::literals::chrono_literals","text":"<p>Namespace List &gt; chrono_literals</p> <p>More...</p>"},{"location":"argos-lib/namespacestd_1_1literals_1_1chrono__literals.html#detailed-description","title":"Detailed Description","text":"<p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/nt_motor_pid_tuner.cpp</code></p>"},{"location":"argos-lib/dir_68267d1309a1af8e8297ef4c3efbcdba.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src","text":"<p>FileList &gt; src</p>"},{"location":"argos-lib/dir_68267d1309a1af8e8297ef4c3efbcdba.html#directories","title":"Directories","text":"Type Name dir argos_lib <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/</code></p>"},{"location":"argos-lib/dir_f9cbf5730473812e84551a5945ef39f8.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib","text":"<p>FileList &gt; argos_lib</p>"},{"location":"argos-lib/dir_f9cbf5730473812e84551a5945ef39f8.html#directories","title":"Directories","text":"Type Name dir cpp dir include dir test <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/</code></p>"},{"location":"argos-lib/dir_cf4b00708d9639a2579b4441eb30ca52.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp","text":"<p>FileList &gt; argos_lib &gt; cpp</p>"},{"location":"argos-lib/dir_cf4b00708d9639a2579b4441eb30ca52.html#directories","title":"Directories","text":"Type Name dir commands dir config dir controller dir general dir homing dir led dir subsystems <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/</code></p>"},{"location":"argos-lib/dir_c0b6341bb1e7e644bbb52b58767c2e0d.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/commands","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; commands</p>"},{"location":"argos-lib/dir_c0b6341bb1e7e644bbb52b58767c2e0d.html#files","title":"Files","text":"Type Name file swap_controllers_command.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/commands/</code></p>"},{"location":"argos-lib/swap__controllers__command_8cpp.html","title":"File swap_controllers_command.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; commands &gt; swap_controllers_command.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/commands/swap_controllers_command.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/commands/swap_controllers_command.cpp</code></p>"},{"location":"argos-lib/swap__controllers__command_8cpp_source.html","title":"File swap_controllers_command.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; commands &gt; swap_controllers_command.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/commands/swap_controllers_command.h\"\n\nusing namespace argos_lib;\n\nSwapControllersCommand::SwapControllersCommand(SwappableControllersSubsystem* controllers)\n    : m_pControllerSubsystem(controllers) {}\n\nvoid SwapControllersCommand::Initialize() {\n  m_pControllerSubsystem-&gt;VibrateAll(argos_lib::VibrationConstant(1));\n}\n\nvoid SwapControllersCommand::End(bool) {\n  m_pControllerSubsystem-&gt;Swap();\n  m_pControllerSubsystem-&gt;VibrateAll(argos_lib::VibrationOff());\n}\n</code></pre>"},{"location":"argos-lib/dir_525e741a02ecda31c2fb045f53a43d0c.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/config","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; config</p>"},{"location":"argos-lib/dir_525e741a02ecda31c2fb045f53a43d0c.html#files","title":"Files","text":"Type Name file robot_instance.cpp file status_frame_config.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/config/</code></p>"},{"location":"argos-lib/robot__instance_8cpp.html","title":"File robot_instance.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; config &gt; robot_instance.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fstream&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include \"argos_lib/config/config_types.h\"</code></li> <li><code>#include \"wpi/fs.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/config/robot_instance.cpp</code></p>"},{"location":"argos-lib/robot__instance_8cpp_source.html","title":"File robot_instance.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; config &gt; robot_instance.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n\n#include \"argos_lib/config/config_types.h\"\n#include \"wpi/fs.h\"\n\nargos_lib::RobotInstance argos_lib::GetRobotInstance() {\n  static const fs::path instanceFilePath{\"/home/lvuser/robotInstance\"};\n  try {\n    std::ifstream instanceFile(instanceFilePath, std::ios::in);\n    std::string instanceString;\n    instanceFile &gt;&gt; instanceString;\n    instanceFile.close();\n    if (instanceString.rfind(\"Competition\", 0) != std::string::npos) {\n      return argos_lib::RobotInstance::Competition;\n    }\n    if (instanceString.rfind(\"Practice\", 0) != std::string::npos) {\n      return argos_lib::RobotInstance::Practice;\n    }\n  } catch (...) {\n    // Error accessing file\n  }\n  // If load fails, return competition\n  std::cout &lt;&lt; \"[ERROR] Could not read from instance file. Defaulting to competition instance.\\n\";\n  return argos_lib::RobotInstance::Competition;\n}\n</code></pre>"},{"location":"argos-lib/status__frame__config_8cpp.html","title":"File status_frame_config.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; config &gt; status_frame_config.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/config/status_frame_config.h\"</code></li> </ul>"},{"location":"argos-lib/status__frame__config_8cpp.html#public-types","title":"Public Types","text":"Type Name typedef ctre::phoenix6::hardware::core::CoreTalonFX BaseTalon"},{"location":"argos-lib/status__frame__config_8cpp.html#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"argos-lib/status__frame__config_8cpp.html#typedef-basetalon","title":"typedef BaseTalon","text":"<pre><code>using BaseTalon =  ctre::phoenix6::hardware::core::CoreTalonFX;\n</code></pre> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/config/status_frame_config.cpp</code></p>"},{"location":"argos-lib/status__frame__config_8cpp_source.html","title":"File status_frame_config.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; config &gt; status_frame_config.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/config/status_frame_config.h\"\n\nusing BaseTalon = ctre::phoenix6::hardware::core::CoreTalonFX;\n\nvoid argos_lib::status_frame_config::SetMotorStatusFrameRates(\n    BaseTalon&amp; motor, argos_lib::status_frame_config::MotorPresetMode motorMode) {\n  [[maybe_unused]] uint8_t generalStatusPeriod = 30;         // Status 1\n  [[maybe_unused]] uint8_t feedback0Period = 30;             // Status 2\n  [[maybe_unused]] uint8_t quadraturePeriod = 200;           // Status 3\n  [[maybe_unused]] uint8_t ainTempVBatPeriod = 200;          // Status 4\n  [[maybe_unused]] uint8_t miscPeriod = 200;                 // Status 6\n  [[maybe_unused]] uint8_t commStatusPeriod = 50;            // Status 7\n  [[maybe_unused]] uint8_t pulseWidthPeriod = 200;           // Status 8\n  [[maybe_unused]] uint8_t motionProfBufferPeriod = 255;     // Status 9\n  [[maybe_unused]] uint8_t motionProfTargetPeriod = 255;     // Status 10\n  [[maybe_unused]] uint8_t gadgeteerPeriod = 255;            // Status 11\n  [[maybe_unused]] uint8_t feedback1Period = 255;            // Status 12\n  [[maybe_unused]] uint8_t primaryPIDFPeriod = 200;          // Status 13\n  [[maybe_unused]] uint8_t auxPIDFPeriod = 200;              // Status 14\n  [[maybe_unused]] uint8_t firmwareAPIStatusPeriod = 255;    // Status 15\n  [[maybe_unused]] uint8_t auxMotionProfTargetPeriod = 255;  // Status 17\n  [[maybe_unused]] uint8_t brushlessStatusPeriod = 255;      // Status ??\n\n  switch (motorMode) {\n    case argos_lib::status_frame_config::MotorPresetMode::BasicFX:\n      brushlessStatusPeriod = 250;\n      [[fallthrough]];\n    case argos_lib::status_frame_config::MotorPresetMode::Basic:\n      generalStatusPeriod = 125;\n      feedback0Period = 125;\n      break;\n    case argos_lib::status_frame_config::MotorPresetMode::LeaderFX:\n      brushlessStatusPeriod = 200;\n      [[fallthrough]];\n    case argos_lib::status_frame_config::MotorPresetMode::Leader:\n      break;\n    case argos_lib::status_frame_config::MotorPresetMode::FollowerFX:\n      brushlessStatusPeriod = 250;\n      [[fallthrough]];\n    case argos_lib::status_frame_config::MotorPresetMode::Follower:\n      generalStatusPeriod = 200;\n      feedback0Period = 200;\n      break;\n    case argos_lib::status_frame_config::MotorPresetMode::MotionProfilingFX:\n      brushlessStatusPeriod = 200;\n      [[fallthrough]];\n    case argos_lib::status_frame_config::MotorPresetMode::MotionProfiling:\n      motionProfBufferPeriod = 40;\n      motionProfTargetPeriod = 40;\n      feedback0Period = 100;\n      break;\n    case argos_lib::status_frame_config::MotorPresetMode::TuningFX:\n      brushlessStatusPeriod = 200;\n      [[fallthrough]];\n    case argos_lib::status_frame_config::MotorPresetMode::Tuning:\n      feedback0Period = 100;\n      break;\n  }\n\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_1_General, generalStatusPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_2_Feedback0, feedback0Period);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_3_Quadrature, quadraturePeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_4_AinTempVbat, ainTempVBatPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_6_Misc, miscPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_7_CommStatus, commStatusPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_8_PulseWidth, pulseWidthPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_9_MotProfBuffer, motionProfBufferPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_10_Targets, motionProfTargetPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_11_UartGadgeteer, gadgeteerPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_12_Feedback1, feedback1Period);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_13_Base_PIDF0, primaryPIDFPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_14_Turn_PIDF1, auxPIDFPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_15_FirmwareApiStatus, firmwareAPIStatusPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_17_Targets1, auxMotionProfTargetPeriod);\n  // motor.SetStatusFramePeriod(phoenix::motorcontrol::Status_Brushless_Current, brushlessStatusPeriod);\n  // motor.OptimizeBusUtilizationForAll();\n}\n</code></pre>"},{"location":"argos-lib/dir_449ae403f63c24360f06e13a33b5f84a.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; controller</p>"},{"location":"argos-lib/dir_449ae403f63c24360f06e13a33b5f84a.html#files","title":"Files","text":"Type Name file trigger_composition.cpp file vibration.cpp file xbox_controller.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/</code></p>"},{"location":"argos-lib/trigger__composition_8cpp.html","title":"File trigger_composition.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; controller &gt; trigger_composition.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/controller/trigger_composition.h\"</code></li> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;numeric&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/trigger_composition.cpp</code></p>"},{"location":"argos-lib/trigger__composition_8cpp_source.html","title":"File trigger_composition.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; controller &gt; trigger_composition.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/controller/trigger_composition.h\"\n\n#include &lt;algorithm&gt;\n#include &lt;numeric&gt;\n\nnamespace {\n  frc2::Trigger Or(frc2::Trigger lhs, frc2::Trigger rhs) {\n    return lhs || rhs;\n  }\n  frc2::Trigger And(frc2::Trigger lhs, frc2::Trigger rhs) {\n    return lhs &amp;&amp; rhs;\n  }\n\n  template &lt;class InputIt&gt;\n  frc2::Trigger NoneOfIt(InputIt begin, InputIt end) {\n    return !std::reduce(std::next(begin), end, *begin, Or);\n  }\n\n  template &lt;class InputIt&gt;\n  frc2::Trigger AnyOfIt(InputIt begin, InputIt end) {\n    return std::reduce(std::next(begin), end, *begin, Or);\n  }\n\n  template &lt;class InputIt&gt;\n  frc2::Trigger AllOfIt(InputIt begin, InputIt end) {\n    return std::reduce(std::next(begin), end, *begin, And);\n  }\n\n}  // namespace\n\nfrc2::Trigger argos_lib::triggers::OneOf(std::vector&lt;frc2::Trigger&gt; triggers) {\n  if (triggers.size() == 1) {\n    return triggers.front();\n  }\n  std::vector&lt;frc2::Trigger&gt; allExclusiveChecks;\n  allExclusiveChecks.reserve(triggers.size());\n\n  for (size_t exclusiveTrueIdx = 0; exclusiveTrueIdx &lt; triggers.size(); ++exclusiveTrueIdx) {\n    allExclusiveChecks.emplace_back(triggers.at(exclusiveTrueIdx));\n    for (size_t otherIdx = 0; otherIdx &lt; triggers.size(); ++otherIdx) {\n      if (exclusiveTrueIdx != otherIdx) {\n        auto tempTrigger = allExclusiveChecks.back() &amp;&amp; !triggers.at(otherIdx);\n        std::swap(allExclusiveChecks.back(), tempTrigger);\n      }\n    }\n  }\n\n  return std::reduce(std::next(allExclusiveChecks.begin()), allExclusiveChecks.end(), *allExclusiveChecks.begin(), Or);\n}\n\nfrc2::Trigger argos_lib::triggers::NoneOf(std::vector&lt;frc2::Trigger&gt; triggers) {\n  return NoneOfIt(triggers.begin(), triggers.end());\n}\n\nfrc2::Trigger argos_lib::triggers::AnyOf(std::vector&lt;frc2::Trigger&gt; triggers) {\n  return AnyOfIt(triggers.begin(), triggers.end());\n}\n\nfrc2::Trigger argos_lib::triggers::AllOf(std::vector&lt;frc2::Trigger&gt; triggers) {\n  return AllOfIt(triggers.begin(), triggers.end());\n}\n</code></pre>"},{"location":"argos-lib/vibration_8cpp.html","title":"File vibration.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; controller &gt; vibration.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/controller/vibration.h\"</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;numbers&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/vibration.cpp</code></p>"},{"location":"argos-lib/vibration_8cpp_source.html","title":"File vibration.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; controller &gt; vibration.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/controller/vibration.h\"\n\n#include &lt;chrono&gt;\n#include &lt;numbers&gt;\n\nusing namespace argos_lib;\n\nVibrationModel argos_lib::VibrationOff() {\n  return []() { return VibrationStatus{0.0, 0.0}; };\n}\n\nVibrationModel argos_lib::VibrationConstant(double intensity) {\n  return [intensity]() { return VibrationStatus{intensity, intensity}; };\n}\n\nVibrationModel argos_lib::VibrationConstant(double intensityLeft, double intensityRight) {\n  return [intensityLeft, intensityRight]() { return VibrationStatus{intensityLeft, intensityRight}; };\n}\n\nVibrationModel argos_lib::VibrationSyncPulse(units::millisecond_t pulsePeriod,\n                                             double intensityOn,\n                                             double intensityOff) {\n  auto msPeriod = pulsePeriod.to&lt;int&gt;();\n  return [msPeriod, intensityOn, intensityOff]() {\n    const auto periodTime =\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch())\n            .count() %\n        msPeriod;\n    const auto vibrationIntensity = periodTime &lt; (msPeriod / 2) ? intensityOn : intensityOff;\n    return VibrationStatus{vibrationIntensity, vibrationIntensity};\n  };\n}\n\nVibrationModel argos_lib::VibrationAlternatePulse(units::millisecond_t pulsePeriod,\n                                                  double intensityOn,\n                                                  double intensityOff) {\n  auto msPeriod = pulsePeriod.to&lt;int&gt;();\n  return [msPeriod, intensityOn, intensityOff]() {\n    const auto periodTime =\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch())\n            .count() %\n        msPeriod;\n    const auto vibrationState = periodTime &lt; (msPeriod / 2);\n    return VibrationStatus{vibrationState ? intensityOn : intensityOff, vibrationState ? intensityOff : intensityOn};\n  };\n}\n\nVibrationModel argos_lib::VibrationSyncWave(units::millisecond_t pulsePeriod, double intensityOn, double intensityOff) {\n  auto msPeriod = pulsePeriod.to&lt;int&gt;();\n  return [msPeriod, intensityOn, intensityOff]() {\n    const auto periodTime =\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch())\n            .count() %\n        msPeriod;\n    const auto periodProgress = static_cast&lt;double&gt;(periodTime) / msPeriod;\n    const auto vibrationIntensity = std::cos(std::numbers::pi * 2.0 * periodProgress) / 2 + 0.5;\n    const auto outputIntensity = intensityOff + vibrationIntensity * (intensityOn - intensityOff);\n    return VibrationStatus{outputIntensity, outputIntensity};\n  };\n}\n\nVibrationModel argos_lib::VibrationAlternateWave(units::millisecond_t pulsePeriod,\n                                                 double intensityOn,\n                                                 double intensityOff) {\n  auto msPeriod = pulsePeriod.to&lt;int&gt;();\n  return [msPeriod, intensityOn, intensityOff]() {\n    const auto periodTime =\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch())\n            .count() %\n        msPeriod;\n    const auto periodProgress = static_cast&lt;double&gt;(periodTime) / msPeriod;\n    const auto vibrationIntensityLeft = std::cos(std::numbers::pi * 2.0 * periodProgress) / 2 + 0.5;\n    const auto vibrationIntensityRight = 1.0 - vibrationIntensityLeft;\n    return VibrationStatus{intensityOff + vibrationIntensityLeft * (intensityOn - intensityOff),\n                           intensityOff + vibrationIntensityRight * (intensityOn - intensityOff)};\n  };\n}\n\nVibrationModel argos_lib::TemporaryVibrationPattern(argos_lib::VibrationModel temporaryModel,\n                                                    units::millisecond_t temporaryModelDuration,\n                                                    argos_lib::VibrationModel lastingModel) {\n  auto startTime = std::chrono::steady_clock::now();\n  return [startTime, temporaryModel, lastingModel, temporaryModelDuration]() {\n    const units::millisecond_t duration{std::chrono::steady_clock::now() - startTime};\n    if (duration &gt; temporaryModelDuration) {\n      return lastingModel();\n    } else {\n      return temporaryModel();\n    }\n  };\n}\n</code></pre>"},{"location":"argos-lib/xbox__controller_8cpp.html","title":"File xbox_controller.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; controller &gt; xbox_controller.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/controller/xbox_controller.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/xbox_controller.cpp</code></p>"},{"location":"argos-lib/xbox__controller_8cpp_source.html","title":"File xbox_controller.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; controller &gt; xbox_controller.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/controller/xbox_controller.h\"\n\nusing namespace argos_lib;\n\nXboxController::XboxController(int port) : frc::GenericHID(port), m_vibrationModel(VibrationOff()) {\n  m_buttonDebounceSettings.fill({0_ms, 0_ms});\n  m_buttonDebounceStatus.fill(false);\n  m_rawButtonStatus.fill(false);\n  m_buttonDebounceTransitionTime.fill(std::chrono::steady_clock::now());\n}\n\nvoid XboxController::SetButtonDebounce(Button targetButton, DebounceSettings newSettings) {\n  m_buttonDebounceSettings.at(static_cast&lt;int&gt;(targetButton)) = newSettings;\n}\n\nvoid XboxController::SwapSettings(XboxController&amp; other) {\n  std::swap(m_buttonDebounceSettings, other.m_buttonDebounceSettings);\n  std::fill(m_rawButtonStatus.begin(), m_rawButtonStatus.end(), false);\n  std::fill(other.m_rawButtonStatus.begin(), other.m_rawButtonStatus.end(), false);\n  std::fill(m_buttonDebounceStatus.begin(), m_buttonDebounceStatus.end(), false);\n  std::fill(other.m_buttonDebounceStatus.begin(), other.m_buttonDebounceStatus.end(), false);\n  const auto now{std::chrono::steady_clock::now()};\n  std::fill(m_buttonDebounceTransitionTime.begin(), m_buttonDebounceTransitionTime.end(), now);\n  std::fill(other.m_buttonDebounceTransitionTime.begin(), other.m_buttonDebounceTransitionTime.end(), now);\n}\n\ndouble XboxController::GetX(JoystickHand hand) const {\n  return GetRawAxis(static_cast&lt;int&gt;(hand == JoystickHand::kLeftHand ? Axis::kLeftX : Axis::kRightX));\n}\n\ndouble XboxController::GetY(JoystickHand hand) const {\n  return GetRawAxis(static_cast&lt;int&gt;(hand == JoystickHand::kLeftHand ? Axis::kLeftY : Axis::kRightY));\n}\n\ndouble XboxController::GetTriggerAxis(JoystickHand hand) const {\n  return GetRawAxis(static_cast&lt;int&gt;(hand == JoystickHand::kLeftHand ? Axis::kLeftTrigger : Axis::kRightTrigger));\n}\n\nbool XboxController::GetDebouncedButton(Button buttonIdx) {\n  return UpdateButton(buttonIdx).debounceActive;\n}\n\nbool XboxController::GetDebouncedButtonPressed(Button buttonIdx) {\n  return UpdateButton(buttonIdx).debouncePress;\n}\n\nbool XboxController::GetDebouncedButtonReleased(Button buttonIdx) {\n  return UpdateButton(buttonIdx).debounceRelease;\n}\n\nbool XboxController::GetDebouncedButton(std::vector&lt;Button&gt; buttonCombo) {\n  std::vector&lt;UpdateStatus&gt; updates;\n  updates.reserve(buttonCombo.size());\n  std::transform(buttonCombo.begin(), buttonCombo.end(), std::back_inserter(updates), [this](Button buttonIdx) {\n    return UpdateButton(buttonIdx);\n  });\n\n  return std::all_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.debounceActive; });\n}\n\nbool XboxController::GetDebouncedButtonPressed(std::vector&lt;Button&gt; buttonCombo) {\n  std::vector&lt;UpdateStatus&gt; updates;\n  updates.reserve(buttonCombo.size());\n  std::transform(buttonCombo.begin(), buttonCombo.end(), std::back_inserter(updates), [this](Button buttonIdx) {\n    return UpdateButton(buttonIdx);\n  });\n\n  return std::all_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.debounceActive; }) &amp;&amp;\n         std::any_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.debouncePress; });\n}\n\nbool XboxController::GetDebouncedButtonReleased(std::vector&lt;Button&gt; buttonCombo) {\n  std::vector&lt;UpdateStatus&gt; updates;\n  updates.reserve(buttonCombo.size());\n  std::transform(buttonCombo.begin(), buttonCombo.end(), std::back_inserter(updates), [this](Button buttonIdx) {\n    return UpdateButton(buttonIdx);\n  });\n\n  return std::none_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.debounceActive; }) &amp;&amp;\n         std::any_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.debounceRelease; });\n}\n\nbool XboxController::GetRawButton(Button buttonIdx) {\n  return UpdateButton(buttonIdx).rawActive;\n}\n\nbool XboxController::GetRawButtonPressed(Button buttonIdx) {\n  return UpdateButton(buttonIdx).pressed;\n}\n\nbool XboxController::GetRawButtonReleased(Button buttonIdx) {\n  return UpdateButton(buttonIdx).released;\n}\n\nbool XboxController::GetRawButton(std::vector&lt;Button&gt; buttonCombo) {\n  std::vector&lt;UpdateStatus&gt; updates;\n  updates.reserve(buttonCombo.size());\n  std::transform(buttonCombo.begin(), buttonCombo.end(), std::back_inserter(updates), [this](Button buttonIdx) {\n    return UpdateButton(buttonIdx);\n  });\n\n  return std::all_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.rawActive; });\n}\n\nbool XboxController::GetRawButtonPressed(std::vector&lt;Button&gt; buttonCombo) {\n  std::vector&lt;UpdateStatus&gt; updates;\n  updates.reserve(buttonCombo.size());\n  std::transform(buttonCombo.begin(), buttonCombo.end(), std::back_inserter(updates), [this](Button buttonIdx) {\n    return UpdateButton(buttonIdx);\n  });\n\n  return std::all_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.rawActive; }) &amp;&amp;\n         std::any_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.pressed; });\n}\n\nbool XboxController::GetRawButtonReleased(std::vector&lt;Button&gt; buttonCombo) {\n  std::vector&lt;UpdateStatus&gt; updates;\n  updates.reserve(buttonCombo.size());\n  std::transform(buttonCombo.begin(), buttonCombo.end(), std::back_inserter(updates), [this](Button buttonIdx) {\n    return UpdateButton(buttonIdx);\n  });\n\n  return std::none_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.rawActive; }) &amp;&amp;\n         std::any_of(updates.begin(), updates.end(), [](UpdateStatus newState) { return newState.released; });\n}\n\nVibrationModel XboxController::GetVibration() const {\n  return m_vibrationModel;\n}\n\nvoid XboxController::SetVibration(VibrationModel newVibrationModel) {\n  m_vibrationModel = newVibrationModel;\n  UpdateVibration();\n}\n\nvoid XboxController::UpdateVibration() {\n  const auto vibrationStatus = m_vibrationModel();\n  SetRumble(kLeftRumble, vibrationStatus.intensityLeft);\n  SetRumble(kRightRumble, vibrationStatus.intensityRight);\n}\n\nXboxController::UpdateStatus XboxController::UpdateButton(Button buttonIdx) {\n  UpdateStatus retVal;\n\n  // Limit annoying joystick not connected errors\n  if (!IsConnected()) {\n    return retVal;\n  }\n\n  bool newVal;\n  switch (buttonIdx) {\n    case Button::kA:\n    case Button::kB:\n    case Button::kX:\n    case Button::kY:\n    case Button::kBumperLeft:\n    case Button::kBumperRight:\n    case Button::kBack:\n    case Button::kStart:\n    case Button::kStickLeft:\n    case Button::kStickRight:\n      newVal = frc::GenericHID::GetRawButton(static_cast&lt;int&gt;(buttonIdx));\n      break;\n    case Button::kLeftTrigger:\n      newVal = GetTriggerAxis(JoystickHand::kLeftHand) &gt; analogTriggerThresh;\n      break;\n    case Button::kRightTrigger:\n      newVal = GetTriggerAxis(JoystickHand::kRightHand) &gt; analogTriggerThresh;\n      break;\n    case Button::kUp:\n      newVal = GetPOVButtons().up;\n      break;\n    case Button::kRight:\n      newVal = GetPOVButtons().right;\n      break;\n    case Button::kDown:\n      newVal = GetPOVButtons().down;\n      break;\n    case Button::kLeft:\n      newVal = GetPOVButtons().left;\n      break;\n    case Button::COUNT:\n    default:\n      throw std::runtime_error(\"Invalid button index selected\");\n  }\n\n  const bool prevRawVal = m_rawButtonStatus.at(static_cast&lt;int&gt;(buttonIdx));\n  const bool activeDebounceVal = m_buttonDebounceStatus.at(static_cast&lt;int&gt;(buttonIdx));\n  const auto curTime = std::chrono::steady_clock::now();\n\n  // Record time when first new button state was detected so debounce has reference time\n  if (prevRawVal == activeDebounceVal &amp;&amp; newVal != activeDebounceVal) {\n    m_buttonDebounceTransitionTime.at(static_cast&lt;int&gt;(buttonIdx)) = curTime;\n  }\n\n  const auto activeTransitionTime = m_buttonDebounceTransitionTime.at(static_cast&lt;int&gt;(buttonIdx));\n\n  retVal.pressed = newVal &amp;&amp; !prevRawVal;\n  retVal.released = !newVal &amp;&amp; prevRawVal;\n\n  if (newVal != activeDebounceVal) {\n    const auto timeSinceTransition = units::millisecond_t{static_cast&lt;double&gt;(\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(curTime - activeTransitionTime).count())};\n    if (newVal) {\n      if (timeSinceTransition &gt;= m_buttonDebounceSettings.at(static_cast&lt;int&gt;(buttonIdx)).activateTime) {\n        retVal.debouncePress = true;\n        m_buttonDebounceStatus.at(static_cast&lt;int&gt;(buttonIdx)) = newVal;\n      }\n    } else {\n      if (timeSinceTransition &gt;= m_buttonDebounceSettings.at(static_cast&lt;int&gt;(buttonIdx)).clearTime) {\n        retVal.debounceRelease = true;\n        m_buttonDebounceStatus.at(static_cast&lt;int&gt;(buttonIdx)) = newVal;\n      }\n    }\n  }\n\n  retVal.rawActive = newVal;\n  retVal.debounceActive = m_buttonDebounceStatus.at(static_cast&lt;int&gt;(buttonIdx));\n\n  m_rawButtonStatus.at(static_cast&lt;int&gt;(buttonIdx)) = newVal;\n\n  return retVal;\n}\n\nfrc2::Trigger XboxController::TriggerRaw(Button button) {\n  return TriggerRaw(std::vector{button});\n}\n\nfrc2::Trigger XboxController::TriggerRaw(std::vector&lt;Button&gt; buttonCombo) {\n  return frc2::Trigger([this, buttonCombo]() { return this-&gt;GetRawButton(buttonCombo); });\n}\n\nfrc2::Trigger XboxController::TriggerRawAnyOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerAnyOf(buttonCombo, [this](Button button) { return this-&gt;GetRawButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerRawAllOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerAllOf(buttonCombo, [this](Button button) { return this-&gt;GetRawButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerRawNoneOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerNoneOf(buttonCombo, [this](Button button) { return this-&gt;GetRawButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerRawOneOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerOneOf(buttonCombo, [this](Button button) { return this-&gt;GetRawButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerDebounced(Button button) {\n  return TriggerDebounced(std::vector{button});\n}\n\nfrc2::Trigger XboxController::TriggerDebounced(std::vector&lt;Button&gt; buttonCombo) {\n  return frc2::Trigger([this, buttonCombo]() { return this-&gt;GetDebouncedButton(buttonCombo); });\n}\n\nfrc2::Trigger XboxController::TriggerDebouncedAnyOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerAnyOf(buttonCombo, [this](Button button) { return this-&gt;GetDebouncedButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerDebouncedAllOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerAllOf(buttonCombo, [this](Button button) { return this-&gt;GetDebouncedButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerDebouncedNoneOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerNoneOf(buttonCombo, [this](Button button) { return this-&gt;GetDebouncedButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerDebouncedOneOf(std::vector&lt;Button&gt; buttonCombo) {\n  return TriggerOneOf(buttonCombo, [this](Button button) { return this-&gt;GetDebouncedButton(button); });\n}\n\nfrc2::Trigger XboxController::TriggerAnyOf(std::vector&lt;Button&gt; buttonCombo,\n                                           std::function&lt;bool(Button)&gt; buttonGetterFunc) {\n  std::function&lt;bool()&gt; compoundConditional{[]() { return false; }};\n  for (auto button : buttonCombo) {\n    compoundConditional = [compoundConditional, button, buttonGetterFunc]() {\n      return compoundConditional() || buttonGetterFunc(button);\n    };\n  }\n  return frc2::Trigger{compoundConditional};\n}\n\nfrc2::Trigger XboxController::TriggerAllOf(std::vector&lt;Button&gt; buttonCombo,\n                                           std::function&lt;bool(Button)&gt; buttonGetterFunc) {\n  std::function&lt;bool()&gt; compoundConditional{[]() { return false; }};\n  for (auto button : buttonCombo) {\n    compoundConditional = [compoundConditional, button, buttonGetterFunc]() {\n      return compoundConditional() &amp;&amp; buttonGetterFunc(button);\n    };\n  }\n  return frc2::Trigger{compoundConditional};\n}\n\nfrc2::Trigger XboxController::TriggerNoneOf(std::vector&lt;Button&gt; buttonCombo,\n                                            std::function&lt;bool(Button)&gt; buttonGetterFunc) {\n  std::function&lt;bool()&gt; compoundConditional{[]() { return true; }};\n  for (auto button : buttonCombo) {\n    compoundConditional = [compoundConditional, button, buttonGetterFunc]() {\n      return compoundConditional() &amp;&amp; !buttonGetterFunc(button);\n    };\n  }\n  return frc2::Trigger{compoundConditional};\n}\n\nfrc2::Trigger XboxController::TriggerOneOf(std::vector&lt;Button&gt; buttonCombo,\n                                           std::function&lt;bool(Button)&gt; buttonGetterFunc) {\n  if (buttonCombo.size() &lt; 2) {\n    return TriggerRawAnyOf(buttonCombo);\n  }\n\n  std::vector&lt;std::function&lt;bool()&gt;&gt; compositeConditionals;\n  compositeConditionals.reserve(buttonCombo.size());\n\n  for (auto exclusiveTrueItr = buttonCombo.begin(); exclusiveTrueItr != buttonCombo.end(); ++exclusiveTrueItr) {\n    auto button = *exclusiveTrueItr;\n    std::function&lt;bool()&gt; newCompositeConditional = ([button, buttonGetterFunc]() { return buttonGetterFunc(button); });\n    for (auto otherItr = buttonCombo.begin(); otherItr != buttonCombo.end(); ++otherItr) {\n      if (exclusiveTrueItr != otherItr) {\n        auto otherButton = *otherItr;\n        newCompositeConditional = [newCompositeConditional, otherButton, buttonGetterFunc]() {\n          return newCompositeConditional() &amp;&amp; !buttonGetterFunc(otherButton);\n        };\n      }\n    }\n    compositeConditionals.emplace_back(newCompositeConditional);\n  }\n\n  std::function&lt;bool()&gt; exclusiveConditional = []() { return false; };\n\n  for (auto compositeCheck : compositeConditionals) {\n    exclusiveConditional = [exclusiveConditional, compositeCheck]() {\n      return exclusiveConditional() || compositeCheck();\n    };\n  }\n\n  return frc2::Trigger{exclusiveConditional};\n}\n\nXboxController::DPadButtons XboxController::GetPOVButtons() {\n  const auto povAngle{GetPOV()};\n  return DPadButtons{(povAngle &gt;= 0 &amp;&amp; povAngle &lt;= 45) || povAngle &gt;= 315,\n                     povAngle &gt;= 45 &amp;&amp; povAngle &lt;= 135,\n                     povAngle &gt;= 135 &amp;&amp; povAngle &lt;= 225,\n                     povAngle &gt;= 225 &amp;&amp; povAngle &lt;= 315};\n}\n</code></pre>"},{"location":"argos-lib/dir_16b6c439f6536703101f25e459a4699b.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general</p>"},{"location":"argos-lib/dir_16b6c439f6536703101f25e459a4699b.html#files","title":"Files","text":"Type Name file angle_utils.cpp file debouncer.cpp file edge_detector.cpp file nt_motor_pid_tuner.cpp file nt_subscriber.cpp file odometry_aim.cpp file swerve_utils.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/</code></p>"},{"location":"argos-lib/angle__utils_8cpp.html","title":"File angle_utils.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; angle_utils.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/angle_utils.h\"</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include \"units/math.h\"</code></li> </ul>"},{"location":"argos-lib/angle__utils_8cpp.html#public-functions","title":"Public Functions","text":"Type Name units::degree_t ConstrainAngle (units::degree_t inVal, units::degree_t minVal, units::degree_t maxVal)  units::degree_t InvertedAngle (units::degree_t desiredAngle, units::degree_t referenceAngle) Finds closest angle alias of a vector 180-degrees offset from desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. units::degree_t NearestAngle (units::degree_t desiredAngle, units::degree_t referenceAngle) Finds closest angle alias of desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded."},{"location":"argos-lib/angle__utils_8cpp.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/angle__utils_8cpp.html#function-constrainangle","title":"function ConstrainAngle","text":"<pre><code>units::degree_t ConstrainAngle (\n    units::degree_t inVal,\n    units::degree_t minVal,\n    units::degree_t maxVal\n) \n</code></pre> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/angle__utils_8cpp.html#function-invertedangle","title":"function InvertedAngle","text":"<p>Finds closest angle alias of a vector 180-degrees offset from desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. <pre><code>units::degree_t InvertedAngle (\n    units::degree_t desiredAngle,\n    units::degree_t referenceAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredAngle</code> Angle to find 180-degree offset alias for </li> <li><code>referenceAngle</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Offset angle alias of desiredAngle in range (referencedAngle - 180_deg, referencedAngle + 180_deg] </p>"},{"location":"argos-lib/angle__utils_8cpp.html#function-nearestangle","title":"function NearestAngle","text":"<p>Finds closest angle alias of desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. <pre><code>units::degree_t NearestAngle (\n    units::degree_t desiredAngle,\n    units::degree_t referenceAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredAngle</code> Angle to find alias for </li> <li><code>referenceAngle</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Angle alias of desiredAngle in range (referencedAngle - 180_deg, referencedAngle + 180_deg] </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/angle_utils.cpp</code></p>"},{"location":"argos-lib/angle__utils_8cpp_source.html","title":"File angle_utils.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; angle_utils.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/angle_utils.h\"\n\n#include &lt;cmath&gt;\n\n#include \"units/math.h\"\n\nusing argos_lib::angle::ConstrainAngle;\nusing argos_lib::angle::InvertedAngle;\nusing argos_lib::angle::NearestAngle;\n\nunits::degree_t argos_lib::angle::NearestAngle(units::degree_t desiredAngle, units::degree_t referenceAngle) {\n  const auto normalizedDesiredAngle = ConstrainAngle(desiredAngle, 0_deg, 360_deg);\n  const auto normalizedReferenceAngle = ConstrainAngle(referenceAngle, 0_deg, 360_deg);\n\n  auto angleDiff = normalizedDesiredAngle - normalizedReferenceAngle;\n\n  // Closest equivalent angle is across discontinuity point\n  if (units::math::fabs(angleDiff) &gt; 180_deg) {\n    angleDiff = units::math::copysign(360_deg - units::math::fabs(angleDiff), angleDiff * -1.0);\n  }\n\n  return referenceAngle + angleDiff;\n}\n\nunits::degree_t argos_lib::angle::InvertedAngle(units::degree_t desiredAngle, units::degree_t referenceAngle) {\n  // Inverted angle is 180 degrees offset from desired angle and in opposite travel direction from reference angle\n  const auto fwDist = ConstrainAngle(desiredAngle - referenceAngle, -180_deg, 180_deg);\n  const auto revDistMag = 180_deg - units::math::fabs(fwDist);\n  return referenceAngle + units::math::copysign(revDistMag, -fwDist);\n}\n\nunits::degree_t argos_lib::angle::ConstrainAngle(units::degree_t inVal,\n                                                 units::degree_t minVal,\n                                                 units::degree_t maxVal) {\n  const auto range = maxVal - minVal;\n  inVal = units::math::fmod(inVal - minVal, range);\n  if (inVal &lt; 0_deg) {\n    inVal += range;\n  }\n  return inVal + minVal;\n}\n\ndouble argos_lib::angle::ConstrainAngle(double inVal, double minVal, double maxVal) {\n  return ConstrainAngle(units::make_unit&lt;units::degree_t&gt;(inVal),\n                        units::make_unit&lt;units::degree_t&gt;(minVal),\n                        units::make_unit&lt;units::degree_t&gt;(maxVal))\n      .to&lt;double&gt;();\n}\n</code></pre>"},{"location":"argos-lib/debouncer_8cpp.html","title":"File debouncer.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; debouncer.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/debouncer.h\"</code></li> </ul>"},{"location":"argos-lib/debouncer_8cpp.html#classes","title":"Classes","text":"Type Name class Debouncer <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/debouncer.cpp</code></p>"},{"location":"argos-lib/debouncer_8cpp_source.html","title":"File debouncer.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; debouncer.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/debouncer.h\"\n\nusing argos_lib::Debouncer;\n\nDebouncer::Debouncer(const argos_lib::DebounceSettings debounceSettings, bool initialValue)\n    : m_debounceSettings{debounceSettings}\n    , m_rawStatus{initialValue}\n    , m_debouncedStatus{initialValue}\n    , m_debounceTransitionTime{std::chrono::steady_clock::now()} {}\n\nDebouncer::Debouncer(const units::millisecond_t symmetricDebounceTime)\n    : Debouncer{argos_lib::DebounceSettings{symmetricDebounceTime, symmetricDebounceTime}} {}\n\n[[nodiscard]] bool Debouncer::operator()(bool newVal) {\n  const auto prevRawValue = m_rawStatus;\n  const auto curTime = std::chrono::steady_clock::now();\n\n  if (prevRawValue == m_debouncedStatus &amp;&amp; newVal != m_debouncedStatus) {\n    m_debounceTransitionTime = curTime;\n  }\n\n  if (newVal != m_debouncedStatus) {\n    const auto timeSinceTransition = units::millisecond_t{static_cast&lt;double&gt;(\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(curTime - m_debounceTransitionTime).count())};\n    if (newVal) {\n      if (timeSinceTransition &gt;= m_debounceSettings.activateTime) {\n        m_debouncedStatus = newVal;\n      }\n    } else {\n      if (timeSinceTransition &gt;= m_debounceSettings.clearTime) {\n        m_debouncedStatus = newVal;\n      }\n    }\n  }\n\n  m_rawStatus = newVal;\n  return m_debouncedStatus;\n}\n\nbool Debouncer::GetRawStatus() {\n  return m_rawStatus;\n}\n\nbool Debouncer::GetDebouncedStatus() {\n  return m_debouncedStatus;\n}\n\nvoid Debouncer::Reset(bool newVal) {\n  m_rawStatus = newVal;\n  m_debouncedStatus = newVal;\n}\n</code></pre>"},{"location":"argos-lib/edge__detector_8cpp.html","title":"File edge_detector.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; edge_detector.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/edge_detector.h\"</code></li> <li><code>#include \"frc/smartdashboard/SmartDashboard.h\"</code></li> </ul>"},{"location":"argos-lib/edge__detector_8cpp.html#classes","title":"Classes","text":"Type Name class EdgeDetector <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/edge_detector.cpp</code></p>"},{"location":"argos-lib/edge__detector_8cpp_source.html","title":"File edge_detector.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; edge_detector.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/edge_detector.h\"\n\n#include \"frc/smartdashboard/SmartDashboard.h\"\n\nusing argos_lib::EdgeDetector;\n\nEdgeDetector::EdgeDetector(EdgeDetector::EdgeDetectSettings _settings, bool initialValue) {\n  m_settings = _settings;\n  m_previousValue = initialValue;\n}\n\nbool EdgeDetector::operator()(bool curVal) {\n  edgeStatus stat = Calculate(curVal);\n  switch (m_settings) {\n    case EdgeDetectSettings::DETECT_BOTH:\n      return (stat == edgeStatus::RISING || stat == edgeStatus::FALLING);\n      break;\n    case EdgeDetectSettings::DETECT_RISING:\n      return (stat == edgeStatus::RISING);\n      break;\n    case EdgeDetectSettings::DETECT_FALLING:\n      return (stat == edgeStatus::FALLING);\n      break;\n  }\n  return false;\n}\n\nEdgeDetector::edgeStatus EdgeDetector::Calculate(bool curVal) {\n  edgeStatus statusReturn = edgeStatus::NONE;\n  switch (m_settings) {\n    case EdgeDetectSettings::DETECT_BOTH:\n      if (DetectFalling(curVal) == edgeStatus::FALLING) {\n        statusReturn = edgeStatus::FALLING;\n      } else if (DetectRising(curVal) == edgeStatus::RISING) {\n        statusReturn = edgeStatus::RISING;\n      }\n      break;\n    case EdgeDetectSettings::DETECT_FALLING:\n      statusReturn = DetectFalling(curVal);\n      break;\n    case EdgeDetectSettings::DETECT_RISING:\n      statusReturn = DetectRising(curVal);\n      break;\n  }\n  m_previousValue = curVal;\n  return statusReturn;\n}\n\nstd::string EdgeDetector::ToString(edgeStatus status) {\n  switch (status) {\n    case edgeStatus::RISING:\n      return \"Rising\";\n      break;\n    case edgeStatus::FALLING:\n      return \"Falling\";\n      break;\n    case edgeStatus::NONE:\n      return \"None\";\n      break;\n    case edgeStatus::ERROR:\n      return \"Error\";\n      break;\n\n    default:\n      return \"DEFAULT\";\n      break;\n  }\n}\n\nEdgeDetector::edgeStatus EdgeDetector::DetectFalling(bool currentValue) {\n  if (m_previousValue &amp;&amp; !currentValue) {\n    return edgeStatus::FALLING;\n  } else {\n    return edgeStatus::NONE;\n  }\n}\n\nEdgeDetector::edgeStatus EdgeDetector::DetectRising(bool currentValue) {\n  if (!m_previousValue &amp;&amp; currentValue) {\n    return edgeStatus::RISING;\n  } else {\n    return edgeStatus::NONE;\n  }\n}\n</code></pre>"},{"location":"argos-lib/nt__motor__pid__tuner_8cpp.html","title":"File nt_motor_pid_tuner.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; nt_motor_pid_tuner.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/nt_motor_pid_tuner.h\"</code></li> <li><code>#include &lt;array&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include \"frc/smartdashboard/SmartDashboard.h\"</code></li> </ul>"},{"location":"argos-lib/nt__motor__pid__tuner_8cpp.html#namespaces","title":"Namespaces","text":"Type Name namespace chrono_literals"},{"location":"argos-lib/nt__motor__pid__tuner_8cpp.html#classes","title":"Classes","text":"Type Name struct ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. class NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/nt_motor_pid_tuner.cpp</code></p>"},{"location":"argos-lib/nt__motor__pid__tuner_8cpp_source.html","title":"File nt_motor_pid_tuner.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; nt_motor_pid_tuner.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/nt_motor_pid_tuner.h\"\n\n#include &lt;array&gt;\n#include &lt;chrono&gt;\n\n#include \"frc/smartdashboard/SmartDashboard.h\"\n\nusing namespace std::literals::chrono_literals;\n\nusing argos_lib::ClosedLoopSensorConversions;\nusing argos_lib::NTMotorPIDTuner;\n\nNTMotorPIDTuner::NTMotorPIDTuner(const std::string&amp; tableName,\n                                 std::initializer_list&lt;BaseTalon*&gt; motors,\n                                 unsigned pidSlot,\n                                 ClosedLoopSensorConversions sensorConversions)\n    : m_updateSubscriber{tableName}\n    , m_pMotors{motors}\n    , m_pidSlot{pidSlot}\n    , m_pntTable(nt::NetworkTableInstance::GetDefault().GetTable(tableName))\n    , m_sensorConversions{sensorConversions}\n    , m_threadMutex()\n    , m_threadStopCv()\n    , m_statusUpdateThread{[this]() { UpdateClosedLoopMonitoringThread(); }} {\n  m_activeConfigs.SlotNumber = m_pidSlot;\n  if (!std::empty(motors)) {\n    (*motors.begin())-&gt;GetConfigurator().Refresh(m_activeConfigs);\n  }\n\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kP\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kP = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kP);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kI\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kI = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kI);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kD\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kD = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kD);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kV\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kV = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kV);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kA\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kA = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kA);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kS\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kS = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kS);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/kG\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.kG = newVal;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.kG);\n  m_updateSubscriber.AddMonitor(\n      \"tunes/GArm\",\n      [this](double newVal) {\n        for (auto motor : m_pMotors) {\n          m_activeConfigs.GravityType = newVal == 0 ? ctre::phoenix6::signals::GravityTypeValue::Elevator_Static :\n                                                      ctre::phoenix6::signals::GravityTypeValue::Arm_Cosine;\n          motor-&gt;GetConfigurator().Apply(m_activeConfigs, 50_ms);\n        }\n      },\n      m_activeConfigs.GravityType == ctre::phoenix6::signals::GravityTypeValue::Arm_Cosine);\n}\n\nNTMotorPIDTuner::~NTMotorPIDTuner() {\n  m_threadStopCv.notify_all();\n  m_statusUpdateThread.join();\n}\n\nvoid NTMotorPIDTuner::UpdateClosedLoopMonitoringThread() {\n  bool keepRunning = true;\n\n  std::vector&lt;double&gt; setpoints;\n  std::vector&lt;double&gt; positions;\n  std::vector&lt;double&gt; velocities;\n  std::vector&lt;double&gt; outputs;\n  std::vector&lt;double&gt; errors;\n\n  setpoints.reserve(m_pMotors.size());\n  positions.reserve(m_pMotors.size());\n  velocities.reserve(m_pMotors.size());\n  outputs.reserve(m_pMotors.size());\n  errors.reserve(m_pMotors.size());\n\n  while (keepRunning) {\n    std::unique_lock&lt;std::mutex&gt; lock{m_threadMutex};\n    if (m_threadStopCv.wait_for(lock, 50ms) == std::cv_status::no_timeout) {\n      keepRunning = false;\n    } else {\n      setpoints.clear();\n      positions.clear();\n      velocities.clear();\n      outputs.clear();\n      errors.clear();\n      for (auto motor : m_pMotors) {\n        const auto controlMode = motor-&gt;GetControlMode().GetValue();\n        switch (controlMode.value) {\n          case ctre::phoenix6::signals::ControlModeValue::PositionDutyCycle:\n          case ctre::phoenix6::signals::ControlModeValue::VelocityDutyCycle:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicDutyCycle:\n          case ctre::phoenix6::signals::ControlModeValue::PositionDutyCycleFOC:\n          case ctre::phoenix6::signals::ControlModeValue::VelocityDutyCycleFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicDutyCycleFOC:\n          case ctre::phoenix6::signals::ControlModeValue::PositionVoltage:\n          case ctre::phoenix6::signals::ControlModeValue::VelocityVoltage:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVoltage:\n          case ctre::phoenix6::signals::ControlModeValue::PositionVoltageFOC:\n          case ctre::phoenix6::signals::ControlModeValue::VelocityVoltageFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVoltageFOC:\n          case ctre::phoenix6::signals::ControlModeValue::PositionTorqueCurrentFOC:\n          case ctre::phoenix6::signals::ControlModeValue::VelocityTorqueCurrentFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicTorqueCurrentFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVelocityDutyCycle:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVelocityDutyCycleFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVelocityVoltage:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVelocityVoltageFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicVelocityTorqueCurrentFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicExpoDutyCycle:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicExpoDutyCycleFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicExpoVoltage:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicExpoVoltageFOC:\n          case ctre::phoenix6::signals::ControlModeValue::MotionMagicExpoTorqueCurrentFOC:\n            setpoints.push_back(motor-&gt;GetClosedLoopReference().GetValue() * m_sensorConversions.setpoint);\n            errors.push_back(motor-&gt;GetClosedLoopError().GetValue() * m_sensorConversions.setpoint);\n            break;\n          default:\n            setpoints.push_back(NAN);\n            errors.push_back(NAN);\n        }\n        positions.push_back(motor-&gt;GetPosition().GetValue().to&lt;double&gt;() * m_sensorConversions.position);\n        velocities.push_back(motor-&gt;GetVelocity().GetValue().to&lt;double&gt;() * m_sensorConversions.velocity);\n        outputs.push_back(motor-&gt;GetDutyCycle().GetValue().to&lt;double&gt;());\n      }\n      m_pntTable-&gt;PutNumberArray(\"status/setpoints\", setpoints);\n      m_pntTable-&gt;PutNumberArray(\"status/positions\", positions);\n      m_pntTable-&gt;PutNumberArray(\"status/velocities\", velocities);\n      m_pntTable-&gt;PutNumberArray(\"status/outputs\", outputs);\n      m_pntTable-&gt;PutNumberArray(\"status/errors\", errors);\n    }\n  }\n}\n</code></pre>"},{"location":"argos-lib/nt__subscriber_8cpp.html","title":"File nt_subscriber.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; nt_subscriber.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/nt_subscriber.h\"</code></li> <li><code>#include &lt;networktables/DoubleTopic.h&gt;</code></li> <li><code>#include &lt;networktables/NetworkTable.h&gt;</code></li> <li><code>#include &lt;networktables/NetworkTableInstance.h&gt;</code></li> <li><code>#include \"fmt/format.h\"</code></li> </ul>"},{"location":"argos-lib/nt__subscriber_8cpp.html#classes","title":"Classes","text":"Type Name class NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/nt_subscriber.cpp</code></p>"},{"location":"argos-lib/nt__subscriber_8cpp_source.html","title":"File nt_subscriber.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; nt_subscriber.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/nt_subscriber.h\"\n\n#include &lt;networktables/DoubleTopic.h&gt;\n#include &lt;networktables/NetworkTable.h&gt;\n#include &lt;networktables/NetworkTableInstance.h&gt;\n\n#include \"fmt/format.h\"\n\nusing argos_lib::NTSubscriber;\n\nNTSubscriber::NTSubscriber(const std::string&amp; tableName) : m_tableName{tableName} {}\n\nNTSubscriber::~NTSubscriber() {\n  // Need to release all handles\n  for (auto listenerIt = m_ntListeners.begin(); listenerIt != m_ntListeners.end(); ++listenerIt) {\n    nt::RemoveListener(*listenerIt);\n  }\n  for (auto entryIt = m_ntEntries.begin(); entryIt != m_ntEntries.end(); ++entryIt) {\n    nt::ReleaseEntry(*entryIt);\n  }\n}\n\nvoid NTSubscriber::AddMonitor(const std::string&amp; keyName,\n                              std::function&lt;void(double)&gt; onUpdateCallback,\n                              const double defaultValue,\n                              const bool forceUpdate) {\n  NT_Topic topic = nt::GetTopic(NT_GetDefaultInstance(), fmt::format(\"{}/{}\", m_tableName, keyName));\n  m_ntEntries.push_back(nt::GetEntry(topic, NT_DOUBLE, \"double\"));\n  if (forceUpdate) {\n    nt::SetDouble(m_ntEntries.back(), defaultValue);\n  } else {\n    nt::SetDefaultDouble(m_ntEntries.back(), defaultValue);\n  }\n\n  nt::AddListener(m_ntEntries.back(), nt::EventFlags::kValueAll, [onUpdateCallback](const nt::Event&amp; e) {\n    onUpdateCallback(e.GetValueEventData()-&gt;value.GetDouble());\n  });\n}\n</code></pre>"},{"location":"argos-lib/odometry__aim_8cpp.html","title":"File odometry_aim.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; odometry_aim.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/odometry_aim.h\"</code></li> <li><code>#include &lt;units/math.h&gt;</code></li> <li><code>#include &lt;cmath&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/odometry_aim.cpp</code></p>"},{"location":"argos-lib/odometry__aim_8cpp_source.html","title":"File odometry_aim.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; odometry_aim.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/odometry_aim.h\"\n\n#include &lt;units/math.h&gt;\n\n#include &lt;cmath&gt;\n\nunits::degree_t argos_lib::odometry_aim::GetAngleToTarget(const frc::Translation2d&amp; currentEstimatedRobotPose,\n                                                          const frc::Translation3d&amp; targetPoseOnField) {\n  auto yawToTarget = units::math::atan2(targetPoseOnField.Y() - currentEstimatedRobotPose.Y(),\n                                        targetPoseOnField.X() - currentEstimatedRobotPose.X());\n\n  return 90.0_deg - yawToTarget;\n}\n\nunits::meter_t argos_lib::odometry_aim::GetDistanceToTarget(const frc::Translation2d&amp; currentEstimatedRobotPose,\n                                                            const frc::Translation3d&amp; targetPoseOnField) {\n  auto Ydiff = targetPoseOnField.Y() - currentEstimatedRobotPose.Y();\n  auto Xdiff = targetPoseOnField.X() - currentEstimatedRobotPose.X();\n  return units::math::hypot(Ydiff, Xdiff);\n}\n</code></pre>"},{"location":"argos-lib/swerve__utils_8cpp.html","title":"File swerve_utils.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; general &gt; swerve_utils.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/swerve_utils.h\"</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include \"argos_lib/general/angle_utils.h\"</code></li> </ul>"},{"location":"argos-lib/swerve__utils_8cpp.html#public-functions","title":"Public Functions","text":"Type Name units::degree_t ConstrainAngle (units::degree_t inVal, units::degree_t minVal, units::degree_t maxVal)  units::degree_t InvertedAngle (units::degree_t desiredAngle, units::degree_t referenceAngle) Finds closest angle alias of a vector 180-degrees offset from desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. units::degree_t NearestAngle (units::degree_t desiredAngle, units::degree_t referenceAngle) Finds closest angle alias of desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. frc::SwerveModuleState Optimize (frc::SwerveModuleState desiredState, units::degree_t currentModuleAngle, units::degrees_per_second_t currentModuleAngularRate, units::feet_per_second_t currentModuleDriveVel, units::feet_per_second_t maxVelocity) Optimize swerve module to minimize rotations and drive direction changes."},{"location":"argos-lib/swerve__utils_8cpp.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/swerve__utils_8cpp.html#function-constrainangle","title":"function ConstrainAngle","text":"<pre><code>units::degree_t ConstrainAngle (\n    units::degree_t inVal,\n    units::degree_t minVal,\n    units::degree_t maxVal\n) \n</code></pre> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p>"},{"location":"argos-lib/swerve__utils_8cpp.html#function-invertedangle","title":"function InvertedAngle","text":"<p>Finds closest angle alias of a vector 180-degrees offset from desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. <pre><code>units::degree_t InvertedAngle (\n    units::degree_t desiredAngle,\n    units::degree_t referenceAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredAngle</code> Angle to find 180-degree offset alias for </li> <li><code>referenceAngle</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Offset angle alias of desiredAngle in range (referencedAngle - 180_deg, referencedAngle + 180_deg] </p>"},{"location":"argos-lib/swerve__utils_8cpp.html#function-nearestangle","title":"function NearestAngle","text":"<p>Finds closest angle alias of desiredAngle relative to referencedAngle. All inputs are normalized so ranges are unbounded. <pre><code>units::degree_t NearestAngle (\n    units::degree_t desiredAngle,\n    units::degree_t referenceAngle\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredAngle</code> Angle to find alias for </li> <li><code>referenceAngle</code> Defines desired alias range </li> </ul> <p>Returns:</p> <p>Angle alias of desiredAngle in range (referencedAngle - 180_deg, referencedAngle + 180_deg] </p>"},{"location":"argos-lib/swerve__utils_8cpp.html#function-optimize","title":"function Optimize","text":"<p>Optimize swerve module to minimize rotations and drive direction changes. <pre><code>frc::SwerveModuleState Optimize (\n    frc::SwerveModuleState desiredState,\n    units::degree_t currentModuleAngle,\n    units::degrees_per_second_t currentModuleAngularRate,\n    units::feet_per_second_t currentModuleDriveVel,\n    units::feet_per_second_t maxVelocity\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>desiredState</code> Requested state. Output must result in same motion </li> <li><code>currentModuleAngle</code> Module rotation angle in relative or absolute position </li> <li><code>currentModuleAngularRate</code> Current module rotation speed. To prevent rapid changes in rotation direction. </li> <li><code>currentModuleDriveVel</code> Current module drive velocity. To prevent rapid changes in drive motor velocity. </li> <li><code>maxVelocity</code> Max velocity for determining max transition change thresholds </li> </ul> <p>Returns:</p> <p>Optimized swerve module state that results in same motion as desiredState </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/general/swerve_utils.cpp</code></p>"},{"location":"argos-lib/swerve__utils_8cpp_source.html","title":"File swerve_utils.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; general &gt; swerve_utils.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/general/swerve_utils.h\"\n\n#include &lt;cmath&gt;\n\n#include \"argos_lib/general/angle_utils.h\"\n\nusing argos_lib::angle::ConstrainAngle;\nusing argos_lib::angle::InvertedAngle;\nusing argos_lib::angle::NearestAngle;\nusing argos_lib::swerve::Optimize;\n\nfrc::SwerveModuleState argos_lib::swerve::Optimize(frc::SwerveModuleState desiredState,\n                                                   units::degree_t currentModuleAngle,\n                                                   units::degrees_per_second_t currentModuleAngularRate,\n                                                   units::feet_per_second_t currentModuleDriveVel,\n                                                   units::feet_per_second_t maxVelocity) {\n  frc::SwerveModuleState closestForwardState{desiredState};\n  frc::SwerveModuleState closestInverseState{desiredState};\n\n  closestForwardState.angle = NearestAngle(desiredState.angle.Degrees(), currentModuleAngle);\n  closestInverseState.angle = InvertedAngle(closestForwardState.angle.Degrees(), currentModuleAngle);\n  closestInverseState.speed = closestInverseState.speed * -1.0;\n\n  const auto fwdTurnSign = std::signbit((closestForwardState.angle.Degrees() - currentModuleAngle).to&lt;double&gt;());\n  const auto revTurnSign = std::signbit((closestInverseState.angle.Degrees() - currentModuleAngle).to&lt;double&gt;());\n\n  [[maybe_unused]] const auto velPreferFwd = currentModuleDriveVel &gt; maxVelocity / 2;\n  const auto velPreferRev = currentModuleDriveVel &lt; -maxVelocity / 2;\n  const auto angVelHasPreference = units::math::fabs(currentModuleAngularRate) &gt; 20_deg_per_s;\n  [[maybe_unused]] const auto angVelPreferFwd =\n      angVelHasPreference &amp;&amp; fwdTurnSign == std::signbit(currentModuleAngularRate.to&lt;double&gt;());\n  const auto angVelPreferRev =\n      angVelHasPreference &amp;&amp; revTurnSign == std::signbit(currentModuleAngularRate.to&lt;double&gt;());\n\n  const auto fwdDist = units::math::fabs(closestForwardState.angle.Degrees() - currentModuleAngle);\n  const auto revDist = 180_deg - fwdDist;\n\n  if (fwdDist &lt; revDist &amp;&amp; !(velPreferRev &amp;&amp; angVelPreferRev)) {\n    return closestForwardState;\n  }\n  return closestInverseState;\n}\n</code></pre>"},{"location":"argos-lib/dir_f3cbec9e965946ce7c914e3bb9c19088.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/homing","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; homing</p>"},{"location":"argos-lib/dir_f3cbec9e965946ce7c914e3bb9c19088.html#files","title":"Files","text":"Type Name file fs_homing.cpp file network_tables_homing_storage.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/homing/</code></p>"},{"location":"argos-lib/fs__homing_8cpp.html","title":"File fs_homing.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; homing &gt; fs_homing.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/homing/fs_homing.h\"</code></li> <li><code>#include &lt;cstdlib&gt;</code></li> <li><code>#include &lt;fstream&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include \"wpi/fs.h\"</code></li> </ul>"},{"location":"argos-lib/fs__homing_8cpp.html#classes","title":"Classes","text":"Type Name class SwerveFSHomingStorage <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/homing/fs_homing.cpp</code></p>"},{"location":"argos-lib/fs__homing_8cpp_source.html","title":"File fs_homing.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; homing &gt; fs_homing.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/homing/fs_homing.h\"\n\n#include &lt;cstdlib&gt;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n\n#include \"wpi/fs.h\"\n\nusing argos_lib::SwerveFSHomingStorage;\n\nSwerveFSHomingStorage::SwerveFSHomingStorage(const fs::path&amp; swerveHomesPath) : m_swerveHomesPath{swerveHomesPath} {}\n\nbool SwerveFSHomingStorage::Save(const argos_lib::swerve::SwerveModulePositions&amp; homePosition) {\n  try {\n    std::ofstream configFile(GetFilePath(), std::ios::out);\n    configFile &lt;&lt; homePosition.FrontLeft.to&lt;double&gt;() &lt;&lt; ' ' &lt;&lt; homePosition.FrontRight.to&lt;double&gt;() &lt;&lt; ' '\n               &lt;&lt; homePosition.RearRight.to&lt;double&gt;() &lt;&lt; ' ' &lt;&lt; homePosition.RearLeft.to&lt;double&gt;();\n    configFile.close();\n    return true;\n  } catch (...) {\n    // Error accessing file\n    std::cout &lt;&lt; \"[ERROR] Could not write to config file\\n\";\n    return false;\n  }\n}\n\nstd::optional&lt;argos_lib::swerve::SwerveModulePositions&gt; SwerveFSHomingStorage::Load() {\n  try {\n    std::ifstream configFile(GetFilePath(), std::ios::in);\n    double frontLeft, frontRight, rearRight, rearLeft;\n    configFile &gt;&gt; frontLeft &gt;&gt; frontRight &gt;&gt; rearRight &gt;&gt; rearLeft;\n    configFile.close();\n\n    return argos_lib::swerve::SwerveModulePositions{{units::make_unit&lt;units::degree_t&gt;(frontLeft)},\n                                                    {units::make_unit&lt;units::degree_t&gt;(frontRight)},\n                                                    {units::make_unit&lt;units::degree_t&gt;(rearRight)},\n                                                    {units::make_unit&lt;units::degree_t&gt;(rearLeft)}};\n  } catch (...) {\n    // Error accessing file\n    std::cout &lt;&lt; \"[ERROR] Could not read from config file\\n\";\n    return std::nullopt;\n  }\n}\n\nfs::path SwerveFSHomingStorage::GetFilePath() {\n  static const fs::path homeDir{\"/home/lvuser\"};\n  static const fs::path configFile{homeDir / m_swerveHomesPath};\n\n  // Create empty file if it doesn't exist yet\n  if (!fs::exists(configFile)) {\n    fs::create_directories(configFile.parent_path());\n    std::ofstream newFile(configFile);\n    newFile.close();\n  }\n\n  return configFile;\n}\n</code></pre>"},{"location":"argos-lib/network__tables__homing__storage_8cpp.html","title":"File network_tables_homing_storage.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; homing &gt; network_tables_homing_storage.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/homing/network_tables_homing_storage.h\"</code></li> <li><code>#include &lt;networktables/NetworkTableInstance.h&gt;</code></li> </ul>"},{"location":"argos-lib/network__tables__homing__storage_8cpp.html#classes","title":"Classes","text":"Type Name class NetworkTablesHomingStorage Saves and loads swerve module homes to networkTables. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/homing/network_tables_homing_storage.cpp</code></p>"},{"location":"argos-lib/network__tables__homing__storage_8cpp_source.html","title":"File network_tables_homing_storage.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; homing &gt; network_tables_homing_storage.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/homing/network_tables_homing_storage.h\"\n\n#include &lt;networktables/NetworkTableInstance.h&gt;\n\nusing argos_lib::swerve::NetworkTablesHomingStorage;\n\nNetworkTablesHomingStorage::NetworkTablesHomingStorage(const std::string&amp; tableName,\n                                                       const std::string&amp; frontLeftPath,\n                                                       const std::string&amp; frontRightPath,\n                                                       const std::string&amp; rearRightPath,\n                                                       const std::string&amp; rearLeftPath)\n    : m_tableName{tableName}\n    , m_frontLeftPath{frontLeftPath}\n    , m_frontRightPath{frontRightPath}\n    , m_rearRightPath{rearRightPath}\n    , m_rearLeftPath{rearLeftPath} {\n  auto ntInstance{nt::NetworkTableInstance::GetDefault()};\n  auto ntTable{ntInstance.GetTable(m_tableName)};\n  ntTable-&gt;SetPersistent(m_frontLeftPath);\n  ntTable-&gt;SetPersistent(m_frontRightPath);\n  ntTable-&gt;SetPersistent(m_rearRightPath);\n  ntTable-&gt;SetPersistent(m_rearLeftPath);\n}\n\nbool NetworkTablesHomingStorage::Save(const argos_lib::swerve::SwerveModulePositions&amp; homePosition) {\n  auto ntInstance{nt::NetworkTableInstance::GetDefault()};\n  auto ntTable{ntInstance.GetTable(m_tableName)};\n\n  ntTable-&gt;PutNumber(m_frontLeftPath, homePosition.FrontLeft.to&lt;double&gt;());\n  ntTable-&gt;PutNumber(m_frontRightPath, homePosition.FrontRight.to&lt;double&gt;());\n  ntTable-&gt;PutNumber(m_rearRightPath, homePosition.RearRight.to&lt;double&gt;());\n  ntTable-&gt;PutNumber(m_rearLeftPath, homePosition.RearLeft.to&lt;double&gt;());\n\n  return true;\n}\n\nstd::optional&lt;argos_lib::swerve::SwerveModulePositions&gt; NetworkTablesHomingStorage::Load() {\n  auto ntInstance{nt::NetworkTableInstance::GetDefault()};\n  auto ntTable{ntInstance.GetTable(m_tableName)};\n  // Read positions are in degrees\n  return argos_lib::swerve::SwerveModulePositions{\n      units::make_unit&lt;units::degree_t&gt;(ntTable-&gt;GetNumber(m_frontLeftPath, 0)),\n      units::make_unit&lt;units::degree_t&gt;(ntTable-&gt;GetNumber(m_frontRightPath, 0)),\n      units::make_unit&lt;units::degree_t&gt;(ntTable-&gt;GetNumber(m_rearRightPath, 0)),\n      units::make_unit&lt;units::degree_t&gt;(ntTable-&gt;GetNumber(m_rearLeftPath, 0))};\n}\n</code></pre>"},{"location":"argos-lib/dir_42b5fa11a77a8b77390e65f20483b7fe.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/led","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; led</p>"},{"location":"argos-lib/dir_42b5fa11a77a8b77390e65f20483b7fe.html#files","title":"Files","text":"Type Name file animation.cpp file geometry.cpp file panel.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/led/</code></p>"},{"location":"argos-lib/animation_8cpp.html","title":"File animation.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; led &gt; animation.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;argos_lib/general/angle_utils.h&gt;</code></li> <li><code>#include &lt;argos_lib/led/animiation.h&gt;</code></li> <li><code>#include &lt;argos_lib/led/geometry.h&gt;</code></li> <li><code>#include &lt;units/angle.h&gt;</code></li> <li><code>#include &lt;units/math.h&gt;</code></li> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;cstdlib&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/led/animation.cpp</code></p>"},{"location":"argos-lib/animation_8cpp_source.html","title":"File animation.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; led &gt; animation.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include &lt;argos_lib/general/angle_utils.h&gt;\n#include &lt;argos_lib/led/animiation.h&gt;\n#include &lt;argos_lib/led/geometry.h&gt;\n#include &lt;units/angle.h&gt;\n#include &lt;units/math.h&gt;\n\n#include &lt;algorithm&gt;\n#include &lt;chrono&gt;\n#include &lt;cstdlib&gt;\n#include &lt;optional&gt;\n\nargos_lib::led::Animation argos_lib::led::animation::Pong(unsigned offset,\n                                                          unsigned width,\n                                                          unsigned height,\n                                                          unsigned ballSize,\n                                                          bool rainbow,\n                                                          frc::AddressableLED::LEDData ballColor,\n                                                          frc::AddressableLED::LEDData backgroundColor,\n                                                          units::millisecond_t frameTime,\n                                                          argos_lib::led::PanelScanParams scanParams) {\n  // The animation update function is a mutable lambda so multiple instances of this animation can operate independently\n  // and retain state required to bounce around\n  return argos_lib::led::Animation{\n      std::function&lt;Strip()&gt;([width,\n                              height,\n                              ballSize,\n                              rainbow,\n                              ballColor,\n                              backgroundColor,\n                              frameTime,\n                              scanParams,\n                              x = width / 2.0,\n                              y = height / 2.0,\n                              dir = units::degree_t(std::rand() % 360U),\n                              lastTime = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(\n                                  std::chrono::steady_clock::now().time_since_epoch())]() mutable {\n        // Start by moving the ball in the previous travel direction the amount required based on the\n        // configured speed\n        const auto now =\n            std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch());\n\n        float travelDist = frameTime &lt; 1_us ? 1.0 : (units::millisecond_t(now - lastTime) / frameTime).to&lt;float&gt;();\n\n        float newX = x + travelDist * units::math::cos(dir);\n        float newY = y + travelDist * units::math::sin(dir);\n\n        // Check for the ball moving outside the rectangle as this indicates a bounce is required\n        // Multiple bounces can occur in the same update depending on the distance covered since last update\n        while (newX &lt; 0 || newY &lt; 0 || newX &gt; (width - 1) || newY &gt; (height - 1)) {\n          std::optional&lt;std::pair&lt;float, float&gt;&gt; intersectionPoint = std::nullopt;\n          if (!intersectionPoint &amp;&amp; newX &lt; 0) {\n            intersectionPoint = SegmentIntersection(0, 0, 0, height - 1, x, y, newX, newY);\n            if (intersectionPoint) {\n              dir = FlipVertical(dir);\n            }\n          }\n          if (!intersectionPoint &amp;&amp; newX &gt; width - 1) {\n            intersectionPoint = SegmentIntersection(width - 1, 0, width - 1, height - 1, x, y, newX, newY);\n            if (intersectionPoint) {\n              dir = FlipVertical(dir);\n            }\n          }\n          if (!intersectionPoint &amp;&amp; newY &lt; 0) {\n            intersectionPoint = SegmentIntersection(0, 0, width - 1, 0, x, y, newX, newY);\n            if (intersectionPoint) {\n              dir = FlipHorizontal(dir);\n            }\n          }\n          if (!intersectionPoint &amp;&amp; newY &gt; height - 1) {\n            intersectionPoint = SegmentIntersection(0, height - 1, width - 1, height - 1, x, y, newX, newY);\n            if (intersectionPoint) {\n              dir = FlipHorizontal(dir);\n            }\n          }\n\n          if (intersectionPoint) {\n            // Choose random color, but always max brightness and saturation\n            if (rainbow) {\n              ballColor.SetHSV(std::rand() % 180, 255, 255);\n            }\n            // Update new target position after bounce before doing another bounce check\n            travelDist -= std::hypot(intersectionPoint.value().first - x, intersectionPoint.value().second - y);\n            x = intersectionPoint.value().first;\n            y = intersectionPoint.value().second;\n            newX = x + travelDist * units::math::cos(dir);\n            newY = y + travelDist * units::math::sin(dir);\n          }\n        }\n\n        x = newX;\n        y = newY;\n        lastTime = now;\n\n        // Draw ball on fresh panel and return the new state\n        argos_lib::led::Panel panel(width, height, backgroundColor);\n        DrawRectangle(panel, ballSize, ballSize, std::round(x), std::round(y), ballColor);\n        return argos_lib::led::Serialize(panel, scanParams);\n      }),\n      width * height,\n      offset};\n}\n\nargos_lib::led::AnimatedSprite argos_lib::led::animation::ChompingPacMan(float radius,\n                                                                         frc::AddressableLED::LEDData color,\n                                                                         units::degree_t direction,\n                                                                         units::millisecond_t chompPeriod,\n                                                                         bool feathered) {\n  constexpr units::degree_t maxMouthAngle = 90_deg;\n  return argos_lib::led::AnimatedSprite{[radius, color, direction, chompPeriod, feathered, maxMouthAngle]() {\n    const auto now =\n        std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch());\n    const auto timeWithinPeriod = units::math::fmod(units::millisecond_t(now), chompPeriod);\n    const auto halfPeriod = chompPeriod / 2.0;\n    const auto mouthAngle = maxMouthAngle * units::math::abs(timeWithinPeriod - halfPeriod) / halfPeriod;\n    return DrawPacMan(radius, color, direction, mouthAngle, feathered);\n  }};\n}\n\nargos_lib::led::AnimatedSprite argos_lib::led::animation::DyingPacMan(float radius,\n                                                                      frc::AddressableLED::LEDData color,\n                                                                      units::degree_t direction,\n                                                                      units::degree_t initialMouthAngle,\n                                                                      units::millisecond_t animationTime,\n                                                                      bool feathered) {\n  return argos_lib::led::AnimatedSprite{[radius,\n                                         color,\n                                         direction,\n                                         initialMouthAngle,\n                                         animationTime,\n                                         animationStartTime = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(\n                                             std::chrono::steady_clock::now().time_since_epoch()),\n                                         feathered]() mutable {\n    const auto percentComplete = units::millisecond_t(std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(\n                                                          std::chrono::steady_clock::now().time_since_epoch()) -\n                                                      animationStartTime) /\n                                 (animationTime * 0.9);\n    if (percentComplete.to&lt;double&gt;() &gt; 1.0) {\n      return DrawPacMan(radius, color, direction, 360_deg, feathered);\n    }\n    return DrawPacMan(\n        radius, color, direction, initialMouthAngle + (360_deg - initialMouthAngle) * percentComplete, feathered);\n  }};\n}\n\nargos_lib::led::Animation argos_lib::led::animation::PacManPacing(unsigned offset,\n                                                                  unsigned width,\n                                                                  unsigned height,\n                                                                  bool rainbow,\n                                                                  frc::AddressableLED::LEDData pacManColor,\n                                                                  argos_lib::led::PrimaryScanDirection paceDirection,\n                                                                  units::millisecond_t chompPeriod,\n                                                                  units::millisecond_t moveSpeed,\n                                                                  argos_lib::led::PanelScanParams scanParams,\n                                                                  bool feathered) {\n  const unsigned pacManRadius = std::min(width, height) / 2.0;\n  const unsigned visibleTravelDist = paceDirection == argos_lib::led::PrimaryScanDirection::Horizontal ? width : height;\n  const unsigned travelDist = 4 * pacManRadius + visibleTravelDist;\n  const units::millisecond_t dyingTime = travelDist * moveSpeed;\n  const unsigned pipRadius = 1;  // std::max(1U, std::min(width, height) / 4);\n  const unsigned pipSpacing = pipRadius * 6;\n  const unsigned numPips = std::max(1U, visibleTravelDist / pipSpacing);\n  const unsigned firstPipOffset = std::round((visibleTravelDist / 2.0) - (((numPips - 1) / 2.0) * pipSpacing));\n\n  return argos_lib::led::Animation{\n      std::function&lt;Strip()&gt;([width,\n                              height,\n                              rainbow,\n                              pacManColor,\n                              paceDirection,\n                              chompPeriod,\n                              moveSpeed,\n                              scanParams,\n                              feathered,\n                              pacManRadius,\n                              travelDist,\n                              dyingTime,\n                              pipRadius,\n                              pipSpacing,\n                              numPips,\n                              drawnPips = numPips,\n                              firstPipOffset,\n                              paceIndex = 0,\n                              deathIndex = std::rand() % 5 + 2,\n                              dying = false,\n                              startTime = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(\n                                  std::chrono::steady_clock::now().time_since_epoch()),\n                              pacManSprite =\n                                  ChompingPacMan(pacManRadius, pacManColor, 0_deg, chompPeriod, false)]() mutable {\n        // Canvas must be redrawn every time to prevent possible smearing\n        Panel canvas{width, height, {}};\n\n        const frc::AddressableLED::LEDData pipColor{255, 255, 255};\n\n        const auto now =\n            std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now().time_since_epoch());\n        const auto cumulativeTime = units::millisecond_t(now - startTime);\n        const auto oldPaceIndex = paceIndex;\n        paceIndex = units::math::floor(cumulativeTime / dyingTime);\n        const auto timeInLap = units::math::fmod(cumulativeTime, dyingTime);\n        float paceDist = (timeInLap / moveSpeed).to&lt;float&gt;();\n\n        auto paceOrientation = 0_deg;\n        const auto orientationIndex = paceIndex == deathIndex ? paceIndex - 1 : paceIndex;\n        {\n          if (paceDirection == argos_lib::led::PrimaryScanDirection::Horizontal) {\n            if (orientationIndex % 2 == 0) {\n              // Right\n              paceOrientation = 0_deg;\n            } else {\n              // Left\n              paceOrientation = 180_deg;\n            }\n          } else {\n            if (orientationIndex % 2 == 0) {\n              // Up\n              paceOrientation = 90_deg;\n            } else {\n              // Down\n              paceOrientation = 270_deg;\n            }\n          }\n        }\n\n        bool wasDying = dying;\n        dying =\n            paceIndex &gt;= deathIndex || (paceIndex == (deathIndex - 1) &amp;&amp; paceDist &gt;= (travelDist - (4 * pacManRadius)));\n        if (dying &amp;&amp; !wasDying) {\n          pacManSprite = DyingPacMan(pacManRadius, pacManColor, paceOrientation, 90_deg, dyingTime, feathered);\n        }\n\n        // Draw wall for PacMan to hit\n        if (paceIndex &gt;=\n            deathIndex - 1) {  // There's an extra pace during death animation.  Don't want wall to move then\n          if (paceDirection == argos_lib::led::PrimaryScanDirection::Horizontal) {\n            DrawRectangle(canvas,\n                          1,\n                          canvas.Height(),\n                          orientationIndex % 2 == 0 ? canvas.Width() : 0,\n                          canvas.Height() / 2.0,\n                          {255, 255, 255});\n          } else {\n            DrawRectangle(canvas,\n                          canvas.Width(),\n                          1,\n                          canvas.Width() / 2.0,\n                          orientationIndex % 2 == 0 ? canvas.Height() : 0,\n                          {255, 255, 255});\n          }\n        }\n\n        if (paceIndex &gt; deathIndex) {\n          // Animation complete. Reset for next loop\n          startTime = now;\n          deathIndex = std::rand() % 5 + 2;\n          if (rainbow) {\n            pacManColor.SetHSV(std::rand() % 180, 255, 255);\n          }\n          dying = false;\n          paceIndex = 1000;  // Set to something that indicates next loop to re-generate sprite animations.\n          return Serialize(canvas, scanParams);\n        }\n        // Extra pace time to finish death animation\n        if (paceIndex == deathIndex || dying) {\n          // Even indices are right or up, odd are left or down\n          if (paceDirection == argos_lib::led::PrimaryScanDirection::Horizontal) {\n            RenderSprite(canvas,\n                         pacManSprite(),\n                         orientationIndex % 2 == 0 ? canvas.Width() - pacManRadius : pacManRadius,\n                         canvas.Height() / 2.0);\n          } else {\n            RenderSprite(canvas,\n                         pacManSprite(),\n                         canvas.Width() / 2.0,\n                         orientationIndex % 2 == 0 ? canvas.Height() - pacManRadius : pacManRadius);\n          }\n          return Serialize(canvas, scanParams);\n        }\n\n        if (oldPaceIndex != paceIndex) {\n          // Update animated sprite direction\n          pacManSprite = ChompingPacMan(pacManRadius, pacManColor, paceOrientation, chompPeriod, feathered);\n        }\n\n        // Draw pips\n        auto prevDrawnPips = drawnPips;\n        drawnPips = 0;\n        for (unsigned pipIndex = 0; pipIndex &lt; numPips; ++pipIndex) {\n          unsigned pipOffset = firstPipOffset + pipIndex * pipSpacing;\n          if (paceDist - 2 * pacManRadius &lt; pipOffset) {\n            // Pip has not been chomped yet\n            ++drawnPips;\n            if (paceDirection == argos_lib::led::PrimaryScanDirection::Horizontal) {\n              if (orientationIndex % 2 == 0) {\n                // Right\n                DrawCircle(canvas, pipRadius, pipOffset, canvas.Height() / 2.0, pipColor, feathered);\n              } else {\n                // Left\n                DrawCircle(\n                    canvas, pipRadius, canvas.Width() - 1 - pipOffset, canvas.Height() / 2.0, pipColor, feathered);\n              }\n            } else {\n              if (orientationIndex % 2 == 0) {\n                // Up\n                DrawCircle(canvas, pipRadius, canvas.Width() / 2.0, pipOffset, pipColor, feathered);\n              } else {\n                // Down\n                DrawCircle(\n                    canvas, pipRadius, canvas.Width() / 2.0, canvas.Height() - 1 - pipOffset, pipColor, feathered);\n              }\n            }\n          }\n        }\n\n        if (drawnPips &lt; prevDrawnPips &amp;&amp; rainbow) {\n          pacManColor.SetHSV(std::rand() % 180, 255, 255);\n          pacManSprite = ChompingPacMan(pacManRadius, pacManColor, paceOrientation, chompPeriod, feathered);\n        }\n\n        // Finally draw PacMan!\n        if (paceDirection == argos_lib::led::PrimaryScanDirection::Horizontal) {\n          if (orientationIndex % 2 == 0) {\n            // Right\n            RenderSprite(canvas, pacManSprite(), paceDist - 2.0 * pacManRadius, canvas.Height() / 2.0);\n          } else {\n            // Left\n            RenderSprite(canvas,\n                         pacManSprite(),\n                         static_cast&lt;float&gt;(canvas.Width()) - 1.0 - paceDist + 2 * pacManRadius,\n                         canvas.Height() / 2.0);\n          }\n        } else {\n          if (orientationIndex % 2 == 0) {\n            // Up\n            RenderSprite(canvas, pacManSprite(), canvas.Width() / 2.0, paceDist - 2 * pacManRadius);\n          } else {\n            // Down\n            RenderSprite(canvas,\n                         pacManSprite(),\n                         canvas.Width() / 2.0,\n                         static_cast&lt;float&gt;(canvas.Height()) - 1.0 - paceDist + 2.0 * pacManRadius);\n          }\n        }\n\n        return Serialize(canvas, scanParams);\n      }),\n      width * height,\n      offset};\n}\n\nvoid argos_lib::led::animation::DrawRectangle(\n    Panel&amp; dest, unsigned rectWidth, unsigned rectHeight, float x, float y, frc::AddressableLED::LEDData color) {\n  // Need to protect against addressing pixels outside the bounds of the panel\n  for (unsigned ix = std::max(0.0, x - (rectWidth / 2.0));\n       ix &lt; std::min(dest.Width(), static_cast&lt;unsigned&gt;(std::round(x + (rectWidth / 2.0))));\n       ++ix) {\n    for (unsigned iy = std::max(0.0, y - (rectHeight / 2.0));\n         iy &lt; std::min(dest.Height(), static_cast&lt;unsigned&gt;(std::round(y + (rectHeight / 2.0))));\n         ++iy) {\n      dest.at(ix, iy) = color;\n    }\n  }\n}\n\nvoid argos_lib::led::animation::DrawCircle(\n    Panel&amp; dest, float radius, float x, float y, frc::AddressableLED::LEDData color, bool feathered) {\n  const auto circle = DrawCircleSprite(radius, color, feathered);\n  RenderSprite(dest, circle, x, y, 1.0);\n}\n\nargos_lib::led::Sprite argos_lib::led::animation::DrawCircleSprite(float radius,\n                                                                   frc::AddressableLED::LEDData color,\n                                                                   bool feathered) {\n  const unsigned boundingSquareDim = std::ceil(radius * 2);\n  // Just fill everything and we'll make it transparent\n  auto colors = argos_lib::led::Panel(boundingSquareDim, boundingSquareDim, color);\n  auto alpha = argos_lib::led::Mask(boundingSquareDim, boundingSquareDim, 0.0);\n\n  float center = boundingSquareDim / 2.0;\n  float radiusSquared = radius * radius;\n\n  for (unsigned x = 0; x &lt; boundingSquareDim; ++x) {\n    for (unsigned y = 0; y &lt; boundingSquareDim; ++y) {\n      double dx = x - center;\n      double dy = y - center;\n      double distanceSquared = dx * dx + dy * dy;\n\n      if (distanceSquared &lt;= radiusSquared) {\n        alpha.at(x, y) = 1;\n      } else if (feathered) {\n        alpha.at(x, y) = std::max(0.0, 1.0 - distanceSquared - radiusSquared);\n      }\n    }\n  }\n\n  return Sprite{colors, alpha};\n}\n\nvoid argos_lib::led::animation::RenderSprite(Panel&amp; dest, const Sprite&amp; sprite, float x, float y, float alpha) {\n  const int xAlign = std::round(x - sprite.colors.Width() / 2.0);\n  const int yAlign = std::round(y - sprite.colors.Height() / 2.0);\n\n  const unsigned firstSpriteX = std::max(0, -xAlign);\n  const unsigned firstSpriteY = std::max(0, -yAlign);\n\n  const unsigned firstPanelX = std::max(0, xAlign);\n  const unsigned firstPanelY = std::max(0, yAlign);\n\n  for (unsigned x = 0; x + firstSpriteX &lt; sprite.colors.Width() &amp;&amp; x + firstPanelX &lt; dest.Width(); ++x) {\n    for (unsigned y = 0; y + firstSpriteY &lt; sprite.colors.Height() &amp;&amp; y + firstPanelY &lt; dest.Height(); ++y) {\n      frc::AddressableLED::LEDData&amp; destPixel = dest.at(x + firstPanelX, y + firstPanelY);\n      const float spritePixelAlpha = sprite.alpha.at(x + firstSpriteX, y + firstSpriteY) * alpha;\n      const frc::AddressableLED::LEDData spritePixelColor = sprite.colors.at(x + firstSpriteX, y + firstSpriteY);\n\n      destPixel =\n          frc::AddressableLED::LEDData(destPixel.r * (1.0 - spritePixelAlpha) + spritePixelColor.r * spritePixelAlpha,\n                                       destPixel.g * (1.0 - spritePixelAlpha) + spritePixelColor.g * spritePixelAlpha,\n                                       destPixel.b * (1.0 - spritePixelAlpha) + spritePixelColor.b * spritePixelAlpha);\n    }\n  }\n}\n\nargos_lib::led::Sprite argos_lib::led::animation::DrawPacMan(float radius,\n                                                             frc::AddressableLED::LEDData color,\n                                                             units::degree_t direction,\n                                                             units::degree_t mouthAngle,\n                                                             bool feathered) {\n  Sprite pacMan = DrawCircleSprite(radius, color, feathered);\n\n  // Closed mouth is a normal circle\n  if (mouthAngle &lt;= 3_deg) {\n    return pacMan;\n  }\n\n  // Dead PacMan :(\n  if (mouthAngle &gt;= 360_deg) {\n    pacMan.alpha = Mask(pacMan.alpha.Width(), pacMan.alpha.Height(), 0.0);\n    return pacMan;\n  }\n\n  const auto halfMouthAngle = mouthAngle / 2.0;\n  const auto mouthMax = direction + halfMouthAngle;\n  const auto mouthMin = direction - halfMouthAngle;\n\n  for (unsigned x = 0; x &lt; pacMan.alpha.Width(); ++x) {\n    for (unsigned y = 0; y &lt; pacMan.alpha.Height(); ++y) {\n      auto&amp; alpha = pacMan.alpha.at(x, y);\n      // Skip pixels that aren't part of closed-mouth PacMan\n      if (alpha &gt; 0) {\n        units::degree_t normalizedPixelAngle = argos_lib::angle::ConstrainAngle(\n            units::radian_t(std::atan2(y - pacMan.alpha.Height() / 2.0, x - pacMan.alpha.Width() / 2.0)),\n            direction - 180_deg,\n            direction + 180_deg);\n        if (normalizedPixelAngle &lt; mouthMax &amp;&amp; normalizedPixelAngle &gt; mouthMin) {\n          alpha = 0;\n        } else if (feathered) {\n          // +/- 5_deg fade to soften\n          alpha = std::min(1.0f,\n                           ((units::math::abs(normalizedPixelAngle - direction) - halfMouthAngle) / 5_deg).to&lt;float&gt;());\n        }\n      }\n    }\n  }\n\n  return pacMan;\n}\n</code></pre>"},{"location":"argos-lib/geometry_8cpp.html","title":"File geometry.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; led &gt; geometry.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/led/geometry.h\"</code></li> <li><code>#include &lt;algorithm&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/led/geometry.cpp</code></p>"},{"location":"argos-lib/geometry_8cpp_source.html","title":"File geometry.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; led &gt; geometry.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/led/geometry.h\"\n\n#include &lt;algorithm&gt;\n\nunits::degree_t argos_lib::led::FlipHorizontal(units::degree_t incidentAngle) {\n  return 360_deg - incidentAngle;\n}\n\nunits::degree_t argos_lib::led::FlipVertical(units::degree_t inicidentAngle) {\n  return 180_deg - inicidentAngle;\n}\n\nbool argos_lib::led::PointInBox(\n    float corner1X, float corner1Y, float corner2X, float corner2Y, float pointX, float pointY) {\n  // Allow user to specify any two opposite corners of the axis-aligned bounding box and extract\n  // the minimum and maximum x/y coordinates\n  const auto [minX, maxX] = std::minmax(corner1X, corner2X);\n  const auto [minY, maxY] = std::minmax(corner1Y, corner2Y);\n\n  return pointX &gt;= minX &amp;&amp; pointX &lt;= maxX &amp;&amp; pointY &gt;= minY &amp;&amp; pointY &lt;= maxY;\n}\n\nstd::optional&lt;std::pair&lt;float, float&gt;&gt; argos_lib::led::SegmentIntersection(\n    float s1x1, float s1y1, float s1x2, float s1y2, float s2x1, float s2y1, float s2x2, float s2y2) {\n  // Get slope-intercept (y=mx+c) form of line colinear with each segment\n  float slope1 = (s1y2 - s1y1) / (s1x2 - s1x1);\n  float intercept1 = s1y1 - slope1 * s1x1;\n\n  float slope2 = (s2y2 - s2y1) / (s2x2 - s2x1);\n  float intercept2 = s2y1 - slope2 * s2x1;\n\n  // If segments are colinear, there is no singular intersection point\n  if (std::abs(slope1 - slope2) &lt;= std::numeric_limits&lt;float&gt;::epsilon()) {\n    return std::nullopt;\n  }\n\n  float intersectX = 0;\n  float intersectY = 0;\n\n  if (std::abs(s1x1 - s1x2) &lt;= std::numeric_limits&lt;float&gt;::epsilon()) {\n    // First segment is vertical\n    intersectX = s1x1;\n    intersectY = slope2 * intersectX + intercept2;\n  } else if (std::abs(s2x1 - s2x2) &lt;= std::numeric_limits&lt;float&gt;::epsilon()) {\n    // Second segment is vertical\n    intersectX = s2x1;\n    intersectY = slope1 * intersectX + intercept1;\n  } else {\n    // Both segments have defined slope\n    intersectX = (intercept2 - intercept1) / (slope1 - slope2);\n    intersectY = slope1 * intersectX + intercept1;\n  }\n\n  // Once we know the lines intersect, ensure the intersection point is within the bounds of both segments\n  if (PointInBox(s1x1, s1y1, s1x2, s1y2, intersectX, intersectY) &amp;&amp;\n      PointInBox(s2x1, s2y1, s2x2, s2y2, intersectX, intersectY)) {\n    return std::make_pair(intersectX, intersectY);\n  }\n  return std::nullopt;\n}\n</code></pre>"},{"location":"argos-lib/panel_8cpp.html","title":"File panel.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; led &gt; panel.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/led/panel.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/led/panel.cpp</code></p>"},{"location":"argos-lib/panel_8cpp_source.html","title":"File panel.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; led &gt; panel.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/led/panel.h\"\n\nargos_lib::led::Strip argos_lib::led::Serialize(const argos_lib::led::Panel&amp; panel,\n                                                const argos_lib::led::PanelScanParams&amp; params) {\n  unsigned width = panel.Width();\n  unsigned height = panel.Height();\n  Strip serializedStrip(width * height);  // Allocate memory once\n\n  // Each case is a little different, but if you consider the TopRight, Horizontal case, addressing\n  // looks like this in a 4x3 panel\n  //     ________________\n  //  V |  3   2   1   0 | &lt;\n  //  &gt; |  4   5   6   7 | V\n  //    | 11  10   9   8 | &lt;\n  //     ----------------\n  //\n  // Notice consistent scan direction in secondary scan direction (vertical down), but alternating\n  // direction in the primary scan direction (horizontal starting left) on adjacent rows.\n\n  switch (params.firstPixel) {\n    case FirstPixelPosition::TopRight:\n      if (PrimaryScanDirection::Horizontal == params.scanDirection) {\n        unsigned stripIndex = 0;\n        for (unsigned y = height; y &gt; 0; --y) {\n          for (unsigned x = width; x &gt; 0; --x) {\n            serializedStrip[stripIndex++] = panel.at(y % 2 == 0 ? x - 1 : width - x, y - 1);\n          }\n        }\n      } else {\n        unsigned stripIndex = 0;\n        for (unsigned x = width; x &gt; 0; --x) {\n          for (unsigned y = height; y &gt; 0; --y) {\n            serializedStrip[stripIndex++] = panel.at(x - 1, x % 2 == 0 ? y - 1 : height - y);\n          }\n        }\n      }\n      break;\n    case FirstPixelPosition::TopLeft:\n      if (PrimaryScanDirection::Horizontal == params.scanDirection) {\n        unsigned stripIndex = 0;\n        for (unsigned y = height; y &gt; 0; --y) {\n          for (unsigned x = 0; x &lt; width; ++x) {\n            serializedStrip[stripIndex++] = panel.at(y % 2 == 0 ? x : width - x - 1, y - 1);\n          }\n        }\n      } else {\n        unsigned stripIndex = 0;\n        for (unsigned x = 0; x &lt; width; ++x) {\n          for (unsigned y = height; y &gt; 0; --y) {\n            serializedStrip[stripIndex++] = panel.at(x, x % 2 == 0 ? y - 1 : height - y);\n          }\n        }\n      }\n      break;\n    case FirstPixelPosition::BottomLeft:\n      if (PrimaryScanDirection::Horizontal == params.scanDirection) {\n        unsigned stripIndex = 0;\n        for (unsigned y = 0; y &lt; height; ++y) {\n          for (unsigned x = 0; x &lt; width; ++x) {\n            serializedStrip[stripIndex++] = panel.at(y % 2 == 0 ? x : width - x - 1, y);\n          }\n        }\n      } else {\n        unsigned stripIndex = 0;\n        for (unsigned x = 0; x &lt; width; ++x) {\n          for (unsigned y = 0; y &lt; height; ++y) {\n            serializedStrip[stripIndex++] = panel.at(x, x % 2 == 0 ? y : height - y - 1);\n          }\n        }\n      }\n      break;\n    case FirstPixelPosition::BottomRight:\n      if (PrimaryScanDirection::Horizontal == params.scanDirection) {\n        unsigned stripIndex = 0;\n        for (unsigned y = 0; y &lt; height; ++y) {\n          for (unsigned x = width; x &gt; 0; --x) {\n            serializedStrip[stripIndex++] = panel.at(y % 2 == 0 ? x - 1 : width - x, y);\n          }\n        }\n      } else {\n        unsigned stripIndex = 0;\n        for (unsigned x = width; x &gt; 0; ++x) {\n          for (unsigned y = 0; y &lt; height; ++y) {\n            serializedStrip[stripIndex++] = panel.at(x - 1, x % 2 == 0 ? y : height - y - 1);\n          }\n        }\n      }\n      break;\n  }\n  return serializedStrip;\n}\n</code></pre>"},{"location":"argos-lib/dir_0a6d697c01cca447b97a2967adff34af.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/subsystems","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; subsystems</p>"},{"location":"argos-lib/dir_0a6d697c01cca447b97a2967adff34af.html#files","title":"Files","text":"Type Name file led_subsystem.cpp file swappable_controllers_subsystem.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/subsystems/</code></p>"},{"location":"argos-lib/led__subsystem_8cpp.html","title":"File led_subsystem.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; subsystems &gt; led_subsystem.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/subsystems/led_subsystem.h\"</code></li> <li><code>#include &lt;algorithm&gt;</code></li> </ul>"},{"location":"argos-lib/led__subsystem_8cpp.html#public-functions","title":"Public Functions","text":"Type Name bool operator!= (const frc::AddressableLED::LEDData &amp; a, const frc::AddressableLED::LEDData &amp; b)  bool operator== (const frc::AddressableLED::LEDData &amp; a, const frc::AddressableLED::LEDData &amp; b)"},{"location":"argos-lib/led__subsystem_8cpp.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/led__subsystem_8cpp.html#function-operator","title":"function operator!=","text":"<pre><code>bool operator!= (\n    const frc::AddressableLED::LEDData &amp; a,\n    const frc::AddressableLED::LEDData &amp; b\n) \n</code></pre>"},{"location":"argos-lib/led__subsystem_8cpp.html#function-operator_1","title":"function operator==","text":"<pre><code>bool operator== (\n    const frc::AddressableLED::LEDData &amp; a,\n    const frc::AddressableLED::LEDData &amp; b\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/subsystems/led_subsystem.cpp</code></p>"},{"location":"argos-lib/led__subsystem_8cpp_source.html","title":"File led_subsystem.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; subsystems &gt; led_subsystem.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/subsystems/led_subsystem.h\"\n\n#include &lt;algorithm&gt;\n\nusing namespace argos_lib;\n\nbool operator==(const frc::AddressableLED::LEDData&amp; a, const frc::AddressableLED::LEDData&amp; b) {\n  return a.r == b.r &amp;&amp; a.g == b.g &amp;&amp; a.b == b.b;\n}\n\nbool operator!=(const frc::AddressableLED::LEDData&amp; a, const frc::AddressableLED::LEDData&amp; b) {\n  return !(a == b);\n}\n\nbool LEDState::operator==(const LEDState&amp; other) const {\n  return animated == other.animated &amp;&amp; color == other.color;\n}\nbool LEDState::operator!=(const LEDState&amp; other) const {\n  return !operator==(other);\n}\n\nLEDState&amp; LEDState::operator=(const frc::AddressableLED::LEDData&amp; other) {\n  color = other;\n  return *this;\n}\n\nLEDSubsystem::LEDSubsystem(unsigned numAuxLEDs)\n    : m_currentLEDs{numAuxLEDs + numIntegratedLEDs}\n    , m_prevLEDs{numAuxLEDs + numIntegratedLEDs}\n    , m_controller{1, \"rio\"} {}\n\nvoid LEDSubsystem::Periodic() {\n  // Use animation functions to determine all new LED states\n  for (auto&amp; animation : m_customAnimations) {\n    const auto animatedString = animation.update();\n    std::copy_n(animatedString.begin(), animation.numLEDs, std::next(m_currentLEDs.begin(), animation.offset));\n  }\n  // Only send updates for LEDs that changed to reduce CAN messages\n  const auto updatesToSend = GetDeltaUpdate(m_prevLEDs, m_currentLEDs);\n  for (const auto&amp; update : updatesToSend) {\n    m_controller.SetLEDs(update.color.r, update.color.g, update.color.b, 0, update.startIndex, update.numLEDs);\n  }\n  m_prevLEDs = m_currentLEDs;\n}\n\nvoid LEDSubsystem::StockAnimateAuxLEDs(ctre::phoenix::led::Animation&amp; animation, int slot) {\n  animation.SetLedOffset(animation.GetLedOffset() + numIntegratedLEDs);\n  std::fill_n(std::next(m_currentLEDs.begin(), animation.GetLedOffset()), animation.GetNumLed(), LEDState{true, {}});\n  m_controller.Animate(animation, slot);\n}\n\nvoid LEDSubsystem::StockAnimateIntegratedLEDs(ctre::phoenix::led::Animation&amp; animation, int slot) {\n  // Ensure we stay within the number of LEDs in this subsystem\n  std::fill_n(m_currentLEDs.begin(), numIntegratedLEDs, LEDState{true, {}});\n  animation.SetNumLed(numIntegratedLEDs);\n  animation.SetLedOffset(0);\n  m_controller.Animate(animation, slot);\n}\n\nvoid LEDSubsystem::CustomAnimateAuxLEDs(argos_lib::led::Animation animation) {\n  // Ensure we stay within the number of LEDs in this subsystem\n  animation.offset += numIntegratedLEDs;\n  animation.numLEDs = std::min&lt;size_t&gt;(std::max&lt;size_t&gt;(0, m_currentLEDs.size() - animation.offset), animation.numLEDs);\n  std::fill_n(std::next(m_currentLEDs.begin(), animation.offset), animation.numLEDs, LEDState{false, {}});\n  m_customAnimations.push_back(animation);\n}\n\nvoid LEDSubsystem::CustomAnimateIntegratedLEDs(argos_lib::led::Animation animation) {\n  // Ensure this animation doesn't go past the integrated LED addresses\n  if (animation.numLEDs &gt; numIntegratedLEDs) {\n    animation.numLEDs = numIntegratedLEDs;\n  }\n  animation.offset = 0;\n  std::fill_n(m_currentLEDs.begin(), animation.numLEDs, LEDState{false, {}});\n  m_customAnimations.push_back(animation);\n}\n\nstd::vector&lt;LEDSubsystem::LEDUpdateGroup&gt; LEDSubsystem::GetDeltaUpdate(const std::vector&lt;LEDState&gt;&amp; prev,\n                                                                       const std::vector&lt;LEDState&gt;&amp; current) {\n  std::vector&lt;bool&gt; changed(current.size());\n  // Only update LEDs that changed and are not using built-in animations\n  std::transform(\n      prev.begin(), prev.end(), current.begin(), changed.begin(), [](const LEDState&amp; prev, const LEDState&amp; current) {\n        return current.animated == false &amp;&amp; current != prev;\n      });\n\n  // Find blocks of identical colors\n  auto searchStart = current.begin();\n  std::vector&lt;LEDSubsystem::LEDUpdateGroup&gt; retVal;\n  while (searchStart != current.end()) {\n    auto rangeEnd =\n        std::adjacent_find(searchStart, current.end(), [](const LEDState&amp; a, const LEDState&amp; b) { return a != b; });\n    if (rangeEnd == current.end()) {\n      rangeEnd = std::prev(rangeEnd);\n    }\n    unsigned numLEDs = std::distance(searchStart, rangeEnd) + 1;\n    unsigned offset = std::distance(current.begin(), searchStart);\n    // Skip updates for sections that we shouldn't be updating\n    if (std::any_of(std::next(changed.begin(), offset), std::next(changed.begin(), offset + numLEDs), [](bool changed) {\n          return changed;\n        })) {\n      retVal.emplace_back(offset, numLEDs, searchStart-&gt;color);\n    }\n    searchStart = std::next(rangeEnd);\n  }\n  return retVal;\n}\n</code></pre>"},{"location":"argos-lib/swappable__controllers__subsystem_8cpp.html","title":"File swappable_controllers_subsystem.cpp","text":"<p>FileList &gt; argos_lib &gt; cpp &gt; subsystems &gt; swappable_controllers_subsystem.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/subsystems/swappable_controllers_subsystem.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/subsystems/swappable_controllers_subsystem.cpp</code></p>"},{"location":"argos-lib/swappable__controllers__subsystem_8cpp_source.html","title":"File swappable_controllers_subsystem.cpp","text":"<p>File List &gt; argos_lib &gt; cpp &gt; subsystems &gt; swappable_controllers_subsystem.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"argos_lib/subsystems/swappable_controllers_subsystem.h\"\n\nusing namespace argos_lib;\n\nSwappableControllersSubsystem::SwappableControllersSubsystem(int driverControllerPort, int operatorControllerPort)\n    : m_driverController(driverControllerPort), m_operatorController(operatorControllerPort), m_swapped(false) {}\n\nvoid SwappableControllersSubsystem::Swap() {\n  m_driverController.SwapSettings(m_operatorController);\n  m_swapped = !m_swapped;\n}\n\nXboxController&amp; SwappableControllersSubsystem::DriverController() {\n  return m_swapped ? m_operatorController : m_driverController;\n}\nXboxController&amp; SwappableControllersSubsystem::OperatorController() {\n  return m_swapped ? m_driverController : m_operatorController;\n}\n\nvoid SwappableControllersSubsystem::Periodic() {\n  UpdateVibration();\n}\n\nvoid SwappableControllersSubsystem::VibrateAll(VibrationModel newModel) {\n  m_driverController.SetVibration(newModel);\n  m_operatorController.SetVibration(newModel);\n}\n\nvoid SwappableControllersSubsystem::UpdateVibration() {\n  m_driverController.UpdateVibration();\n  m_operatorController.UpdateVibration();\n}\n</code></pre>"},{"location":"argos-lib/dir_0330651415bf66743a1cd99e3d0db0bc.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include","text":"<p>FileList &gt; argos_lib &gt; include</p>"},{"location":"argos-lib/dir_0330651415bf66743a1cd99e3d0db0bc.html#directories","title":"Directories","text":"Type Name dir argos_lib <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/</code></p>"},{"location":"argos-lib/dir_934baf9e7d2bb4710ca41f9f25ef3ea4.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib</p>"},{"location":"argos-lib/dir_934baf9e7d2bb4710ca41f9f25ef3ea4.html#directories","title":"Directories","text":"Type Name dir commands dir config dir controller dir general dir homing dir led dir subsystems dir testing <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/</code></p>"},{"location":"argos-lib/dir_b5b6a4436ac847838034b63997323b48.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/commands","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; commands</p>"},{"location":"argos-lib/dir_b5b6a4436ac847838034b63997323b48.html#files","title":"Files","text":"Type Name file swap_controllers_command.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/commands/</code></p>"},{"location":"argos-lib/swap__controllers__command_8h.html","title":"File swap_controllers_command.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; commands &gt; swap_controllers_command.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/Command.h&gt;</code></li> <li><code>#include &lt;frc2/command/CommandHelper.h&gt;</code></li> <li><code>#include \"argos_lib/subsystems/swappable_controllers_subsystem.h\"</code></li> </ul>"},{"location":"argos-lib/swap__controllers__command_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/swap__controllers__command_8h.html#classes","title":"Classes","text":"Type Name class SwapControllersCommand Swaps rolls of two controllers. Useful if one controller breaks during a match. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/commands/swap_controllers_command.h</code></p>"},{"location":"argos-lib/swap__controllers__command_8h_source.html","title":"File swap_controllers_command.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; commands &gt; swap_controllers_command.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc2/command/Command.h&gt;\n#include &lt;frc2/command/CommandHelper.h&gt;\n\n#include \"argos_lib/subsystems/swappable_controllers_subsystem.h\"\n\nnamespace argos_lib {\n\n  class SwapControllersCommand : public frc2::CommandHelper&lt;frc2::Command, SwapControllersCommand&gt; {\n   public:\n    explicit SwapControllersCommand(SwappableControllersSubsystem* controllers);\n\n    void Initialize() override;\n\n    void End(bool) override;\n\n   private:\n    SwappableControllersSubsystem* m_pControllerSubsystem;\n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_297090c629331b6211a5a9bae4ee7118.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config</p>"},{"location":"argos-lib/dir_297090c629331b6211a5a9bae4ee7118.html#files","title":"Files","text":"Type Name file cancoder_config.h file compile_time_member_check.h file config_types.h file falcon_config.h file status_frame_config.h file talonsrx_config.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/</code></p>"},{"location":"argos-lib/cancoder__config_8h.html","title":"File cancoder_config.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; cancoder_config.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;units/time.h&gt;</code></li> <li><code>#include &lt;ctre/phoenix6/CANcoder.hpp&gt;</code></li> <li><code>#include \"compile_time_member_check.h\"</code></li> </ul>"},{"location":"argos-lib/cancoder__config_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace cancoder_config <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/cancoder_config.h</code></p>"},{"location":"argos-lib/cancoder__config_8h_source.html","title":"File cancoder_config.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; cancoder_config.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;units/time.h&gt;\n\n#include &lt;ctre/phoenix6/CANcoder.hpp&gt;\n\n#include \"compile_time_member_check.h\"\n\nnamespace argos_lib {\n  namespace cancoder_config {\n    using CANcoder = ctre::phoenix6::hardware::CANcoder;\n\n    HAS_MEMBER(direction)\n    HAS_MEMBER(magOffset)\n    HAS_MEMBER(absoluteSensorDiscontinuityPoint)\n\n\n    template &lt;typename T&gt;\n    bool CanCoderConfig(CANcoder&amp; encoder, units::millisecond_t configTimeout) {\n      ctre::phoenix6::configs::CANcoderConfiguration config;\n      encoder.GetConfigurator().Refresh(config.MagnetSensor, configTimeout);\n\n      if constexpr (has_direction&lt;T&gt;{}) {\n        config.MagnetSensor.SensorDirection = T::direction;\n      }\n      if constexpr (has_absoluteSensorDiscontinuityPoint&lt;T&gt;{}) {\n        config.MagnetSensor.AbsoluteSensorDiscontinuityPoint = T::absoluteSensorDiscontinuityPoint;\n      }\n      if constexpr (has_magOffset&lt;T&gt;{}) {\n        config.MagnetSensor.WithMagnetOffset = T::magOffset;\n      }\n\n      return ctre::phoenix::StatusCode::OK == encoder.GetConfigurator().Apply(config, configTimeout);\n    }\n\n    template &lt;typename CompetitionConfig, typename PracticeConfig&gt;\n    bool CanCoderConfig(CANcoder&amp; encoder, units::millisecond_t configTimeout, argos_lib::RobotInstance instance) {\n      switch (instance) {\n        case argos_lib::RobotInstance::Competition:\n          return CanCoderConfig&lt;CompetitionConfig&gt;(encoder, configTimeout);\n          break;\n        case argos_lib::RobotInstance::Practice:\n          return CanCoderConfig&lt;PracticeConfig&gt;(encoder, configTimeout);\n          break;\n      }\n      return false;\n    }\n\n  }  // namespace cancoder_config\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/compile__time__member__check_8h.html","title":"File compile_time_member_check.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; compile_time_member_check.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;type_traits&gt;</code></li> </ul>"},{"location":"argos-lib/compile__time__member__check_8h.html#macros","title":"Macros","text":"Type Name define HAS_MEMBER (X) <code>/* multi line expression */</code>Helper function generator to detect if a namespace has a member defined."},{"location":"argos-lib/compile__time__member__check_8h.html#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"argos-lib/compile__time__member__check_8h.html#define-has_member","title":"define HAS_MEMBER","text":"<p>Helper function generator to detect if a namespace has a member defined. <pre><code>#define HAS_MEMBER (\n    X\n) `/* multi line expression */`\n</code></pre></p> <p>Copyright:</p> <p>Copyright (c) Argos FRC Team 1756. Open Source Software; you can modify and/or share it under the terms of the license file in the root directory of this project. </p> <p>Parameters:</p> <ul> <li><code>X</code> Name of member to detect </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/compile_time_member_check.h</code></p>"},{"location":"argos-lib/compile__time__member__check_8h_source.html","title":"File compile_time_member_check.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; compile_time_member_check.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;type_traits&gt;\n\n#define HAS_MEMBER(X)                    \\\n  template &lt;typename T, typename = void&gt; \\\n  struct has_##X : std::false_type {};   \\\n  template &lt;typename T&gt;                  \\\n  struct has_##X&lt;T, decltype((void)T::X, void())&gt; : std::true_type {};\n</code></pre>"},{"location":"argos-lib/config__types_8h.html","title":"File config_types.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; config_types.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string_view&gt;</code></li> </ul>"},{"location":"argos-lib/config__types_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/config__types_8h.html#classes","title":"Classes","text":"Type Name struct CANAddress <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/config_types.h</code></p>"},{"location":"argos-lib/config__types_8h_source.html","title":"File config_types.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; config_types.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;string_view&gt;\n\nnamespace argos_lib {\n  enum struct RobotInstance {\n    Competition,  \n    Practice      \n  };\n\n  RobotInstance GetRobotInstance();\n\n  struct CANAddress {\n    int address;\n    std::string_view busName;\n\n    CANAddress() = delete;\n    constexpr CANAddress(int address, const std::string_view&amp; busName = \"rio\") : address(address), busName(busName) {}\n  };\n\n  static inline int GetCANAddr(const argos_lib::CANAddress&amp; compAddress,\n                               const argos_lib::CANAddress&amp; practiceAddress,\n                               argos_lib::RobotInstance instance) {\n    return instance == argos_lib::RobotInstance::Competition ? compAddress.address : practiceAddress.address;\n  }\n\n  static inline std::string_view GetCANBus(const argos_lib::CANAddress&amp; compAddress,\n                                           const argos_lib::CANAddress&amp; practiceAddress,\n                                           argos_lib::RobotInstance instance) {\n    return instance == argos_lib::RobotInstance::Competition ? compAddress.busName : practiceAddress.busName;\n  }\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/falcon__config_8h.html","title":"File falcon_config.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; falcon_config.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;units/current.h&gt;</code></li> <li><code>#include &lt;units/time.h&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;ctre/phoenix6/TalonFX.hpp&gt;</code></li> <li><code>#include \"argos_lib/config/config_types.h\"</code></li> <li><code>#include \"compile_time_member_check.h\"</code></li> <li><code>#include \"status_frame_config.h\"</code></li> </ul>"},{"location":"argos-lib/falcon__config_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace falcon_config <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/falcon_config.h</code></p>"},{"location":"argos-lib/falcon__config_8h_source.html","title":"File falcon_config.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; falcon_config.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;units/current.h&gt;\n#include &lt;units/time.h&gt;\n\n#include &lt;iostream&gt;\n\n#include &lt;ctre/phoenix6/TalonFX.hpp&gt;\n\n#include \"argos_lib/config/config_types.h\"\n#include \"compile_time_member_check.h\"\n#include \"status_frame_config.h\"\n\nnamespace argos_lib {\n  namespace falcon_config {\n\n    HAS_MEMBER(forwardLimit_deviceID)\n    HAS_MEMBER(forwardLimit_normalState)\n    HAS_MEMBER(forwardLimit_source)\n    HAS_MEMBER(inverted)\n    HAS_MEMBER(neutralDeadband)\n    HAS_MEMBER(neutralMode)\n    HAS_MEMBER(dutyCycleNeutralDeadband)\n    HAS_MEMBER(nominalOutputForward)\n    HAS_MEMBER(nominalOutputReverse)\n    HAS_MEMBER(peakOutputForward)\n    HAS_MEMBER(peakOutputReverse)\n    HAS_MEMBER(voltageOpenLoopRampPeriod)\n    HAS_MEMBER(dutyCycleOpenLoopRampPeriod)\n    HAS_MEMBER(pid0_kP)\n    HAS_MEMBER(pid0_kI)\n    HAS_MEMBER(pid0_kD)\n    HAS_MEMBER(pid0_kS)\n    HAS_MEMBER(pid0_kV)\n    HAS_MEMBER(pid0_kA)\n    HAS_MEMBER(pid0_kG)\n    HAS_MEMBER(pid0_gravityType)\n    HAS_MEMBER(pid1_kP)\n    HAS_MEMBER(pid1_kI)\n    HAS_MEMBER(pid1_kD)\n    HAS_MEMBER(pid1_kS)\n    HAS_MEMBER(pid1_kV)\n    HAS_MEMBER(pid1_kA)\n    HAS_MEMBER(pid1_gravityType)\n    HAS_MEMBER(pid1_kG)\n    HAS_MEMBER(motionMagic_cruiseVelocity)\n    HAS_MEMBER(motionMagic_acceleration)\n    HAS_MEMBER(motionMagic_jerk)\n    HAS_MEMBER(motionMagic_expo_kV)\n    HAS_MEMBER(motionMagic_expo_kA)\n    HAS_MEMBER(reverseLimit_deviceID)\n    HAS_MEMBER(reverseLimit_normalState)\n    HAS_MEMBER(reverseLimit_source)\n    HAS_MEMBER(rotorToSensorRatio)\n    HAS_MEMBER(selectedSensor)\n    HAS_MEMBER(selectedSensor_addr)\n    HAS_MEMBER(sensorToMechanismRatio)\n    HAS_MEMBER(statorCurrentLimit)\n    HAS_MEMBER(statusFrameMotorMode)\n    HAS_MEMBER(supplyCurrentLimit)\n    HAS_MEMBER(supplyCurrentLowerLimit)\n    HAS_MEMBER(supplyCurrentLowerTime)\n\n\n    template &lt;typename T&gt;\n    bool FalconConfig(ctre::phoenix6::hardware::TalonFX&amp; motorController, units::millisecond_t configTimeout) {\n      ctre::phoenix6::configs::TalonFXConfiguration config;\n\n      if constexpr (has_inverted&lt;T&gt;{}) {\n        config.MotorOutput.Inverted = T::inverted;\n      }\n      if constexpr (has_neutralMode&lt;T&gt;{}) {\n        config.MotorOutput.NeutralMode = T::neutralMode;\n      }\n      if constexpr (has_dutyCycleNeutralDeadband&lt;T&gt;{}) {\n        config.MotorOutput.DutyCycleNeutralDeadband = T::dutyCycleNeutralDeadband;\n      }\n      if constexpr (has_selectedSensor_addr&lt;T&gt;{}) {\n        static_assert(has_selectedSensor&lt;T&gt;{} &amp;&amp;\n                          T::selectedSensor != ctre::phoenix6::signals::FeedbackSensorSourceValue::RotorSensor,\n                      \"Remote sensor required when address provided\");\n        static_assert(T::selectedSensor_addr.address &gt;= 0, \"Remote sensor address must be non-negative\");\n        config.Feedback.FeedbackRemoteSensorID = T::selectedSensor_addr.address;\n      }\n      if constexpr (has_peakOutputForward&lt;T&gt;{}) {\n        config.MotorOutput.PeakForwardDutyCycle = T::peakOutputForward;\n      }\n      if constexpr (has_peakOutputReverse&lt;T&gt;{}) {\n        config.MotorOutput.PeakReverseDutyCycle = T::peakOutputReverse;\n      }\n      if constexpr (has_voltageOpenLoopRampPeriod&lt;T&gt;{}) {\n        config.OpenLoopRamps.VoltageOpenLoopRampPeriod =\n            std::clamp&lt;units::second_t&gt;(T::voltageOpenLoopRampPeriod, 0_s, 1_s);\n      }\n      if constexpr (has_dutyCycleOpenLoopRampPeriod&lt;T&gt;{}) {\n        config.OpenLoopRamps.DutyCycleOpenLoopRampPeriod =\n            std::clamp&lt;units::second_t&gt;(T::dutyCycleOpenLoopRampPeriod, 0_s, 1_s);\n      }\n      if constexpr (has_selectedSensor&lt;T&gt;{}) {\n        config.Feedback.FeedbackSensorSource = T::selectedSensor;\n        if constexpr (T::selectedSensor == ctre::phoenix6::signals::FeedbackSensorSourceValue::FusedCANcoder) {\n          static_assert(has_sensorToMechanismRatio&lt;T&gt;{}, \"Fused CANcoder mode requires sensor to mechanism ratio\");\n          static_assert(has_rotorToSensorRatio&lt;T&gt;{}, \"Fused CANcoder mode requires rotor to sensor ratio\");\n          static_assert(T::sensorToMechanismRatio &gt; 0, \"sensorToMechanismRatio must be a positive value\");\n          static_assert(T::rotorToSensorRatio &gt; 0, \"rotorToSensorRatio must be a positive value\");\n          config.Feedback.SensorToMechanismRatio = T::sensorToMechanismRatio;\n          config.Feedback.RotorToSensorRatio = T::rotorToSensorRatio;\n        }\n      }\n      if constexpr (has_pid0_kP&lt;T&gt;{}) {\n        config.Slot0.kP = T::pid0_kP;\n      }\n      if constexpr (has_pid0_kI&lt;T&gt;{}) {\n        config.Slot0.kI = T::pid0_kI;\n      }\n      if constexpr (has_pid0_kD&lt;T&gt;{}) {\n        config.Slot0.kD = T::pid0_kD;\n      }\n      if constexpr (has_pid0_kS&lt;T&gt;{}) {\n        config.Slot0.kS = T::pid0_kS;\n      }\n      if constexpr (has_pid0_kV&lt;T&gt;{}) {\n        config.Slot0.kV = T::pid0_kV;\n      }\n      if constexpr (has_pid0_kA&lt;T&gt;{}) {\n        config.Slot0.kA = T::pid0_kA;\n      }\n      if constexpr (has_pid0_kG&lt;T&gt;{} &amp;&amp; has_pid0_gravityType&lt;T&gt;{}) {\n        config.Slot0.kG = T::pid0_kG;\n        config.Slot0.GravityType = T::pid0_gravityType;\n      }\n      if constexpr (has_pid1_kP&lt;T&gt;{}) {\n        config.Slot1.kP = T::pid1_kP;\n      }\n      if constexpr (has_pid1_kI&lt;T&gt;{}) {\n        config.Slot1.kI = T::pid1_kI;\n      }\n      if constexpr (has_pid1_kD&lt;T&gt;{}) {\n        config.Slot1.kD = T::pid1_kD;\n      }\n      if constexpr (has_pid1_kS&lt;T&gt;{}) {\n        config.Slot1.kS = T::pid1_kS;\n      }\n      if constexpr (has_pid1_kV&lt;T&gt;{}) {\n        config.Slot1.kV = T::pid1_kV;\n      }\n      if constexpr (has_pid1_kA&lt;T&gt;{}) {\n        config.Slot1.kA = T::pid1_kA;\n      }\n      if constexpr (has_pid1_kG&lt;T&gt;{} &amp;&amp; has_pid1_gravityType&lt;T&gt;{}) {\n        config.Slot1.kG = T::pid1_kG;\n        config.Slot1.GravityType = T::pid1_gravityType;\n      }\n      if constexpr (has_motionMagic_cruiseVelocity&lt;T&gt;{}) {\n        config.MotionMagic.MotionMagicCruiseVelocity = T::motionMagic_cruiseVelocity;\n      }\n      if constexpr (has_motionMagic_acceleration&lt;T&gt;{}) {\n        config.MotionMagic.MotionMagicAcceleration = T::motionMagic_acceleration;\n      }\n      if constexpr (has_motionMagic_jerk&lt;T&gt;{}) {\n        config.MotionMagic.MotionMagicJerk = T::motionMagic_jerk;\n      }\n      if constexpr (has_motionMagic_expo_kV&lt;T&gt;{}) {\n        config.MotionMagic.MotionMagicExpo_kV = T::motionMagic_expo_kV;\n      }\n      if constexpr (has_motionMagic_expo_kA&lt;T&gt;{}) {\n        config.MotionMagic.MotionMagicExpo_kA = T::motionMagic_expo_kA;\n      }\n      if constexpr (has_supplyCurrentLimit&lt;T&gt;{} || has_supplyCurrentLowerLimit&lt;T&gt;{} ||\n                    has_supplyCurrentLowerTime&lt;T&gt;{}) {\n        config.CurrentLimits.SupplyCurrentLimitEnable = true;\n        if constexpr (has_supplyCurrentLimit&lt;T&gt;{}) {\n          constexpr units::ampere_t currentLimit = T::supplyCurrentLimit;\n          static_assert(currentLimit.to&lt;double&gt;() &gt; 0, \"Supply current limit must be positive\");\n          config.CurrentLimits.SupplyCurrentLimit = currentLimit.to&lt;double&gt;();\n        }\n        if constexpr (has_supplyCurrentLowerLimit&lt;T&gt;{}) {\n          constexpr units::ampere_t currentThreshold = T::supplyCurrentLowerLimit;\n          static_assert(currentThreshold.to&lt;double&gt;() &gt; 0, \"Supply current threshold must be positive\");\n          config.CurrentLimits.SupplyCurrentLowerLimit = currentThreshold.to&lt;double&gt;();\n        }\n        if constexpr (has_supplyCurrentLowerTime&lt;T&gt;{}) {\n          constexpr units::second_t currentThresholdTime = T::supplyCurrentLowerTime;\n          static_assert(currentThresholdTime.to&lt;double&gt;() &gt;= 0, \"Supply current threshold time must be non-negative\");\n          static_assert(currentThresholdTime.to&lt;double&gt;() &lt;= 1.275, \"Current duration must be less than 1.275\");\n          config.CurrentLimits.SupplyCurrentLowerTime = currentThresholdTime.to&lt;double&gt;();\n        }\n      }\n      if constexpr (has_statorCurrentLimit&lt;T&gt;{}) {\n        config.CurrentLimits.StatorCurrentLimitEnable = true;\n        constexpr units::ampere_t currentLimit = T::statorCurrentLimit;\n        static_assert(currentLimit.to&lt;double&gt;() &gt; 0, \"Stator current limit must be positive\");\n        config.CurrentLimits.StatorCurrentLimit = currentLimit;\n      }\n      if constexpr (has_forwardLimit_source&lt;T&gt;{} || has_forwardLimit_deviceID&lt;T&gt;{} ||\n                    has_forwardLimit_normalState&lt;T&gt;{}) {\n        if constexpr (has_forwardLimit_source&lt;T&gt;{}) {\n          constexpr ctre::phoenix6::signals::ForwardLimitSourceValue source = T::forwardLimit_source;\n          if constexpr (source != ctre::phoenix6::signals::ForwardLimitSourceValue::Disabled &amp;&amp;\n                        source != ctre::phoenix6::signals::ForwardLimitSourceValue::LimitSwitchPin) {\n            static_assert(has_forwardLimit_deviceID&lt;T&gt;{}, \"Forward limit switch requires remote source device ID\");\n          }\n          if constexpr (source != ctre::phoenix6::signals::ForwardLimitSourceValue::Disabled) {\n            static_assert(has_forwardLimit_normalState&lt;T&gt;{},\n                          \"Forward limit switch configuration requires both source and normal state\");\n            config.HardwareLimitSwitch.ForwardLimitEnable = true;\n          }\n          config.HardwareLimitSwitch.ForwardLimitSource = T::forwardLimit_source;\n        }\n        if constexpr (has_forwardLimit_deviceID&lt;T&gt;{}) {\n          static_assert(has_forwardLimit_source&lt;T&gt;{} &amp;&amp;\n                            T::forwardLimit_source != ctre::phoenix6::signals::ForwardLimitSourceValue::Disabled &amp;&amp;\n                            T::forwardLimit_source != ctre::phoenix6::signals::ForwardLimitSourceValue::LimitSwitchPin,\n                        \"Forward limit switch device ID has no effect when limit source is not remote\");\n          config.HardwareLimitSwitch.ForwardLimitRemoteSensorID = T::forwardLimit_deviceID;\n        }\n        if constexpr (has_forwardLimit_normalState&lt;T&gt;{}) {\n          if constexpr (T::forwardLimit_normalState != ctre::phoenix6::signals::ForwardLimitSourceValue::Disabled) {\n            static_assert(has_forwardLimit_source&lt;T&gt;{}, \"Forward limit switch source required\");\n          }\n          config.HardwareLimitSwitch.ForwardLimitType = T::forwardLimit_normalState;\n        }\n      } else {\n        config.HardwareLimitSwitch.ForwardLimitEnable = false;\n      }\n      if constexpr (has_reverseLimit_source&lt;T&gt;{} || has_reverseLimit_deviceID&lt;T&gt;{} ||\n                    has_reverseLimit_normalState&lt;T&gt;{}) {\n        if constexpr (has_reverseLimit_source&lt;T&gt;{}) {\n          constexpr ctre::phoenix6::signals::ReverseLimitSourceValue source = T::reverseLimit_source;\n          if constexpr (source != ctre::phoenix6::signals::ReverseLimitSourceValue::Disabled &amp;&amp;\n                        source != ctre::phoenix6::signals::ReverseLimitSourceValue::LimitSwitchPin) {\n            static_assert(has_reverseLimit_deviceID&lt;T&gt;{}, \"Reverse limit switch requires remote source device ID\");\n          }\n          if constexpr (source != ctre::phoenix6::signals::ReverseLimitSourceValue::Disabled) {\n            static_assert(has_reverseLimit_normalState&lt;T&gt;{},\n                          \"Reverse limit switch configuration requires both source and normal state\");\n            config.HardwareLimitSwitch.ReverseLimitEnable = true;\n          }\n          config.HardwareLimitSwitch.ReverseLimitSource = T::reverseLimit_source;\n        }\n        if constexpr (has_reverseLimit_deviceID&lt;T&gt;{}) {\n          static_assert(has_reverseLimit_source&lt;T&gt;{} &amp;&amp;\n                            T::reverseLimit_source != ctre::phoenix6::signals::ReverseLimitSourceValue::Disabled &amp;&amp;\n                            T::reverseLimit_source != ctre::phoenix6::signals::ReverseLimitSourceValue::LimitSwitchPin,\n                        \"Reverse limit switch device ID has no effect when limit source is not remote\");\n          config.HardwareLimitSwitch.ReverseLimitRemoteSensorID = T::reverseLimit_deviceID;\n        }\n        if constexpr (has_reverseLimit_normalState&lt;T&gt;{}) {\n          if constexpr (T::reverseLimit_normalState != ctre::phoenix6::signals::ReverseLimitSourceValue::Disabled) {\n            static_assert(has_reverseLimit_source&lt;T&gt;{}, \"Reverse limit switch source required\");\n          }\n          config.HardwareLimitSwitch.ReverseLimitType = T::reverseLimit_normalState;\n        }\n      } else {\n        config.HardwareLimitSwitch.ReverseLimitEnable = false;\n      }\n      if constexpr (has_neutralDeadband&lt;T&gt;{}) {\n        static_assert(T::neutralDeadband &gt;= 0.001, \"Neutral deadband must be greater than 0.001 (0.1%)\");\n        static_assert(T::neutralDeadband &lt;= 0.25, \"Neutral deadband must be less than 0.25 (25%)\");\n        config.MotorOutput.DutyCycleNeutralDeadband = T::neutralDeadband;\n      }\n\n      if constexpr (has_statusFrameMotorMode&lt;T&gt;()) {\n        argos_lib::status_frame_config::SetMotorStatusFrameRates(motorController, T::statusFrameMotorMode);\n      }\n\n      auto retVal = motorController.GetConfigurator().Apply(config, configTimeout);\n      if (0 != retVal) {\n        std::cout &lt;&lt; \"Error code (\" &lt;&lt; motorController.GetDeviceID() &lt;&lt; \"): \" &lt;&lt; retVal &lt;&lt; '\\n';\n      }\n\n      return 0 != retVal;\n    }\n\n    template &lt;typename CompetitionConfig, typename PracticeConfig&gt;\n    bool FalconConfig(ctre::phoenix6::hardware::TalonFX&amp; motorController,\n                      units::millisecond_t configTimeout,\n                      argos_lib::RobotInstance instance) {\n      switch (instance) {\n        case argos_lib::RobotInstance::Competition:\n          return FalconConfig&lt;CompetitionConfig&gt;(motorController, configTimeout);\n          break;\n        case argos_lib::RobotInstance::Practice:\n          return FalconConfig&lt;PracticeConfig&gt;(motorController, configTimeout);\n          break;\n      }\n      return false;\n    }\n\n  }  // namespace falcon_config\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/status__frame__config_8h.html","title":"File status_frame_config.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; status_frame_config.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;ctre/phoenix6/core/CoreTalonFX.hpp&gt;</code></li> </ul>"},{"location":"argos-lib/status__frame__config_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace status_frame_config <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/status_frame_config.h</code></p>"},{"location":"argos-lib/status__frame__config_8h_source.html","title":"File status_frame_config.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; status_frame_config.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;ctre/phoenix6/core/CoreTalonFX.hpp&gt;\n\nnamespace argos_lib {\n  namespace status_frame_config {\n    using BaseTalon = ctre::phoenix6::hardware::core::CoreTalonFX;\n    enum class MotorPresetMode {\n      Basic,              \n      BasicFX,            \n      Leader,             \n      LeaderFX,           \n      Follower,           \n      FollowerFX,         \n      MotionProfiling,    \n      MotionProfilingFX,  \n      Tuning,             \n      TuningFX            \n    };\n\n    void SetMotorStatusFrameRates(BaseTalon&amp; motor, MotorPresetMode motorMode);\n  }  // namespace status_frame_config\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/talonsrx__config_8h.html","title":"File talonsrx_config.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; talonsrx_config.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;ctre/phoenix/motorcontrol/can/TalonSRX.h&gt;</code></li> <li><code>#include &lt;units/current.h&gt;</code></li> <li><code>#include &lt;units/time.h&gt;</code></li> <li><code>#include &lt;units/voltage.h&gt;</code></li> <li><code>#include \"argos_lib/config/config_types.h\"</code></li> <li><code>#include \"compile_time_member_check.h\"</code></li> <li><code>#include \"status_frame_config.h\"</code></li> </ul>"},{"location":"argos-lib/talonsrx__config_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace talonsrx_config <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/config/talonsrx_config.h</code></p>"},{"location":"argos-lib/talonsrx__config_8h_source.html","title":"File talonsrx_config.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; config &gt; talonsrx_config.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;ctre/phoenix/motorcontrol/can/TalonSRX.h&gt;\n#include &lt;units/current.h&gt;\n#include &lt;units/time.h&gt;\n#include &lt;units/voltage.h&gt;\n\n#include \"argos_lib/config/config_types.h\"\n#include \"compile_time_member_check.h\"\n#include \"status_frame_config.h\"\n\nnamespace argos_lib {\n  namespace talonsrx_config {\n    HAS_MEMBER(inverted)\n    HAS_MEMBER(neutralMode)\n    HAS_MEMBER(pid0_allowableError)\n    HAS_MEMBER(pid0_iZone)\n    HAS_MEMBER(pid0_kD)\n    HAS_MEMBER(pid0_kF)\n    HAS_MEMBER(pid0_kI)\n    HAS_MEMBER(pid0_kP)\n    HAS_MEMBER(pid0_selectedSensor)\n    HAS_MEMBER(remoteFilter0_addr)\n    HAS_MEMBER(remoteFilter0_type)\n    HAS_MEMBER(sensorPhase)\n    HAS_MEMBER(voltCompSat)\n    HAS_MEMBER(statusFrameMotorMode)\n    HAS_MEMBER(peakCurrentLimit)\n    HAS_MEMBER(peakCurrentDuration)\n    HAS_MEMBER(continuousCurrentLimit)\n    HAS_MEMBER(peakOutputForward)\n    HAS_MEMBER(peakOutputReverse)\n    HAS_MEMBER(forwardLimitSwitchSource)\n    HAS_MEMBER(reverseLimitSwitchSource)\n    HAS_MEMBER(forwardLimitSwitchNormal)\n    HAS_MEMBER(reverseLimitSwitchNormal)\n    template &lt;typename T&gt;\n    bool TalonSRXConfig(ctre::phoenix::motorcontrol::can::TalonSRX&amp; motorController,\n                        units::millisecond_t configTimeout) {\n      ctre::phoenix::motorcontrol::can::TalonSRXConfiguration config;\n      auto timeout = configTimeout.to&lt;int&gt;();\n\n      if constexpr (has_inverted&lt;T&gt;{}) {\n        motorController.SetInverted(T::inverted);\n      }\n      if constexpr (has_sensorPhase&lt;T&gt;{}) {\n        motorController.SetSensorPhase(T::sensorPhase);\n      }\n      if constexpr (has_neutralMode&lt;T&gt;{}) {\n        motorController.SetNeutralMode(T::neutralMode);\n      }\n      if constexpr (has_voltCompSat&lt;T&gt;{}) {\n        constexpr units::volt_t voltage = T::voltCompSat;\n        config.voltageCompSaturation = voltage.to&lt;double&gt;();\n        motorController.EnableVoltageCompensation(true);\n      } else {\n        motorController.EnableVoltageCompensation(false);\n      }\n      if constexpr (has_remoteFilter0_addr&lt;T&gt;{} &amp;&amp; has_remoteFilter0_type&lt;T&gt;{}) {\n        ctre::phoenix::motorcontrol::can::FilterConfiguration filterConfig;\n        filterConfig.remoteSensorDeviceID = T::remoteFilter0_addr.address;\n        filterConfig.remoteSensorSource = T::remoteFilter0_type;\n        config.remoteFilter0 = filterConfig;\n      }\n      if constexpr (has_pid0_selectedSensor&lt;T&gt;{}) {\n        config.primaryPID.selectedFeedbackSensor = T::pid0_selectedSensor;\n      }\n      if constexpr (has_pid0_kP&lt;T&gt;{}) {\n        config.slot0.kP = T::pid0_kP;\n      }\n      if constexpr (has_pid0_kI&lt;T&gt;{}) {\n        config.slot0.kI = T::pid0_kI;\n      }\n      if constexpr (has_pid0_kD&lt;T&gt;{}) {\n        config.slot0.kD = T::pid0_kD;\n      }\n      if constexpr (has_pid0_kF&lt;T&gt;{}) {\n        config.slot0.kF = T::pid0_kF;\n      }\n      if constexpr (has_pid0_iZone&lt;T&gt;{}) {\n        config.slot0.integralZone = T::pid0_iZone;\n      }\n      if constexpr (has_pid0_allowableError&lt;T&gt;{}) {\n        config.slot0.allowableClosedloopError = T::pid0_allowableError;\n      }\n      if constexpr (has_peakCurrentLimit&lt;T&gt;()) {\n        constexpr units::ampere_t currentLimit = T::peakCurrentLimit;\n        static_assert(currentLimit.to&lt;double&gt;() &gt; 0, \"Current limit must be positive\");\n        config.peakCurrentLimit = std::round(currentLimit.to&lt;double&gt;());\n      }\n      if constexpr (has_peakCurrentDuration&lt;T&gt;()) {\n        constexpr units::millisecond_t currentDuration = T::peakCurrentDuration;\n        static_assert(currentDuration.to&lt;double&gt;() &gt; 0, \"Current duration must be positive\");\n        config.peakCurrentDuration = std::round(currentDuration.to&lt;double&gt;());\n      }\n      if constexpr (has_continuousCurrentLimit&lt;T&gt;()) {\n        constexpr units::ampere_t currentLimit = T::continuousCurrentLimit;\n        static_assert(currentLimit.to&lt;double&gt;() &gt; 0, \"Current limit must be positive\");\n        config.continuousCurrentLimit = std::round(currentLimit.to&lt;double&gt;());\n      }\n      if constexpr (has_peakOutputForward&lt;T&gt;()) {\n        config.peakOutputForward = T::peakOutputForward;\n      }\n      if constexpr (has_peakOutputReverse&lt;T&gt;()) {\n        config.peakOutputReverse = T::peakOutputReverse;\n      }\n\n      if constexpr (has_statusFrameMotorMode&lt;T&gt;()) {\n        argos_lib::status_frame_config::SetMotorStatusFrameRates(motorController, T::statusFrameMotorMode);\n      }\n\n      if constexpr (has_forwardLimitSwitchSource&lt;T&gt;()) {\n        config.forwardLimitSwitchSource = T::forwardLimitSwitchSource;\n      }\n\n      if constexpr (has_reverseLimitSwitchSource&lt;T&gt;()) {\n        config.reverseLimitSwitchSource = T::reverseLimitSwitchSource;\n      }\n\n      if constexpr (has_forwardLimitSwitchNormal&lt;T&gt;()) {\n        config.forwardLimitSwitchNormal = T::forwardLimitSwitchNormal;\n      }\n\n      if constexpr (has_reverseLimitSwitchNormal&lt;T&gt;()) {\n        config.reverseLimitSwitchNormal = T::reverseLimitSwitchNormal;\n      }\n\n      // enable current limiting if any current limiting option is set, disable if none are\n      if (has_continuousCurrentLimit&lt;T&gt;() || has_peakCurrentLimit&lt;T&gt;() || has_peakCurrentDuration&lt;T&gt;()) {\n        motorController.EnableCurrentLimit(true);\n      } else {\n        motorController.EnableCurrentLimit(false);\n      }\n\n      // ensure using single threshold if peakCurrentLimit is not set but continuousCurrentLimit is\n      if (!has_peakCurrentLimit&lt;T&gt;() &amp;&amp; has_continuousCurrentLimit&lt;T&gt;()) {\n        config.peakCurrentLimit = 0;\n      }\n\n      return 0 != motorController.ConfigAllSettings(config, timeout);\n    }\n\n    template &lt;typename CompetitionConfig, typename PracticeConfig&gt;\n    bool TalonSRXConfig(ctre::phoenix::motorcontrol::can::TalonSRX&amp; motorController,\n                        units::millisecond_t configTimeout,\n                        argos_lib::RobotInstance instance) {\n      switch (instance) {\n        case argos_lib::RobotInstance::Competition:\n          return TalonSRXConfig&lt;CompetitionConfig&gt;(motorController, configTimeout);\n          break;\n        case argos_lib::RobotInstance::Practice:\n          return TalonSRXConfig&lt;PracticeConfig&gt;(motorController, configTimeout);\n          break;\n      }\n      return false;\n    }\n\n  }  // namespace talonsrx_config\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_1b5ab51e1de305e693feb9e8d9da64c0.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; controller</p>"},{"location":"argos-lib/dir_1b5ab51e1de305e693feb9e8d9da64c0.html#files","title":"Files","text":"Type Name file trigger_composition.h file vibration.h file xbox_controller.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/</code></p>"},{"location":"argos-lib/trigger__composition_8h.html","title":"File trigger_composition.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; controller &gt; trigger_composition.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/button/Trigger.h&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"argos-lib/trigger__composition_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace triggers <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/trigger_composition.h</code></p>"},{"location":"argos-lib/trigger__composition_8h_source.html","title":"File trigger_composition.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; controller &gt; trigger_composition.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc2/command/button/Trigger.h&gt;\n\n#include &lt;vector&gt;\n\nnamespace argos_lib {\n  namespace triggers {\n    frc2::Trigger OneOf(std::vector&lt;frc2::Trigger&gt; triggers);\n\n    frc2::Trigger NoneOf(std::vector&lt;frc2::Trigger&gt; triggers);\n\n    frc2::Trigger AnyOf(std::vector&lt;frc2::Trigger&gt; triggers);\n\n    frc2::Trigger AllOf(std::vector&lt;frc2::Trigger&gt; triggers);\n  }  // namespace triggers\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/vibration_8h.html","title":"File vibration.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; controller &gt; vibration.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;units/time.h&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> </ul>"},{"location":"argos-lib/vibration_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/vibration_8h.html#classes","title":"Classes","text":"Type Name struct VibrationStatus Vibration percentages that can be sent to controller for user feedback. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/vibration.h</code></p>"},{"location":"argos-lib/vibration_8h_source.html","title":"File vibration.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; controller &gt; vibration.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;units/time.h&gt;\n\n#include &lt;functional&gt;\n\nnamespace argos_lib {\n\n  struct VibrationStatus {\n    double intensityLeft = 0.0;   \n    double intensityRight = 0.0;  \n  };\n\n  using VibrationModel = std::function&lt;VibrationStatus()&gt;;\n\n  VibrationModel VibrationOff();\n\n  VibrationModel VibrationConstant(double intensity);\n\n  VibrationModel VibrationConstant(double intensityLeft, double intensityRight);\n\n  VibrationModel VibrationSyncPulse(units::millisecond_t pulsePeriod, double intensityOn, double intensityOff = 0.0);\n\n  VibrationModel VibrationSyncWave(units::millisecond_t pulsePeriod, double intensityOn, double intensityOff = 0.0);\n\n  VibrationModel VibrationAlternatePulse(units::millisecond_t pulsePeriod,\n                                         double intensityOn,\n                                         double intensityOff = 0.0);\n\n  VibrationModel VibrationAlternateWave(units::millisecond_t pulsePeriod,\n                                        double intensityOn,\n                                        double intensityOff = 0.0);\n\n  VibrationModel TemporaryVibrationPattern(VibrationModel temporaryModel,\n                                           units::millisecond_t temporaryModelDuration,\n                                           VibrationModel lastingModel = VibrationOff());\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/xbox__controller_8h.html","title":"File xbox_controller.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; controller &gt; xbox_controller.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc/GenericHID.h&gt;</code></li> <li><code>#include &lt;frc2/command/button/Trigger.h&gt;</code></li> <li><code>#include &lt;array&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"argos_lib/general/debounce_settings.h\"</code></li> <li><code>#include \"vibration.h\"</code></li> </ul>"},{"location":"argos-lib/xbox__controller_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/xbox__controller_8h.html#classes","title":"Classes","text":"Type Name class XboxController struct UpdateStatus State of an individual button. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/controller/xbox_controller.h</code></p>"},{"location":"argos-lib/xbox__controller_8h_source.html","title":"File xbox_controller.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; controller &gt; xbox_controller.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc/GenericHID.h&gt;\n#include &lt;frc2/command/button/Trigger.h&gt;\n\n#include &lt;array&gt;\n#include &lt;vector&gt;\n\n#include \"argos_lib/general/debounce_settings.h\"\n#include \"vibration.h\"\n\nnamespace argos_lib {\n\n  class XboxController : public frc::GenericHID {\n   public:\n    enum class JoystickHand { kLeftHand, kRightHand };\n\n    enum class Button {\n      kA = 1,\n      kB = 2,\n      kX = 3,\n      kY = 4,\n      kBumperLeft = 5,\n      kBumperRight = 6,\n      kBack = 7,\n      kStart = 8,\n      kStickLeft = 9,\n      kStickRight = 10,\n      kLeftTrigger = 11,   \n      kRightTrigger = 12,  \n      kUp = 13,            \n      kRight = 14,         \n      kDown = 15,          \n      kLeft = 16,          \n      COUNT\n    };\n\n    struct UpdateStatus {\n      bool pressed = false;          \n      bool released = false;         \n      bool debouncePress = false;    \n      bool debounceRelease = false;  \n      bool rawActive = false;        \n      bool debounceActive = false;   \n    };\n\n    enum class Axis { kLeftX = 0, kLeftY = 1, kLeftTrigger = 2, kRightTrigger = 3, kRightX = 4, kRightY = 5, COUNT };\n\n    XboxController() = delete;\n    explicit XboxController(int port);\n\n    void SetButtonDebounce(Button targetButton, DebounceSettings newSettings);\n\n    void SwapSettings(XboxController&amp; other);\n\n    [[nodiscard]] double GetX(JoystickHand hand) const;\n    [[nodiscard]] double GetY(JoystickHand hand) const;\n    [[nodiscard]] double GetTriggerAxis(JoystickHand hand) const;\n\n    [[nodiscard]] bool GetDebouncedButton(Button buttonIdx);\n    [[nodiscard]] bool GetDebouncedButtonPressed(Button buttonIdx);\n    [[nodiscard]] bool GetDebouncedButtonReleased(Button buttonIdx);\n\n    [[nodiscard]] bool GetDebouncedButton(std::vector&lt;Button&gt; buttonCombo);\n    [[nodiscard]] bool GetDebouncedButtonPressed(std::vector&lt;Button&gt; buttonCombo);\n    [[nodiscard]] bool GetDebouncedButtonReleased(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] bool GetRawButton(Button buttonIdx);\n    [[nodiscard]] bool GetRawButtonPressed(Button buttonIdx);\n    [[nodiscard]] bool GetRawButtonReleased(Button buttonIdx);\n\n    [[nodiscard]] bool GetRawButton(std::vector&lt;Button&gt; buttonCombo);\n    [[nodiscard]] bool GetRawButtonPressed(std::vector&lt;Button&gt; buttonCombo);\n    [[nodiscard]] bool GetRawButtonReleased(std::vector&lt;Button&gt; buttonCombo);\n\n    VibrationModel GetVibration() const;\n\n    void SetVibration(VibrationModel newVibrationModel);\n\n    void UpdateVibration();\n\n    UpdateStatus UpdateButton(Button buttonIdx);\n\n    [[nodiscard]] frc2::Trigger TriggerRaw(Button button);\n\n    [[nodiscard]] frc2::Trigger TriggerRaw(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerRawAnyOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerRawAllOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerRawNoneOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerRawOneOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerDebounced(Button button);\n\n    [[nodiscard]] frc2::Trigger TriggerDebounced(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerDebouncedAnyOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerDebouncedAllOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerDebouncedNoneOf(std::vector&lt;Button&gt; buttonCombo);\n\n    [[nodiscard]] frc2::Trigger TriggerDebouncedOneOf(std::vector&lt;Button&gt; buttonCombo);\n\n   private:\n    struct DPadButtons {\n      bool up = false;     \n      bool right = false;  \n      bool down = false;   \n      bool left = false;   \n    };\n\n    DPadButtons GetPOVButtons();\n\n    [[nodiscard]] frc2::Trigger TriggerAnyOf(std::vector&lt;Button&gt; buttonCombo,\n                                             std::function&lt;bool(Button)&gt; buttonGetterFunc);\n\n    [[nodiscard]] frc2::Trigger TriggerAllOf(std::vector&lt;Button&gt; buttonCombo,\n                                             std::function&lt;bool(Button)&gt; buttonGetterFunc);\n\n    [[nodiscard]] frc2::Trigger TriggerNoneOf(std::vector&lt;Button&gt; buttonCombo,\n                                              std::function&lt;bool(Button)&gt; buttonGetterFunc);\n\n    [[nodiscard]] frc2::Trigger TriggerOneOf(std::vector&lt;Button&gt; buttonCombo,\n                                             std::function&lt;bool(Button)&gt; buttonGetterFunc);\n\n    constexpr static double analogTriggerThresh = 0.5;  \n\n    std::array&lt;DebounceSettings, static_cast&lt;int&gt;(Button::COUNT)&gt; m_buttonDebounceSettings;\n    std::array&lt;bool, static_cast&lt;int&gt;(Button::COUNT)&gt; m_buttonDebounceStatus;\n    std::array&lt;bool, static_cast&lt;int&gt;(Button::COUNT)&gt; m_rawButtonStatus;\n    std::array&lt;std::chrono::time_point&lt;std::chrono::steady_clock&gt;, static_cast&lt;int&gt;(Button::COUNT)&gt;\n        m_buttonDebounceTransitionTime;  \n\n    VibrationModel m_vibrationModel;  \n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_ce90de3a31c0930a75a0088390301e44.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general</p>"},{"location":"argos-lib/dir_ce90de3a31c0930a75a0088390301e44.html#files","title":"Files","text":"Type Name file angle_utils.h file color.h file debounce_settings.h file debouncer.h file edge_detector.h file general.h file generic_debouncer.h file hysteresis_filter.h file interpolation.h file log.h file nt_motor_pid_tuner.h file nt_subscriber.h file odometry_aim.h file swerve_utils.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/</code></p>"},{"location":"argos-lib/angle__utils_8h.html","title":"File angle_utils.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; angle_utils.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"units/angle.h\"</code></li> </ul>"},{"location":"argos-lib/angle__utils_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace angle <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/angle_utils.h</code></p>"},{"location":"argos-lib/angle__utils_8h_source.html","title":"File angle_utils.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; angle_utils.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include \"units/angle.h\"\n\nnamespace argos_lib {\n  namespace angle {\n    units::degree_t NearestAngle(units::degree_t desiredAngle, units::degree_t referenceAngle);\n\n    units::degree_t InvertedAngle(units::degree_t desiredAngle, units::degree_t referenceAngle);\n\n    units::degree_t ConstrainAngle(units::degree_t inVal, units::degree_t minVal, units::degree_t maxVal);\n    double ConstrainAngle(double inVal, double minVal, double maxVal);\n  }  // namespace angle\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/color_8h.html","title":"File color.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; color.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;array&gt;</code></li> </ul>"},{"location":"argos-lib/color_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace colors namespace gamma_corrected_colors"},{"location":"argos-lib/color_8h.html#classes","title":"Classes","text":"Type Name struct ArgosColor <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/color.h</code></p>"},{"location":"argos-lib/color_8h_source.html","title":"File color.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; color.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;array&gt;\n\nnamespace argos_lib {\n  struct ArgosColor {\n    int r;\n    int g;\n    int b;\n\n    ArgosColor operator*(double scale) {\n      return ArgosColor{static_cast&lt;int&gt;(r * scale), static_cast&lt;int&gt;(g * scale), static_cast&lt;int&gt;(b * scale)};\n    }\n  };\n\n  // clang-format off\n  constexpr std::array&lt;uint8_t, 256&gt; gamma8 = {\n      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,\n      1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,\n      2,   3,   3,   3,   3,   3,   3,   3,   4,   4,   4,   4,   4,   5,   5,   5,\n      5,   6,   6,   6,   6,   7,   7,   7,   7,   8,   8,   8,   9,   9,   9,   10,\n      10,  10,  11,  11,  11,  12,  12,  13,  13,  13,  14,  14,  15,  15,  16,  16,\n      17,  17,  18,  18,  19,  19,  20,  20,  21,  21,  22,  22,  23,  24,  24,  25,\n      25,  26,  27,  27,  28,  29,  29,  30,  31,  32,  32,  33,  34,  35,  35,  36,\n      37,  38,  39,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  50,\n      51,  52,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  66,  67,  68,\n      69,  70,  72,  73,  74,  75,  77,  78,  79,  81,  82,  83,  85,  86,  87,  89,\n      90,  92,  93,  95,  96,  98,  99,  101, 102, 104, 105, 107, 109, 110, 112, 114,\n      115, 117, 119, 120, 122, 124, 126, 127, 129, 131, 133, 135, 137, 138, 140, 142,\n      144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 167, 169, 171, 173, 175,\n      177, 180, 182, 184, 186, 189, 191, 193, 196, 198, 200, 203, 205, 208, 210, 213,\n      215, 218, 220, 223, 225, 228, 231, 233, 236, 239, 241, 244, 247, 249, 252, 255};\n  // clang-format on\n\n  namespace colors {\n    constexpr static ArgosColor kOff = ArgosColor{0, 0, 0};\n    constexpr static ArgosColor kWhite = ArgosColor{120, 120, 120};\n    constexpr static ArgosColor kReallyRed = ArgosColor{255, 0, 0};\n    constexpr static ArgosColor kReallyGreen = ArgosColor{0, 255, 0};\n    constexpr static ArgosColor kReallyBlue = ArgosColor{0, 0, 255};\n    constexpr static ArgosColor kCubePurple = ArgosColor{130, 0, 130};\n    constexpr static ArgosColor kConeYellow = ArgosColor{222, 178, 18};\n    constexpr static ArgosColor kHotPink = ArgosColor{255, 105, 180};\n    constexpr static ArgosColor kCatYellow = ArgosColor{255, 163, 0};  // Pantone 137C\n    constexpr static ArgosColor kPurple = ArgosColor{75, 0, 130};\n    constexpr static ArgosColor kNoteOrange = ArgosColor{255, 130, 50};\n    constexpr static ArgosColor kPlum = ArgosColor{160, 100, 150};\n  }  // namespace colors\n\n  constexpr ArgosColor GammaCorrect(ArgosColor original) {\n    return ArgosColor{gamma8[original.r], gamma8[original.g], gamma8[original.b]};\n  }\n  namespace gamma_corrected_colors {\n    constexpr static ArgosColor kOff = GammaCorrect(argos_lib::colors::kOff);\n    constexpr static ArgosColor kWhite = GammaCorrect(argos_lib::colors::kWhite);\n    constexpr static ArgosColor kReallyRed = GammaCorrect(argos_lib::colors::kReallyRed);\n    constexpr static ArgosColor kReallyGreen = GammaCorrect(argos_lib::colors::kReallyGreen);\n    constexpr static ArgosColor kReallyBlue = GammaCorrect(argos_lib::colors::kReallyBlue);\n    constexpr static ArgosColor kCubePurple = GammaCorrect(argos_lib::colors::kCubePurple);\n    constexpr static ArgosColor kConeYellow = GammaCorrect(argos_lib::colors::kConeYellow);\n    constexpr static ArgosColor kHotPink = GammaCorrect(argos_lib::colors::kHotPink);\n    constexpr static ArgosColor kCatYellow = GammaCorrect(argos_lib::colors::kCatYellow);\n    constexpr static ArgosColor kPurple = GammaCorrect(argos_lib::colors::kPurple);\n    constexpr static ArgosColor kNoteOrange = GammaCorrect(argos_lib::colors::kNoteOrange);\n    constexpr static ArgosColor kPlum = GammaCorrect(argos_lib::colors::kPlum);\n  }  // namespace gamma_corrected_colors\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/debounce__settings_8h.html","title":"File debounce_settings.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; debounce_settings.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;units/time.h&gt;</code></li> </ul>"},{"location":"argos-lib/debounce__settings_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/debounce__settings_8h.html#classes","title":"Classes","text":"Type Name struct DebounceSettings <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/debounce_settings.h</code></p>"},{"location":"argos-lib/debounce__settings_8h_source.html","title":"File debounce_settings.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; debounce_settings.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;units/time.h&gt;\n\nnamespace argos_lib {\n\n  struct DebounceSettings {\n    units::millisecond_t activateTime;\n    units::millisecond_t clearTime;\n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/debouncer_8h.html","title":"File debouncer.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; debouncer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include \"argos_lib/general/debounce_settings.h\"</code></li> <li><code>#include \"units/time.h\"</code></li> </ul>"},{"location":"argos-lib/debouncer_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/debouncer_8h.html#classes","title":"Classes","text":"Type Name class Debouncer <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/debouncer.h</code></p>"},{"location":"argos-lib/debouncer_8h_source.html","title":"File debouncer.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; debouncer.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;chrono&gt;\n\n#include \"argos_lib/general/debounce_settings.h\"\n#include \"units/time.h\"\n\nnamespace argos_lib {\n\n  class Debouncer {\n   public:\n    explicit Debouncer(const argos_lib::DebounceSettings debounceSettings, bool initialValue = false);\n\n    explicit Debouncer(const units::millisecond_t symmetricDebounceTime);\n\n    [[nodiscard]] bool operator()(bool newVal);\n\n    [[nodiscard]] bool GetRawStatus();\n\n    [[nodiscard]] bool GetDebouncedStatus();\n\n    void Reset(bool newVal);\n\n   private:\n    argos_lib::DebounceSettings m_debounceSettings;  \n    bool m_rawStatus;                                \n    bool m_debouncedStatus;                          \n    std::chrono::time_point&lt;std::chrono::steady_clock&gt;\n        m_debounceTransitionTime;  \n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/edge__detector_8h.html","title":"File edge_detector.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; edge_detector.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"argos-lib/edge__detector_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/edge__detector_8h.html#classes","title":"Classes","text":"Type Name class EdgeDetector <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/edge_detector.h</code></p>"},{"location":"argos-lib/edge__detector_8h_source.html","title":"File edge_detector.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; edge_detector.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;string&gt;\n\nnamespace argos_lib {\n\n  class EdgeDetector {\n   public:\n    enum class EdgeDetectSettings { DETECT_BOTH, DETECT_FALLING, DETECT_RISING };\n\n    enum class edgeStatus { FALLING, RISING, ERROR, NONE };\n\n    explicit EdgeDetector(EdgeDetector::EdgeDetectSettings _settings, bool initialValue = false);\n\n    bool operator()(bool curVal);\n\n    edgeStatus Calculate(bool curVal);\n\n    std::string ToString(edgeStatus status);\n\n   private:\n    EdgeDetector::EdgeDetectSettings m_settings;\n\n    bool m_previousValue;\n\n    edgeStatus DetectFalling(bool currentValue);\n\n    edgeStatus DetectRising(bool currentValue);\n  };\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/general_8h.html","title":"File general.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; general.h</p> <p>Go to the source code of this file</p>"},{"location":"argos-lib/general_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/general.h</code></p>"},{"location":"argos-lib/general_8h_source.html","title":"File general.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; general.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\nnamespace argos_lib {\n\n  template &lt;typename T&gt;\n  constexpr static bool InThreshold(const T value, const T target, const T threshold) {\n    return value &gt;= target - threshold &amp;&amp; value &lt;= target + threshold;\n  }\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/generic__debouncer_8h.html","title":"File generic_debouncer.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; generic_debouncer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;units/time.h&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> </ul>"},{"location":"argos-lib/generic__debouncer_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/generic__debouncer_8h.html#classes","title":"Classes","text":"Type Name class GenericDebouncer &lt;class T&gt; <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/generic_debouncer.h</code></p>"},{"location":"argos-lib/generic__debouncer_8h_source.html","title":"File generic_debouncer.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; generic_debouncer.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;units/time.h&gt;\n\n#include &lt;chrono&gt;\n\nnamespace argos_lib {\n  template &lt;class T&gt;\n  class GenericDebouncer {\n   public:\n    explicit GenericDebouncer(const units::millisecond_t symmetricDebounceTime, T initialValue = {})\n        : m_debounceTime{symmetricDebounceTime}\n        , m_rawStatus{initialValue}\n        , m_debouncedStatus{initialValue}\n        , m_debounceTransitionTime{std::chrono::steady_clock::now()} {}\n\n    [[nodiscard]] T operator()(T newVal) {\n      const auto prevRawValue = m_rawStatus;\n      const auto curTime = std::chrono::steady_clock::now();\n\n      if (newVal != m_debouncedStatus &amp;&amp; newVal != prevRawValue) {\n        m_debounceTransitionTime = curTime;\n      }\n\n      if (newVal != m_debouncedStatus) {\n        const auto timeSinceTransition = units::millisecond_t{static_cast&lt;double&gt;(\n            std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(curTime - m_debounceTransitionTime).count())};\n        if (timeSinceTransition &gt;= m_debounceTime) {\n          m_debouncedStatus = newVal;\n        }\n      }\n\n      m_rawStatus = newVal;\n      return m_debouncedStatus;\n    }\n\n    void Reset(T newVal) {\n      m_rawStatus = newVal;\n      m_debouncedStatus = newVal;\n    }\n\n   private:\n    units::millisecond_t m_debounceTime;\n    T m_rawStatus;        \n    T m_debouncedStatus;  \n    std::chrono::time_point&lt;std::chrono::steady_clock&gt;\n        m_debounceTransitionTime;  \n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/hysteresis__filter_8h.html","title":"File hysteresis_filter.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; hysteresis_filter.h</p> <p>Go to the source code of this file</p>"},{"location":"argos-lib/hysteresis__filter_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/hysteresis__filter_8h.html#classes","title":"Classes","text":"Type Name class HysteresisFilter &lt;typename T&gt;A simple hysteresis filter for giving a bool output for a threshold. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/hysteresis_filter.h</code></p>"},{"location":"argos-lib/hysteresis__filter_8h_source.html","title":"File hysteresis_filter.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; hysteresis_filter.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\nnamespace argos_lib {\n\n  template &lt;typename T&gt;\n  class HysteresisFilter {\n   public:\n    HysteresisFilter() = delete;\n\n    HysteresisFilter(T deactivateThreshold, T activateThreshold)\n        : m_activateThreshold(activateThreshold), m_deactivateThreshold(deactivateThreshold) {}\n\n    [[nodiscard]] bool operator()(T newValue) {\n      if (m_currentState) {\n        if (newValue &lt; m_deactivateThreshold) {\n          m_currentState = false;\n        }\n      } else {\n        if (newValue &gt; m_activateThreshold) {\n          m_currentState = true;\n        }\n      }\n      return m_currentState;\n    }\n\n   private:\n    const T m_activateThreshold;    \n    const T m_deactivateThreshold;  \n    bool m_currentState;            \n  };\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/interpolation_8h.html","title":"File interpolation.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; interpolation.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;array&gt;</code></li> </ul>"},{"location":"argos-lib/interpolation_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/interpolation_8h.html#classes","title":"Classes","text":"Type Name struct InterpMapPoint &lt;class T, class V&gt;Point that helps generate an interpolation map. class InterpolationMap &lt;class T, size, class V&gt;Performs linear interpolation of a value based on a set of input-&gt;output mapping points. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/interpolation.h</code></p>"},{"location":"argos-lib/interpolation_8h_source.html","title":"File interpolation.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; interpolation.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;array&gt;\n\nnamespace argos_lib {\n\n  template &lt;class T, class V&gt;\n  struct InterpMapPoint {\n    T inVal;\n    V outVal;\n\n    constexpr InterpMapPoint(T in, V out) : inVal(in), outVal(out) {}\n\n    constexpr bool operator&lt;(const InterpMapPoint&lt;T, V&gt;&amp; other) { return inVal &lt; other.inVal; }\n    constexpr bool operator==(const InterpMapPoint&lt;T, V&gt;&amp; other) { return inVal == other.inVal; }\n  };\n\n  template &lt;class T, class V&gt;\n  constexpr bool operator&lt;(const InterpMapPoint&lt;T, V&gt;&amp; a, const T&amp; b) {\n    return a.inVal &lt; b;\n  }\n\n  template &lt;class T, class V&gt;\n  constexpr bool operator&lt;(const T&amp; a, const InterpMapPoint&lt;T, V&gt;&amp; b) {\n    return a &lt; b.inVal;\n  }\n\n  template &lt;class T, int size, class V = T&gt;\n  class InterpolationMap {\n   public:\n    InterpolationMap() = delete;\n    constexpr InterpolationMap(std::array&lt;InterpMapPoint&lt;T, V&gt;, size&gt; initArray) : m_mapArray(initArray) {\n      // assert((\"Map must contain at least one value.\", !initArray.empty()));\n      // assert((\"Map values must be sorted.\", std::is_sorted(initArray.cbegin(), initArray.cend())));\n    }\n\n    constexpr V Map(const T inVal) const {\n      if (inVal &gt;= m_mapArray.back().inVal) {\n        return m_mapArray.back().outVal;\n      } else if (inVal &lt;= m_mapArray.front().inVal) {\n        return m_mapArray.front().outVal;\n      } else {\n        auto afterPoint{std::lower_bound(m_mapArray.cbegin(), m_mapArray.cend(), inVal)};\n        auto beforePoint{std::prev(afterPoint)};\n        const auto lerpPct = (inVal - beforePoint-&gt;inVal) / (afterPoint-&gt;inVal - beforePoint-&gt;inVal);\n        return beforePoint-&gt;outVal + lerpPct * (afterPoint-&gt;outVal - beforePoint-&gt;outVal);\n      }\n    }\n\n    constexpr V operator()(const T inVal) const { return Map(inVal); }\n\n   private:\n    std::array&lt;InterpMapPoint&lt;T, V&gt;, size&gt; m_mapArray;\n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/log_8h.html","title":"File log.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; log.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cstdarg&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"units/base.h\"</code></li> </ul>"},{"location":"argos-lib/log_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/log_8h.html#classes","title":"Classes","text":"Type Name class ArgosLogger Log to the console in a clean, repeatable manner. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/log.h</code></p>"},{"location":"argos-lib/log_8h_source.html","title":"File log.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; log.h</p> <p>Go to the documentation of this file</p> <pre><code>/*\n  Contains functions / classes useful for logging runtime information\n*/\n\n#pragma once\n\n#include &lt;cstdarg&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n#include \"units/base.h\"\n\nnamespace argos_lib {\n  enum LogLevel { INFO, ERR };\n\n  class ArgosLogger {\n   public:\n    ArgosLogger() = delete;\n    explicit ArgosLogger(std::string tag) : m_tag{tag} {}\n\n    void Log(LogLevel level, const char* fmt, ...) const {\n      va_list lst;\n      va_start(lst, fmt);\n      switch (level) {\n        case LogLevel::INFO:\n          std::fprintf(stdout, \"[%s]\", m_tag.c_str());\n          std::vfprintf(stdout, fmt, lst);\n          break;\n\n        case LogLevel::ERR:\n          std::fprintf(stderr, \"[%s_ERROR]\", m_tag.c_str());\n          std::vfprintf(stderr, fmt, lst);\n          break;\n\n        default:\n          std::fprintf(stdout, \"[%s]\", m_tag.c_str());\n          std::vfprintf(stdout, fmt, lst);\n          break;\n      }\n      std::fprintf(stdout, \"\\n\");\n    }\n\n   private:\n    std::string m_tag;\n  };\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/nt__motor__pid__tuner_8h.html","title":"File nt_motor_pid_tuner.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; nt_motor_pid_tuner.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;condition_variable&gt;</code></li> <li><code>#include &lt;initializer_list&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;mutex&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;thread&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;ctre/phoenix6/core/CoreTalonFX.hpp&gt;</code></li> <li><code>#include \"argos_lib/general/nt_subscriber.h\"</code></li> </ul>"},{"location":"argos-lib/nt__motor__pid__tuner_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/nt__motor__pid__tuner_8h.html#classes","title":"Classes","text":"Type Name struct ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. class NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_motor_pid_tuner.h</code></p>"},{"location":"argos-lib/nt__motor__pid__tuner_8h_source.html","title":"File nt_motor_pid_tuner.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; nt_motor_pid_tuner.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;condition_variable&gt;\n#include &lt;initializer_list&gt;\n#include &lt;memory&gt;\n#include &lt;mutex&gt;\n#include &lt;string&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n\n#include &lt;ctre/phoenix6/core/CoreTalonFX.hpp&gt;\n\n#include \"argos_lib/general/nt_subscriber.h\"\n\nnamespace argos_lib {\n\n  template &lt;class Callable&gt;\n  constexpr double GetPositionConversionFactor(Callable toPhysicalUnitsFunction) {\n    return toPhysicalUnitsFunction(units::angle::turn_t{1}).template to&lt;double&gt;();\n  }\n\n  template &lt;class Callable&gt;\n  constexpr double GetVelocityConversionFactor(Callable toPhysicalUnitsFunction) {\n    return toPhysicalUnitsFunction(units::angle::turn_t{1.0} / units::time::second_t{1.0}).template to&lt;double&gt;();\n  }\n\n  struct ClosedLoopSensorConversions {\n    double position{1.0};  \n    double velocity{1.0};  \n    double setpoint{\n        1.0};  \n  };\n\n  class NTMotorPIDTuner {\n    using BaseTalon = ctre::phoenix6::hardware::core::CoreTalonFX;\n\n   public:\n    NTMotorPIDTuner(const std::string&amp; tableName,\n                    std::initializer_list&lt;BaseTalon*&gt; motors,\n                    unsigned pidSlot,\n                    ClosedLoopSensorConversions sensorConversions = {});\n\n    ~NTMotorPIDTuner();\n\n   private:\n    argos_lib::NTSubscriber\n        m_updateSubscriber;  \n    const std::vector&lt;BaseTalon*&gt; m_pMotors;       \n    const unsigned m_pidSlot;                      \n    std::shared_ptr&lt;nt::NetworkTable&gt; m_pntTable;  \n    ClosedLoopSensorConversions\n        m_sensorConversions;  \n\n    std::mutex m_threadMutex;                \n    std::condition_variable m_threadStopCv;  \n    std::thread m_statusUpdateThread;        \n\n    ctre::phoenix6::configs::SlotConfigs m_activeConfigs;  \n\n    void UpdateClosedLoopMonitoringThread();\n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/nt__subscriber_8h.html","title":"File nt_subscriber.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; nt_subscriber.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;networktables/DoubleTopic.h&gt;</code></li> <li><code>#include &lt;networktables/NetworkTableInstance.h&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"argos-lib/nt__subscriber_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/nt__subscriber_8h.html#classes","title":"Classes","text":"Type Name class NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/nt_subscriber.h</code></p>"},{"location":"argos-lib/nt__subscriber_8h_source.html","title":"File nt_subscriber.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; nt_subscriber.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;networktables/DoubleTopic.h&gt;\n#include &lt;networktables/NetworkTableInstance.h&gt;\n\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nnamespace argos_lib {\n  class NTSubscriber {\n   public:\n    explicit NTSubscriber(const std::string&amp; tableName);\n\n    ~NTSubscriber();\n\n    void AddMonitor(const std::string&amp; keyName,\n                    std::function&lt;void(double)&gt; onUpdateCallback,\n                    const double defaultValue = 0.0,\n                    const bool forceUpdate = true);\n\n   private:\n    const std::string m_tableName;           \n    std::vector&lt;NT_Entry&gt; m_ntEntries;       \n    std::vector&lt;NT_Listener&gt; m_ntListeners;  \n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/odometry__aim_8h.html","title":"File odometry_aim.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; odometry_aim.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc/geometry/Translation2d.h&gt;</code></li> <li><code>#include &lt;frc/geometry/Translation3d.h&gt;</code></li> <li><code>#include \"units/angle.h\"</code></li> <li><code>#include \"units/length.h\"</code></li> </ul>"},{"location":"argos-lib/odometry__aim_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace odometry_aim <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/odometry_aim.h</code></p>"},{"location":"argos-lib/odometry__aim_8h_source.html","title":"File odometry_aim.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; odometry_aim.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc/geometry/Translation2d.h&gt;\n#include &lt;frc/geometry/Translation3d.h&gt;\n\n#include \"units/angle.h\"\n#include \"units/length.h\"\n\nnamespace argos_lib {\n  namespace odometry_aim {\n    units::degree_t GetAngleToTarget(const frc::Translation2d&amp; currentEstimatedRobotPose,\n                                     const frc::Translation3d&amp; targetPoseOnField);\n\n    units::meter_t GetDistanceToTarget(const frc::Translation2d&amp; currentEstimatedRobotPose,\n                                       const frc::Translation3d&amp; targetPoseOnField);\n  }  // namespace odometry_aim\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/swerve__utils_8h.html","title":"File swerve_utils.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; swerve_utils.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc/kinematics/SwerveModuleState.h&gt;</code></li> <li><code>#include &lt;units/angle.h&gt;</code></li> <li><code>#include &lt;units/angular_velocity.h&gt;</code></li> <li><code>#include &lt;units/velocity.h&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include \"interpolation.h\"</code></li> </ul>"},{"location":"argos-lib/swerve__utils_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace swerve"},{"location":"argos-lib/swerve__utils_8h.html#classes","title":"Classes","text":"Type Name struct SwerveModulePositions Representation of the absolute encoder position of each module at home position. struct TranslationSpeeds Translation speeds as percent max output. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/general/swerve_utils.h</code></p>"},{"location":"argos-lib/swerve__utils_8h_source.html","title":"File swerve_utils.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; general &gt; swerve_utils.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc/kinematics/SwerveModuleState.h&gt;\n#include &lt;units/angle.h&gt;\n#include &lt;units/angular_velocity.h&gt;\n#include &lt;units/velocity.h&gt;\n\n#include &lt;optional&gt;\n\n#include \"interpolation.h\"\n\nnamespace argos_lib {\n  namespace swerve {\n\n    frc::SwerveModuleState Optimize(frc::SwerveModuleState desiredState,\n                                    units::degree_t currentModuleAngle,\n                                    units::degrees_per_second_t currentModuleAngularRate,\n                                    units::feet_per_second_t currentModuleDriveVel,\n                                    units::feet_per_second_t maxVelocity);\n\n    struct SwerveModulePositions {\n      units::degree_t FrontLeft;\n      units::degree_t FrontRight;\n      units::degree_t RearRight;\n      units::degree_t RearLeft;\n    };\n\n    struct TranslationSpeeds {\n      double forwardSpeedPct;  \n      double leftSpeedPct;     \n    };\n\n    template &lt;class T&gt;\n    [[nodiscard]] constexpr TranslationSpeeds CircularInterpolate(const TranslationSpeeds rawSpeeds,\n                                                                  const T interpMap) {\n      const double magnitude = std::sqrt(std::pow(rawSpeeds.forwardSpeedPct, 2) + std::pow(rawSpeeds.leftSpeedPct, 2));\n      const double angle = std::atan2(rawSpeeds.leftSpeedPct, rawSpeeds.forwardSpeedPct);\n      const double mappedMagnitude = interpMap(magnitude);\n      return TranslationSpeeds{mappedMagnitude * std::cos(angle), mappedMagnitude * std::sin(angle)};\n    }\n\n  }  // namespace swerve\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_d41870077d9859a02d90bd74c6566322.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; homing</p>"},{"location":"argos-lib/dir_d41870077d9859a02d90bd74c6566322.html#files","title":"Files","text":"Type Name file fs_homing.h file homing_interface.h file network_tables_homing_storage.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/</code></p>"},{"location":"argos-lib/fs__homing_8h.html","title":"File fs_homing.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; homing &gt; fs_homing.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fstream&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include \"argos_lib/general/swerve_utils.h\"</code></li> <li><code>#include \"argos_lib/homing/homing_interface.h\"</code></li> <li><code>#include \"units/base.h\"</code></li> <li><code>#include \"wpi/fs.h\"</code></li> </ul>"},{"location":"argos-lib/fs__homing_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/fs__homing_8h.html#classes","title":"Classes","text":"Type Name class FSHomingStorage &lt;class T&gt;Saves and loads home positions from filesystem. class SwerveFSHomingStorage <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/fs_homing.h</code></p>"},{"location":"argos-lib/fs__homing_8h_source.html","title":"File fs_homing.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; homing &gt; fs_homing.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n\n#include \"argos_lib/general/swerve_utils.h\"\n#include \"argos_lib/homing/homing_interface.h\"\n#include \"units/base.h\"\n#include \"wpi/fs.h\"\n\nnamespace argos_lib {\n\n  class SwerveFSHomingStorage : public SwerveHomeStorageInterface {\n   public:\n    explicit SwerveFSHomingStorage(const fs::path&amp; swerveHomesPath);\n    bool Save(const argos_lib::swerve::SwerveModulePositions&amp; homePosition) override;\n    std::optional&lt;argos_lib::swerve::SwerveModulePositions&gt; Load() override;\n\n   private:\n    fs::path GetFilePath();\n    const fs::path m_swerveHomesPath;  \n  };\n\n  template &lt;class T&gt;\n  class FSHomingStorage : public HomingStorageInterface&lt;T&gt; {\n   public:\n    explicit FSHomingStorage(const fs::path&amp; homeFilePath) : m_homesPath{homeFilePath} {};\n\n    bool Save(const T&amp; homePosition) override {\n      try {\n        bool success = true;\n        std::ofstream configFile(GetFilePath(), std::ios::out);\n        if (configFile.good()) {\n          configFile &lt;&lt; homePosition.template to&lt;double&gt;();\n          if (!configFile.good()) {\n            std::cout &lt;&lt; \"[ERROR] Could not write to config file\\n\";\n            success = false;\n          }\n        } else {\n          std::cout &lt;&lt; \"[ERROR] Could not open config file\\n\";\n          success = false;\n        }\n        configFile.close();\n        return success;\n      } catch (...) {\n        // Error accessing file\n        std::cout &lt;&lt; \"[ERROR] Could not write to config file\\n\";\n        return false;\n      }\n    }\n\n    std::optional&lt;T&gt; Load() override {\n      try {\n        bool success = true;\n        std::ifstream configFile(GetFilePath(), std::ios::in);\n\n        if (configFile.peek() == std::ifstream::traits_type::eof()) {\n          return std::nullopt;\n        }\n\n        double homePosition;\n        configFile &gt;&gt; homePosition;\n\n        configFile.close();\n        if (success) {\n          return units::make_unit&lt;T&gt;(homePosition);\n        } else {\n          return std::nullopt;\n        }\n      } catch (...) {\n        // Error accessing file\n        std::cout &lt;&lt; \"[ERROR] Could not read from config file\\n\";\n        return std::nullopt;\n      }\n    }\n\n   private:\n    fs::path GetFilePath() {\n      static const fs::path homeDir{\"/home/lvuser\"};\n      const fs::path configFile{homeDir / m_homesPath};\n\n      std::cout &lt;&lt; \"############# Path: \" &lt;&lt; configFile &lt;&lt; '\\n';\n\n      // Create empty file if it doesn't exist yet\n      if (!fs::exists(configFile)) {\n        fs::create_directories(configFile.parent_path());\n        std::ofstream newFile(configFile);\n        newFile.close();\n      }\n\n      return configFile;\n    }\n\n    const fs::path m_homesPath;\n  };\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/homing__interface_8h.html","title":"File homing_interface.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; homing &gt; homing_interface.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"argos_lib/general/swerve_utils.h\"</code></li> </ul>"},{"location":"argos-lib/homing__interface_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/homing__interface_8h.html#classes","title":"Classes","text":"Type Name class HomingStorageInterface &lt;class T&gt;Interface capable of saving and loading home positions from persistent storage. class SwerveHomeStorageInterface Interface capable of saving and loading module home positions from persistent storage. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/homing_interface.h</code></p>"},{"location":"argos-lib/homing__interface_8h_source.html","title":"File homing_interface.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; homing &gt; homing_interface.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include \"argos_lib/general/swerve_utils.h\"\n\nnamespace argos_lib {\n  class SwerveHomeStorageInterface {\n   public:\n    virtual bool Save(const argos_lib::swerve::SwerveModulePositions&amp; homePosition) = 0;\n\n    [[nodiscard]] virtual std::optional&lt;argos_lib::swerve::SwerveModulePositions&gt; Load() = 0;\n  };\n\n  template &lt;class T&gt;\n  class HomingStorageInterface {\n   public:\n    virtual bool Save(const T&amp; homePosition) = 0;\n\n    [[nodiscard]] virtual std::optional&lt;T&gt; Load() = 0;\n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/network__tables__homing__storage_8h.html","title":"File network_tables_homing_storage.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; homing &gt; network_tables_homing_storage.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"argos_lib/general/swerve_utils.h\"</code></li> <li><code>#include \"argos_lib/homing/homing_interface.h\"</code></li> </ul>"},{"location":"argos-lib/network__tables__homing__storage_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace swerve"},{"location":"argos-lib/network__tables__homing__storage_8h.html#classes","title":"Classes","text":"Type Name class NetworkTablesHomingStorage Saves and loads swerve module homes to networkTables. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/homing/network_tables_homing_storage.h</code></p>"},{"location":"argos-lib/network__tables__homing__storage_8h_source.html","title":"File network_tables_homing_storage.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; homing &gt; network_tables_homing_storage.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n\n#include \"argos_lib/general/swerve_utils.h\"\n#include \"argos_lib/homing/homing_interface.h\"\n\nnamespace argos_lib {\n  namespace swerve {\n    class NetworkTablesHomingStorage : public SwerveHomeStorageInterface {\n     public:\n      NetworkTablesHomingStorage(const std::string&amp; tableName,\n                                 const std::string&amp; frontLeftPath,\n                                 const std::string&amp; frontRightPath,\n                                 const std::string&amp; rearRightPath,\n                                 const std::string&amp; rearLeftPath);\n\n      bool Save(const argos_lib::swerve::SwerveModulePositions&amp; homePosition) override;\n      [[nodiscard]] std::optional&lt;argos_lib::swerve::SwerveModulePositions&gt; Load() override;\n\n     private:\n      const std::string m_tableName;\n      const std::string m_frontLeftPath;\n      const std::string m_frontRightPath;\n      const std::string m_rearRightPath;\n      const std::string m_rearLeftPath;\n    };\n  }  // namespace swerve\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_92b511606ba5c2da7e2dda655454d24f.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; led</p>"},{"location":"argos-lib/dir_92b511606ba5c2da7e2dda655454d24f.html#files","title":"Files","text":"Type Name file animiation.h file geometry.h file panel.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/</code></p>"},{"location":"argos-lib/animiation_8h.html","title":"File animiation.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; led &gt; animiation.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;argos_lib/led/panel.h&gt;</code></li> <li><code>#include &lt;frc/AddressableLED.h&gt;</code></li> <li><code>#include &lt;units/angle.h&gt;</code></li> <li><code>#include &lt;units/time.h&gt;</code></li> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> </ul>"},{"location":"argos-lib/animiation_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace led namespace animation"},{"location":"argos-lib/animiation_8h.html#classes","title":"Classes","text":"Type Name struct Animation A representation of a custom LED animation. struct Sprite https://en.wikipedia.org/wiki/Sprite_(computer_graphics) __ <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/animiation.h</code></p>"},{"location":"argos-lib/animiation_8h_source.html","title":"File animiation.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; led &gt; animiation.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;argos_lib/led/panel.h&gt;\n#include &lt;frc/AddressableLED.h&gt;\n#include &lt;units/angle.h&gt;\n#include &lt;units/time.h&gt;\n\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n\nnamespace argos_lib {\n  namespace led {\n    struct Animation {\n      Animation() = delete;\n\n      Animation(std::function&lt;Strip()&gt; update, unsigned numLEDs, unsigned offset)\n          : update{update}, numLEDs{numLEDs}, offset{offset} {};\n\n      std::function&lt;Strip()&gt; update;  \n      unsigned numLEDs;               \n      unsigned offset;                \n    };\n\n    struct Sprite {\n      Panel colors;  \n      Mask alpha;    \n    };\n\n    using AnimatedSprite = std::function&lt;Sprite()&gt;;  \n\n    namespace animation {\n      Animation Pong(unsigned offset,\n                     unsigned width,\n                     unsigned height,\n                     unsigned ballSize,\n                     bool rainbow,\n                     frc::AddressableLED::LEDData ballColor,\n                     frc::AddressableLED::LEDData backgroundColor,\n                     units::millisecond_t frameTime,\n                     argos_lib::led::PanelScanParams scanParams);\n\n      AnimatedSprite ChompingPacMan(float radius,\n                                    frc::AddressableLED::LEDData color,\n                                    units::degree_t direction,\n                                    units::millisecond_t chompPeriod,\n                                    bool feathered = false);\n      AnimatedSprite DyingPacMan(float radius,\n                                 frc::AddressableLED::LEDData color,\n                                 units::degree_t direction,\n                                 units::degree_t initialMouthAngle,\n                                 units::millisecond_t animationTime,\n                                 bool feathered = false);\n\n      Animation PacManPacing(unsigned offset,\n                             unsigned width,\n                             unsigned height,\n                             bool rainbow,\n                             frc::AddressableLED::LEDData pacManColor,\n                             argos_lib::led::PrimaryScanDirection paceDirection,\n                             units::millisecond_t chompPeriod,\n                             units::millisecond_t moveSpeed,\n                             argos_lib::led::PanelScanParams scanParams,\n                             bool feathered = false);\n\n      void DrawRectangle(\n          Panel&amp; dest, unsigned rectWidth, unsigned rectHeight, float x, float y, frc::AddressableLED::LEDData color);\n\n      void DrawCircle(\n          Panel&amp; dest, float radius, float x, float y, frc::AddressableLED::LEDData color, bool feathered = false);\n\n      Sprite DrawCircleSprite(float radius, frc::AddressableLED::LEDData color, bool feathered = false);\n\n      void RenderSprite(Panel&amp; dest, const Sprite&amp; sprite, float x, float y, float alpha = 1.0);\n\n      Sprite DrawPacMan(float radius,\n                        frc::AddressableLED::LEDData color,\n                        units::degree_t direction,\n                        units::degree_t mouthAngle,\n                        bool feathered = false);\n    }  // namespace animation\n  }  // namespace led\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/geometry_8h.html","title":"File geometry.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; led &gt; geometry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;units/angle.h&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> </ul>"},{"location":"argos-lib/geometry_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace led <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/geometry.h</code></p>"},{"location":"argos-lib/geometry_8h_source.html","title":"File geometry.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; led &gt; geometry.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;units/angle.h&gt;\n\n#include &lt;optional&gt;\n#include &lt;utility&gt;\n\nnamespace argos_lib {\n  namespace led {\n    units::degree_t FlipHorizontal(units::degree_t incidentAngle);\n\n    units::degree_t FlipVertical(units::degree_t inicidentAngle);\n\n    bool PointInBox(float corner1X, float corner1Y, float corner2X, float corner2Y, float pointX, float pointY);\n\n    std::optional&lt;std::pair&lt;float, float&gt;&gt; SegmentIntersection(\n        float s1x1, float s1y1, float s1x2, float s1y2, float s2x1, float s2y1, float s2x2, float s2y2);\n  }  // namespace led\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/panel_8h.html","title":"File panel.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; led &gt; panel.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc/AddressableLED.h&gt;</code></li> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"argos-lib/panel_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace led"},{"location":"argos-lib/panel_8h.html#classes","title":"Classes","text":"Type Name class Array2D &lt;typename T&gt;Array2D representation where origin is at bottom left. struct PanelScanParams <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/led/panel.h</code></p>"},{"location":"argos-lib/panel_8h_source.html","title":"File panel.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; led &gt; panel.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc/AddressableLED.h&gt;\n\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nnamespace argos_lib {\n  namespace led {\n    template &lt;typename T&gt;\n    class Array2D {\n     public:\n      Array2D() = delete;\n      Array2D(unsigned width, unsigned height, T fillValue = {}) : m_cells(width, std::vector&lt;T&gt;(height, fillValue)) {}\n\n      T&amp; at(unsigned x, unsigned y) { return m_cells.at(x).at(y); }\n\n      const T&amp; at(unsigned x, unsigned y) const { return m_cells.at(x).at(y); }\n\n      unsigned Width() const noexcept { return m_cells.size(); }\n\n      unsigned Height() const noexcept {\n        try {\n          return m_cells.at(0).size();\n        } catch (const std::out_of_range&amp;) {\n          // Handle empty vector even though this shouldn't ever happen with deleted default constructor\n          return 0;\n        }\n      }\n\n     private:\n      std::vector&lt;std::vector&lt;T&gt;&gt;\n          m_cells;  \n    };\n\n    using Panel = Array2D&lt;frc::AddressableLED::LEDData&gt;;  \n    using Mask = Array2D&lt;float&gt;;  \n\n    using Strip = std::vector&lt;frc::AddressableLED::LEDData&gt;;\n\n    enum class PrimaryScanDirection { Vertical, Horizontal };\n\n    enum class FirstPixelPosition { TopRight, TopLeft, BottomLeft, BottomRight };\n\n    struct PanelScanParams {\n      FirstPixelPosition firstPixel;       \n      PrimaryScanDirection scanDirection;  \n    };\n\n    Strip Serialize(const Panel&amp; panel, const PanelScanParams&amp; params);\n\n  }  // namespace led\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_74a079771991058d11b5f8805d16e2a9.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; subsystems</p>"},{"location":"argos-lib/dir_74a079771991058d11b5f8805d16e2a9.html#files","title":"Files","text":"Type Name file led_subsystem.h file swappable_controllers_subsystem.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/</code></p>"},{"location":"argos-lib/led__subsystem_8h.html","title":"File led_subsystem.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; subsystems &gt; led_subsystem.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;argos_lib/led/animiation.h&gt;</code></li> <li><code>#include &lt;argos_lib/led/panel.h&gt;</code></li> <li><code>#include &lt;ctre/phoenix/led/CANdle.h&gt;</code></li> <li><code>#include &lt;frc/AddressableLED.h&gt;</code></li> <li><code>#include &lt;frc2/command/SubsystemBase.h&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"argos-lib/led__subsystem_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/led__subsystem_8h.html#classes","title":"Classes","text":"Type Name struct LEDState Color and animation status for an individual LED. class LEDSubsystem <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/led_subsystem.h</code></p>"},{"location":"argos-lib/led__subsystem_8h_source.html","title":"File led_subsystem.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; subsystems &gt; led_subsystem.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;argos_lib/led/animiation.h&gt;\n#include &lt;argos_lib/led/panel.h&gt;\n#include &lt;ctre/phoenix/led/CANdle.h&gt;\n#include &lt;frc/AddressableLED.h&gt;\n#include &lt;frc2/command/SubsystemBase.h&gt;\n\n#include &lt;vector&gt;\n\nnamespace argos_lib {\n  struct LEDState {\n    bool animated{false};                \n    frc::AddressableLED::LEDData color;  \n\n    bool operator==(const LEDState&amp; other) const;\n    bool operator!=(const LEDState&amp; other) const;\n\n    LEDState&amp; operator=(const frc::AddressableLED::LEDData&amp; other);\n  };\n\n  class LEDSubsystem : public frc2::SubsystemBase {\n   private:\n    // Forward declaration\n    struct LEDUpdateGroup;\n\n   public:\n    explicit LEDSubsystem(unsigned numAuxLEDs);\n\n    void Periodic() override;\n\n    void StockAnimateAuxLEDs(ctre::phoenix::led::Animation&amp; animation, int slot);\n\n    void StockAnimateIntegratedLEDs(ctre::phoenix::led::Animation&amp; animation, int slot);\n\n    void CustomAnimateAuxLEDs(argos_lib::led::Animation animation);\n\n    void CustomAnimateIntegratedLEDs(argos_lib::led::Animation animation);\n\n   private:\n    std::vector&lt;LEDState&gt; m_currentLEDs;                        \n    std::vector&lt;LEDState&gt; m_prevLEDs;                           \n    std::vector&lt;argos_lib::led::Animation&gt; m_customAnimations;  \n    ctre::phoenix::led::CANdle m_controller;                    \n\n    constexpr static unsigned numIntegratedLEDs = 8;  \n\n    std::vector&lt;LEDUpdateGroup&gt; GetDeltaUpdate(const std::vector&lt;LEDState&gt;&amp; prev, const std::vector&lt;LEDState&gt;&amp; current);\n\n    struct LEDUpdateGroup {\n      LEDUpdateGroup(unsigned startIndex, unsigned numLEDs, frc::AddressableLED::LEDData color)\n          : startIndex{startIndex}, numLEDs{numLEDs}, color{color} {};\n\n      unsigned startIndex;                 \n      unsigned numLEDs;                    \n      frc::AddressableLED::LEDData color;  \n    };\n  };\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/swappable__controllers__subsystem_8h.html","title":"File swappable_controllers_subsystem.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; subsystems &gt; swappable_controllers_subsystem.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/SubsystemBase.h&gt;</code></li> <li><code>#include \"argos_lib/controller/xbox_controller.h\"</code></li> </ul>"},{"location":"argos-lib/swappable__controllers__subsystem_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib"},{"location":"argos-lib/swappable__controllers__subsystem_8h.html#classes","title":"Classes","text":"Type Name class SwappableControllersSubsystem Allows two controllers to swap between \"Driver\" and \"Operator\" control schemes on the fly by swapping the m_driverController and m_operatorController objects. <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/subsystems/swappable_controllers_subsystem.h</code></p>"},{"location":"argos-lib/swappable__controllers__subsystem_8h_source.html","title":"File swappable_controllers_subsystem.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; subsystems &gt; swappable_controllers_subsystem.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;frc2/command/SubsystemBase.h&gt;\n\n#include \"argos_lib/controller/xbox_controller.h\"\n\nnamespace argos_lib {\n\n  class SwappableControllersSubsystem : public frc2::SubsystemBase {\n   public:\n    SwappableControllersSubsystem() = delete;\n    SwappableControllersSubsystem(int driverControllerPort, int operatorControllerPort);\n\n    void Swap();\n\n    argos_lib::XboxController&amp; DriverController();\n    argos_lib::XboxController&amp; OperatorController();\n\n    void Periodic() override;\n\n    void VibrateAll(argos_lib::VibrationModel newModel);\n\n   private:\n    argos_lib::XboxController m_driverController;    \n    argos_lib::XboxController m_operatorController;  \n    bool m_swapped;                                  \n\n    void UpdateVibration();\n  };\n\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_4b5bf1f302d4aefee80cb53d26fbb3eb.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/testing","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; testing</p>"},{"location":"argos-lib/dir_4b5bf1f302d4aefee80cb53d26fbb3eb.html#files","title":"Files","text":"Type Name file assertions.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/testing/</code></p>"},{"location":"argos-lib/assertions_8h.html","title":"File assertions.h","text":"<p>FileList &gt; argos_lib &gt; include &gt; argos_lib &gt; testing &gt; assertions.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include &lt;gtest/gtest.h&gt;</code></li> <li><code>#include &lt;units/math.h&gt;</code></li> </ul>"},{"location":"argos-lib/assertions_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace argos_lib namespace testing <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/include/argos_lib/testing/assertions.h</code></p>"},{"location":"argos-lib/assertions_8h_source.html","title":"File assertions.h","text":"<p>File List &gt; argos_lib &gt; include &gt; argos_lib &gt; testing &gt; assertions.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;fmt/format.h&gt;\n#include &lt;gtest/gtest.h&gt;\n#include &lt;units/math.h&gt;\n\nnamespace argos_lib {\n  namespace testing {\n\n    template &lt;class UnitTypeLhs, class UnitTypeRhs, class UnitTypeTol&gt;\n    ::testing::AssertionResult UnitEqual(UnitTypeLhs actual, UnitTypeRhs expected, UnitTypeTol tolerance) {\n      if (units::math::abs(actual - expected) &lt; tolerance) {\n        return ::testing::AssertionSuccess();\n      }\n      return ::testing::AssertionFailure()\n             &lt;&lt; fmt::format(\"{:.4f} not within {:.4f} of expected {:.4f}\", actual, tolerance, expected);\n    }\n\n    template &lt;class UnitTypeLhs, class UnitTypeRhs&gt;\n    ::testing::AssertionResult UnitEqual(UnitTypeLhs actual, UnitTypeRhs expected) {\n      return UnitEqual(actual, expected, decltype(actual)(0.001));\n    }\n\n  }  // namespace testing\n}  // namespace argos_lib\n</code></pre>"},{"location":"argos-lib/dir_8362aa97a1d745aa00f462ada9d778c3.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/test","text":"<p>FileList &gt; argos_lib &gt; test</p>"},{"location":"argos-lib/dir_8362aa97a1d745aa00f462ada9d778c3.html#files","title":"Files","text":"Type Name file edge_detector_test.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/test/</code></p>"},{"location":"argos-lib/edge__detector__test_8cpp.html","title":"File edge_detector_test.cpp","text":"<p>FileList &gt; argos_lib &gt; test &gt; edge_detector_test.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;gtest/gtest.h&gt;</code></li> <li><code>#include \"argos_lib/general/edge_detector.h\"</code></li> </ul>"},{"location":"argos-lib/edge__detector__test_8cpp.html#public-functions","title":"Public Functions","text":"Type Name TEST (EdgeDetectorTest, NoEdge)  TEST (EdgeDetectorTest, RisingEdge)  TEST (EdgeDetectorTest, FallingEdge)  TEST (EdgeDetectorTest, RiseFall)  TEST (EdgeDetectorTest, FallRise)"},{"location":"argos-lib/edge__detector__test_8cpp.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"argos-lib/edge__detector__test_8cpp.html#function-test","title":"function TEST","text":"<pre><code>TEST (\n    EdgeDetectorTest,\n    NoEdge\n) \n</code></pre>"},{"location":"argos-lib/edge__detector__test_8cpp.html#function-test_1","title":"function TEST","text":"<pre><code>TEST (\n    EdgeDetectorTest,\n    RisingEdge\n) \n</code></pre>"},{"location":"argos-lib/edge__detector__test_8cpp.html#function-test_2","title":"function TEST","text":"<pre><code>TEST (\n    EdgeDetectorTest,\n    FallingEdge\n) \n</code></pre>"},{"location":"argos-lib/edge__detector__test_8cpp.html#function-test_3","title":"function TEST","text":"<pre><code>TEST (\n    EdgeDetectorTest,\n    RiseFall\n) \n</code></pre>"},{"location":"argos-lib/edge__detector__test_8cpp.html#function-test_4","title":"function TEST","text":"<pre><code>TEST (\n    EdgeDetectorTest,\n    FallRise\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/test/edge_detector_test.cpp</code></p>"},{"location":"argos-lib/edge__detector__test_8cpp_source.html","title":"File edge_detector_test.cpp","text":"<p>File List &gt; argos_lib &gt; test &gt; edge_detector_test.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include &lt;gtest/gtest.h&gt;\n\n#include \"argos_lib/general/edge_detector.h\"\n\nusing argos_lib::EdgeDetector;\n\nTEST(EdgeDetectorTest, NoEdge) {\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, false);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector(false), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, true);\n    EXPECT_EQ(detector(true), false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector(true), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, false);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector(false), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, true);\n    EXPECT_EQ(detector(true), false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector(true), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, false);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector(false), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, true);\n    EXPECT_EQ(detector(true), false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector(true), false);\n  }\n}\n\nTEST(EdgeDetectorTest, RisingEdge) {\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, false);\n    EXPECT_EQ(detector(true), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::RISING);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, false);\n    EXPECT_EQ(detector(true), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::RISING);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, false);\n    EXPECT_EQ(detector(true), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::NONE);\n  }\n}\n\nTEST(EdgeDetectorTest, FallingEdge) {\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, true);\n    EXPECT_EQ(detector(false), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, true);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::FALLING);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, true);\n    EXPECT_EQ(detector(false), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, true);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, true);\n    EXPECT_EQ(detector(false), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, true);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::FALLING);\n  }\n}\n\nTEST(EdgeDetectorTest, RiseFall) {\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, false);\n    EXPECT_EQ(detector(true), true);\n    EXPECT_EQ(detector(false), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::RISING);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::FALLING);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, false);\n    EXPECT_EQ(detector(true), true);\n    EXPECT_EQ(detector(false), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::RISING);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, false);\n    EXPECT_EQ(detector(true), false);\n    EXPECT_EQ(detector(false), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, false);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::FALLING);\n  }\n}\n\nTEST(EdgeDetectorTest, FallRise) {\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, true);\n    EXPECT_EQ(detector(false), true);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector(true), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_BOTH, true);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::FALLING);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::RISING);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, true);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector(true), true);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_RISING, true);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::RISING);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, true);\n    EXPECT_EQ(detector(false), true);\n    EXPECT_EQ(detector(false), false);\n    EXPECT_EQ(detector(true), false);\n  }\n  {\n    EdgeDetector detector(EdgeDetector::EdgeDetectSettings::DETECT_FALLING, true);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::FALLING);\n    EXPECT_EQ(detector.Calculate(false), EdgeDetector::edgeStatus::NONE);\n    EXPECT_EQ(detector.Calculate(true), EdgeDetector::edgeStatus::NONE);\n  }\n}\n</code></pre>"},{"location":"argos-lib/namespaces.html","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace anonymous namespace{C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/trigger_composition.cpp} </li> <li>namespace argos_lib <ul> <li>namespace angle </li> <li>namespace cancoder_config </li> <li>namespace colors </li> <li>namespace falcon_config </li> <li>namespace gamma_corrected_colors </li> <li>namespace led <ul> <li>namespace animation </li> </ul> </li> <li>namespace odometry_aim </li> <li>namespace status_frame_config </li> <li>namespace swerve </li> <li>namespace talonsrx_config </li> <li>namespace testing </li> <li>namespace triggers </li> </ul> </li> <li>namespace frc </li> <li>namespace frc2 </li> <li>namespace chrono_literals </li> </ul>"},{"location":"argos-lib/classes.html","title":"Class Index","text":""},{"location":"argos-lib/classes.html#a","title":"a","text":"<ul> <li>Animation (argos_lib::led)</li> <li>ArgosColor (argos_lib)</li> <li>ArgosLogger (argos_lib)</li> <li>Array2D (argos_lib::led)</li> </ul>"},{"location":"argos-lib/classes.html#c","title":"c","text":"<ul> <li>CANAddress (argos_lib)</li> <li>ClosedLoopSensorConversions</li> <li>ClosedLoopSensorConversions (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#d","title":"d","text":"<ul> <li>Debouncer</li> <li>Debouncer (argos_lib)</li> <li>DebounceSettings (argos_lib)</li> <li>DPadButtons</li> </ul>"},{"location":"argos-lib/classes.html#e","title":"e","text":"<ul> <li>EdgeDetector</li> <li>EdgeDetector (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#f","title":"f","text":"<ul> <li>FSHomingStorage (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#g","title":"g","text":"<ul> <li>GenericDebouncer (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#h","title":"h","text":"<ul> <li>HomingStorageInterface (argos_lib)</li> <li>HysteresisFilter (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#i","title":"i","text":"<ul> <li>InterpMapPoint (argos_lib)</li> <li>InterpolationMap (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#l","title":"l","text":"<ul> <li>LEDState (argos_lib)</li> <li>LEDSubsystem (argos_lib)</li> <li>LEDUpdateGroup</li> </ul>"},{"location":"argos-lib/classes.html#n","title":"n","text":"<ul> <li>NetworkTablesHomingStorage</li> <li>NetworkTablesHomingStorage (argos_lib::swerve)</li> <li>NTMotorPIDTuner</li> <li>NTMotorPIDTuner (argos_lib)</li> <li>NTSubscriber</li> <li>NTSubscriber (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#p","title":"p","text":"<ul> <li>PanelScanParams (argos_lib::led)</li> </ul>"},{"location":"argos-lib/classes.html#s","title":"s","text":"<ul> <li>Sprite (argos_lib::led)</li> <li>SwapControllersCommand (argos_lib)</li> <li>SwappableControllersSubsystem (argos_lib)</li> <li>SwerveFSHomingStorage</li> <li>SwerveFSHomingStorage (argos_lib)</li> <li>SwerveHomeStorageInterface (argos_lib)</li> <li>SwerveModulePositions (argos_lib::swerve)</li> </ul>"},{"location":"argos-lib/classes.html#t","title":"t","text":"<ul> <li>TranslationSpeeds (argos_lib::swerve)</li> </ul>"},{"location":"argos-lib/classes.html#u","title":"u","text":"<ul> <li>UpdateStatus (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/classes.html#v","title":"v","text":"<ul> <li>VibrationStatus (argos_lib)</li> </ul>"},{"location":"argos-lib/classes.html#x","title":"x","text":"<ul> <li>XboxController (argos_lib)</li> </ul>"},{"location":"argos-lib/hierarchy.html","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class Debouncer </li> <li>class EdgeDetector </li> <li>class NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. </li> <li>class NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. </li> <li>class argos_lib::SwerveHomeStorageInterface Interface capable of saving and loading module home positions from persistent storage. <ul> <li>class argos_lib::SwerveFSHomingStorage </li> <li>class argos_lib::swerve::NetworkTablesHomingStorage Saves and loads swerve module homes to networkTables. </li> </ul> </li> <li>class argos_lib::ArgosLogger Log to the console in a clean, repeatable manner. </li> <li>class argos_lib::Debouncer </li> <li>class argos_lib::EdgeDetector </li> <li>class argos_lib::HomingStorageInterface Interface capable of saving and loading home positions from persistent storage. <ul> <li>class argos_lib::FSHomingStorage Saves and loads home positions from filesystem. </li> </ul> </li> <li>class argos_lib::GenericDebouncer </li> <li>class argos_lib::HysteresisFilter A simple hysteresis filter for giving a bool output for a threshold. </li> <li>class argos_lib::InterpolationMap Performs linear interpolation of a value based on a set of input-&gt;output mapping points. </li> <li>class argos_lib::NTMotorPIDTuner Allows user to set PID parameters from network tables and update the motor configurations on updates. Also monitors status information from motors to aid tuning. </li> <li>class argos_lib::NTSubscriber Subscribes to Network Tables entry updates and calls a specified callback to use the new value. </li> <li>class argos_lib::led::Array2D Array2D representation where origin is at bottom left.</li> <li>struct ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. </li> <li>struct argos_lib::ArgosColor </li> <li>struct argos_lib::CANAddress </li> <li>struct argos_lib::ClosedLoopSensorConversions Conversion factors to aid displaying sensor values as meaningful numbers. </li> <li>struct argos_lib::DebounceSettings </li> <li>struct argos_lib::InterpMapPoint Point that helps generate an interpolation map. </li> <li>struct argos_lib::LEDState Color and animation status for an individual LED. </li> <li>struct argos_lib::VibrationStatus Vibration percentages that can be sent to controller for user feedback. </li> <li>struct argos_lib::XboxController::UpdateStatus State of an individual button. </li> <li>struct argos_lib::led::Animation A representation of a custom LED animation. </li> <li>struct argos_lib::led::PanelScanParams </li> <li>struct argos_lib::led::Sprite https://en.wikipedia.org/wiki/Sprite_(computer_graphics) __</li> <li>struct argos_lib::swerve::SwerveModulePositions Representation of the absolute encoder position of each module at home position. </li> <li>struct argos_lib::swerve::TranslationSpeeds Translation speeds as percent max output. </li> <li>struct argos_lib::LEDSubsystem::LEDUpdateGroup Represents a contiguous block of LEDs that have the same color. </li> <li>struct argos_lib::XboxController::DPadButtons Parsed directional pad button states. </li> <li>class frc2::SubsystemBase <ul> <li>class argos_lib::LEDSubsystem </li> <li>class argos_lib::SwappableControllersSubsystem Allows two controllers to swap between \"Driver\" and \"Operator\" control schemes on the fly by swapping the m_driverController and m_operatorController objects. </li> </ul> </li> <li>class frc2::CommandHelper&lt; frc2::Command, SwapControllersCommand &gt; <ul> <li>class argos_lib::SwapControllersCommand Swaps rolls of two controllers. Useful if one controller breaks during a match. </li> </ul> </li> <li>class frc::GenericHID <ul> <li>class argos_lib::XboxController </li> </ul> </li> </ul>"},{"location":"argos-lib/modules.html","title":"Modules","text":"<p>No modules found.</p>"},{"location":"argos-lib/pages.html","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"argos-lib/class_members.html","title":"Class Members","text":""},{"location":"argos-lib/class_members.html#a","title":"a","text":"<ul> <li>AddMonitor (NTSubscriber, argos_lib::NTSubscriber)</li> <li>ArgosLogger (argos_lib::ArgosLogger)</li> <li>address (argos_lib::CANAddress)</li> <li>activateTime (argos_lib::DebounceSettings)</li> <li>animated (argos_lib::LEDState)</li> <li>Axis (argos_lib::XboxController)</li> <li>analogTriggerThresh (argos_lib::XboxController)</li> <li>Animation (argos_lib::led::Animation)</li> <li>Array2D (argos_lib::led::Array2D)</li> <li>at (argos_lib::led::Array2D)</li> <li>alpha (argos_lib::led::Sprite)</li> </ul>"},{"location":"argos-lib/class_members.html#b","title":"b","text":"<ul> <li>BaseTalon (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>b (argos_lib::ArgosColor)</li> <li>busName (argos_lib::CANAddress)</li> <li>Button (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_members.html#c","title":"c","text":"<ul> <li>Calculate (EdgeDetector, argos_lib::EdgeDetector)</li> <li>CANAddress (argos_lib::CANAddress)</li> <li>clearTime (argos_lib::DebounceSettings)</li> <li>color (argos_lib::LEDState, argos_lib::LEDSubsystem::LEDUpdateGroup)</li> <li>CustomAnimateAuxLEDs (argos_lib::LEDSubsystem)</li> <li>CustomAnimateIntegratedLEDs (argos_lib::LEDSubsystem)</li> <li>colors (argos_lib::led::Sprite)</li> </ul>"},{"location":"argos-lib/class_members.html#d","title":"d","text":"<ul> <li>Debouncer (Debouncer, argos_lib::Debouncer)</li> <li>DetectFalling (EdgeDetector, argos_lib::EdgeDetector)</li> <li>DetectRising (EdgeDetector, argos_lib::EdgeDetector)</li> <li>DriverController (argos_lib::SwappableControllersSubsystem)</li> <li>debounceActive (argos_lib::XboxController::UpdateStatus)</li> <li>debouncePress (argos_lib::XboxController::UpdateStatus)</li> <li>debounceRelease (argos_lib::XboxController::UpdateStatus)</li> <li>down (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_members.html#e","title":"e","text":"<ul> <li>EdgeDetectSettings (EdgeDetector, argos_lib::EdgeDetector)</li> <li>EdgeDetector (EdgeDetector, argos_lib::EdgeDetector)</li> <li>edgeStatus (EdgeDetector, argos_lib::EdgeDetector)</li> <li>End (argos_lib::SwapControllersCommand)</li> </ul>"},{"location":"argos-lib/class_members.html#f","title":"f","text":"<ul> <li>FSHomingStorage (argos_lib::FSHomingStorage)</li> <li>firstPixel (argos_lib::led::PanelScanParams)</li> <li>FrontLeft (argos_lib::swerve::SwerveModulePositions)</li> <li>FrontRight (argos_lib::swerve::SwerveModulePositions)</li> <li>forwardSpeedPct (argos_lib::swerve::TranslationSpeeds)</li> </ul>"},{"location":"argos-lib/class_members.html#g","title":"g","text":"<ul> <li>GetDebouncedStatus (Debouncer, argos_lib::Debouncer)</li> <li>GetRawStatus (Debouncer, argos_lib::Debouncer)</li> <li>GetFilePath (SwerveFSHomingStorage, argos_lib::FSHomingStorage, argos_lib::SwerveFSHomingStorage)</li> <li>g (argos_lib::ArgosColor)</li> <li>GenericDebouncer (argos_lib::GenericDebouncer)</li> <li>GetDeltaUpdate (argos_lib::LEDSubsystem)</li> <li>GetDebouncedButton (argos_lib::XboxController)</li> <li>GetDebouncedButtonPressed (argos_lib::XboxController)</li> <li>GetDebouncedButtonReleased (argos_lib::XboxController)</li> <li>GetPOVButtons (argos_lib::XboxController)</li> <li>GetRawButton (argos_lib::XboxController)</li> <li>GetRawButtonPressed (argos_lib::XboxController)</li> <li>GetRawButtonReleased (argos_lib::XboxController)</li> <li>GetTriggerAxis (argos_lib::XboxController)</li> <li>GetVibration (argos_lib::XboxController)</li> <li>GetX (argos_lib::XboxController)</li> <li>GetY (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_members.html#h","title":"h","text":"<ul> <li>HysteresisFilter (argos_lib::HysteresisFilter)</li> <li>Height (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_members.html#i","title":"i","text":"<ul> <li>InterpMapPoint (argos_lib::InterpMapPoint)</li> <li>inVal (argos_lib::InterpMapPoint)</li> <li>InterpolationMap (argos_lib::InterpolationMap)</li> <li>Initialize (argos_lib::SwapControllersCommand)</li> <li>intensityLeft (argos_lib::VibrationStatus)</li> <li>intensityRight (argos_lib::VibrationStatus)</li> </ul>"},{"location":"argos-lib/class_members.html#j","title":"j","text":"<ul> <li>JoystickHand (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_members.html#l","title":"l","text":"<ul> <li>Load (NetworkTablesHomingStorage, SwerveFSHomingStorage, argos_lib::FSHomingStorage, argos_lib::HomingStorageInterface, argos_lib::SwerveFSHomingStorage, argos_lib::SwerveHomeStorageInterface, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>Log (argos_lib::ArgosLogger)</li> <li>LEDSubsystem (argos_lib::LEDSubsystem)</li> <li>leftSpeedPct (argos_lib::swerve::TranslationSpeeds)</li> <li>LEDUpdateGroup (argos_lib::LEDSubsystem::LEDUpdateGroup)</li> <li>left (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_members.html#m","title":"m","text":"<ul> <li>m_debounceSettings (Debouncer, argos_lib::Debouncer)</li> <li>m_debounceTransitionTime (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>m_debouncedStatus (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>m_rawStatus (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>m_previousValue (EdgeDetector, argos_lib::EdgeDetector)</li> <li>m_settings (EdgeDetector, argos_lib::EdgeDetector)</li> <li>m_activeConfigs (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_pMotors (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_pidSlot (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_pntTable (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_sensorConversions (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_statusUpdateThread (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_threadMutex (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_threadStopCv (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_updateSubscriber (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_ntEntries (NTSubscriber, argos_lib::NTSubscriber)</li> <li>m_ntListeners (NTSubscriber, argos_lib::NTSubscriber)</li> <li>m_tableName (NTSubscriber, NetworkTablesHomingStorage, argos_lib::NTSubscriber, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_frontLeftPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_frontRightPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_rearLeftPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_rearRightPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_swerveHomesPath (SwerveFSHomingStorage, argos_lib::SwerveFSHomingStorage)</li> <li>m_tag (argos_lib::ArgosLogger)</li> <li>m_homesPath (argos_lib::FSHomingStorage)</li> <li>m_debounceTime (argos_lib::GenericDebouncer)</li> <li>m_activateThreshold (argos_lib::HysteresisFilter)</li> <li>m_currentState (argos_lib::HysteresisFilter)</li> <li>m_deactivateThreshold (argos_lib::HysteresisFilter)</li> <li>Map (argos_lib::InterpolationMap)</li> <li>m_mapArray (argos_lib::InterpolationMap)</li> <li>m_controller (argos_lib::LEDSubsystem)</li> <li>m_currentLEDs (argos_lib::LEDSubsystem)</li> <li>m_customAnimations (argos_lib::LEDSubsystem)</li> <li>m_prevLEDs (argos_lib::LEDSubsystem)</li> <li>m_pControllerSubsystem (argos_lib::SwapControllersCommand)</li> <li>m_driverController (argos_lib::SwappableControllersSubsystem)</li> <li>m_operatorController (argos_lib::SwappableControllersSubsystem)</li> <li>m_swapped (argos_lib::SwappableControllersSubsystem)</li> <li>m_buttonDebounceSettings (argos_lib::XboxController)</li> <li>m_buttonDebounceStatus (argos_lib::XboxController)</li> <li>m_buttonDebounceTransitionTime (argos_lib::XboxController)</li> <li>m_rawButtonStatus (argos_lib::XboxController)</li> <li>m_vibrationModel (argos_lib::XboxController)</li> <li>m_cells (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_members.html#n","title":"n","text":"<ul> <li>NTMotorPIDTuner (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>NTSubscriber (NTSubscriber, argos_lib::NTSubscriber)</li> <li>NetworkTablesHomingStorage (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>numIntegratedLEDs (argos_lib::LEDSubsystem)</li> <li>numLEDs (argos_lib::led::Animation, argos_lib::LEDSubsystem::LEDUpdateGroup)</li> </ul>"},{"location":"argos-lib/class_members.html#o","title":"o","text":"<ul> <li>operator() (Debouncer, EdgeDetector, argos_lib::Debouncer, argos_lib::EdgeDetector, argos_lib::GenericDebouncer, argos_lib::HysteresisFilter, argos_lib::InterpolationMap)</li> <li>operator* (argos_lib::ArgosColor)</li> <li>operator&lt; (argos_lib::InterpMapPoint)</li> <li>operator== (argos_lib::InterpMapPoint, argos_lib::LEDState)</li> <li>outVal (argos_lib::InterpMapPoint)</li> <li>operator!= (argos_lib::LEDState)</li> <li>operator= (argos_lib::LEDState)</li> <li>OperatorController (argos_lib::SwappableControllersSubsystem)</li> <li>offset (argos_lib::led::Animation)</li> </ul>"},{"location":"argos-lib/class_members.html#p","title":"p","text":"<ul> <li>position (ClosedLoopSensorConversions, argos_lib::ClosedLoopSensorConversions)</li> <li>Periodic (argos_lib::LEDSubsystem, argos_lib::SwappableControllersSubsystem)</li> <li>pressed (argos_lib::XboxController::UpdateStatus)</li> </ul>"},{"location":"argos-lib/class_members.html#r","title":"r","text":"<ul> <li>Reset (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>r (argos_lib::ArgosColor)</li> <li>rawActive (argos_lib::XboxController::UpdateStatus)</li> <li>released (argos_lib::XboxController::UpdateStatus)</li> <li>RearLeft (argos_lib::swerve::SwerveModulePositions)</li> <li>RearRight (argos_lib::swerve::SwerveModulePositions)</li> <li>right (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_members.html#s","title":"s","text":"<ul> <li>setpoint (ClosedLoopSensorConversions, argos_lib::ClosedLoopSensorConversions)</li> <li>Save (NetworkTablesHomingStorage, SwerveFSHomingStorage, argos_lib::FSHomingStorage, argos_lib::HomingStorageInterface, argos_lib::SwerveFSHomingStorage, argos_lib::SwerveHomeStorageInterface, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>SwerveFSHomingStorage (SwerveFSHomingStorage, argos_lib::SwerveFSHomingStorage)</li> <li>StockAnimateAuxLEDs (argos_lib::LEDSubsystem)</li> <li>StockAnimateIntegratedLEDs (argos_lib::LEDSubsystem)</li> <li>SwapControllersCommand (argos_lib::SwapControllersCommand)</li> <li>Swap (argos_lib::SwappableControllersSubsystem)</li> <li>SwappableControllersSubsystem (argos_lib::SwappableControllersSubsystem)</li> <li>SetButtonDebounce (argos_lib::XboxController)</li> <li>SetVibration (argos_lib::XboxController)</li> <li>SwapSettings (argos_lib::XboxController)</li> <li>scanDirection (argos_lib::led::PanelScanParams)</li> <li>startIndex (argos_lib::LEDSubsystem::LEDUpdateGroup)</li> </ul>"},{"location":"argos-lib/class_members.html#t","title":"t","text":"<ul> <li>ToString (EdgeDetector, argos_lib::EdgeDetector)</li> <li>TriggerAllOf (argos_lib::XboxController)</li> <li>TriggerAnyOf (argos_lib::XboxController)</li> <li>TriggerDebounced (argos_lib::XboxController)</li> <li>TriggerDebouncedAllOf (argos_lib::XboxController)</li> <li>TriggerDebouncedAnyOf (argos_lib::XboxController)</li> <li>TriggerDebouncedNoneOf (argos_lib::XboxController)</li> <li>TriggerDebouncedOneOf (argos_lib::XboxController)</li> <li>TriggerNoneOf (argos_lib::XboxController)</li> <li>TriggerOneOf (argos_lib::XboxController)</li> <li>TriggerRaw (argos_lib::XboxController)</li> <li>TriggerRawAllOf (argos_lib::XboxController)</li> <li>TriggerRawAnyOf (argos_lib::XboxController)</li> <li>TriggerRawNoneOf (argos_lib::XboxController)</li> <li>TriggerRawOneOf (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_members.html#u","title":"u","text":"<ul> <li>UpdateClosedLoopMonitoringThread (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>UpdateVibration (argos_lib::SwappableControllersSubsystem, argos_lib::XboxController)</li> <li>UpdateButton (argos_lib::XboxController)</li> <li>update (argos_lib::led::Animation)</li> <li>up (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_members.html#v","title":"v","text":"<ul> <li>velocity (ClosedLoopSensorConversions, argos_lib::ClosedLoopSensorConversions)</li> <li>VibrateAll (argos_lib::SwappableControllersSubsystem)</li> </ul>"},{"location":"argos-lib/class_members.html#w","title":"w","text":"<ul> <li>Width (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_members.html#x","title":"x","text":"<ul> <li>XboxController (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_members.html#_1","title":"~","text":"<ul> <li>~NTMotorPIDTuner (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>~NTSubscriber (NTSubscriber, argos_lib::NTSubscriber)</li> </ul>"},{"location":"argos-lib/class_member_functions.html","title":"Class Member Functions","text":""},{"location":"argos-lib/class_member_functions.html#a","title":"a","text":"<ul> <li>AddMonitor (NTSubscriber, argos_lib::NTSubscriber)</li> <li>ArgosLogger (argos_lib::ArgosLogger)</li> <li>Animation (argos_lib::led::Animation)</li> <li>Array2D (argos_lib::led::Array2D)</li> <li>at (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#c","title":"c","text":"<ul> <li>Calculate (EdgeDetector, argos_lib::EdgeDetector)</li> <li>CANAddress (argos_lib::CANAddress)</li> <li>CustomAnimateAuxLEDs (argos_lib::LEDSubsystem)</li> <li>CustomAnimateIntegratedLEDs (argos_lib::LEDSubsystem)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#d","title":"d","text":"<ul> <li>Debouncer (Debouncer, argos_lib::Debouncer)</li> <li>DetectFalling (EdgeDetector, argos_lib::EdgeDetector)</li> <li>DetectRising (EdgeDetector, argos_lib::EdgeDetector)</li> <li>DriverController (argos_lib::SwappableControllersSubsystem)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#e","title":"e","text":"<ul> <li>EdgeDetector (EdgeDetector, argos_lib::EdgeDetector)</li> <li>End (argos_lib::SwapControllersCommand)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#f","title":"f","text":"<ul> <li>FSHomingStorage (argos_lib::FSHomingStorage)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#g","title":"g","text":"<ul> <li>GetDebouncedStatus (Debouncer, argos_lib::Debouncer)</li> <li>GetRawStatus (Debouncer, argos_lib::Debouncer)</li> <li>GetFilePath (SwerveFSHomingStorage, argos_lib::FSHomingStorage, argos_lib::SwerveFSHomingStorage)</li> <li>GenericDebouncer (argos_lib::GenericDebouncer)</li> <li>GetDeltaUpdate (argos_lib::LEDSubsystem)</li> <li>GetDebouncedButton (argos_lib::XboxController)</li> <li>GetDebouncedButtonPressed (argos_lib::XboxController)</li> <li>GetDebouncedButtonReleased (argos_lib::XboxController)</li> <li>GetPOVButtons (argos_lib::XboxController)</li> <li>GetRawButton (argos_lib::XboxController)</li> <li>GetRawButtonPressed (argos_lib::XboxController)</li> <li>GetRawButtonReleased (argos_lib::XboxController)</li> <li>GetTriggerAxis (argos_lib::XboxController)</li> <li>GetVibration (argos_lib::XboxController)</li> <li>GetX (argos_lib::XboxController)</li> <li>GetY (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#h","title":"h","text":"<ul> <li>HysteresisFilter (argos_lib::HysteresisFilter)</li> <li>Height (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#i","title":"i","text":"<ul> <li>InterpMapPoint (argos_lib::InterpMapPoint)</li> <li>InterpolationMap (argos_lib::InterpolationMap)</li> <li>Initialize (argos_lib::SwapControllersCommand)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#l","title":"l","text":"<ul> <li>Load (NetworkTablesHomingStorage, SwerveFSHomingStorage, argos_lib::FSHomingStorage, argos_lib::HomingStorageInterface, argos_lib::SwerveFSHomingStorage, argos_lib::SwerveHomeStorageInterface, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>Log (argos_lib::ArgosLogger)</li> <li>LEDSubsystem (argos_lib::LEDSubsystem)</li> <li>LEDUpdateGroup (argos_lib::LEDSubsystem::LEDUpdateGroup)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#m","title":"m","text":"<ul> <li>Map (argos_lib::InterpolationMap)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#n","title":"n","text":"<ul> <li>NTMotorPIDTuner (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>NTSubscriber (NTSubscriber, argos_lib::NTSubscriber)</li> <li>NetworkTablesHomingStorage (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#o","title":"o","text":"<ul> <li>operator() (Debouncer, EdgeDetector, argos_lib::Debouncer, argos_lib::EdgeDetector, argos_lib::GenericDebouncer, argos_lib::HysteresisFilter, argos_lib::InterpolationMap)</li> <li>operator* (argos_lib::ArgosColor)</li> <li>operator&lt; (argos_lib::InterpMapPoint)</li> <li>operator== (argos_lib::InterpMapPoint, argos_lib::LEDState)</li> <li>operator!= (argos_lib::LEDState)</li> <li>operator= (argos_lib::LEDState)</li> <li>OperatorController (argos_lib::SwappableControllersSubsystem)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#p","title":"p","text":"<ul> <li>Periodic (argos_lib::LEDSubsystem, argos_lib::SwappableControllersSubsystem)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#r","title":"r","text":"<ul> <li>Reset (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#s","title":"s","text":"<ul> <li>Save (NetworkTablesHomingStorage, SwerveFSHomingStorage, argos_lib::FSHomingStorage, argos_lib::HomingStorageInterface, argos_lib::SwerveFSHomingStorage, argos_lib::SwerveHomeStorageInterface, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>SwerveFSHomingStorage (SwerveFSHomingStorage, argos_lib::SwerveFSHomingStorage)</li> <li>StockAnimateAuxLEDs (argos_lib::LEDSubsystem)</li> <li>StockAnimateIntegratedLEDs (argos_lib::LEDSubsystem)</li> <li>SwapControllersCommand (argos_lib::SwapControllersCommand)</li> <li>Swap (argos_lib::SwappableControllersSubsystem)</li> <li>SwappableControllersSubsystem (argos_lib::SwappableControllersSubsystem)</li> <li>SetButtonDebounce (argos_lib::XboxController)</li> <li>SetVibration (argos_lib::XboxController)</li> <li>SwapSettings (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#t","title":"t","text":"<ul> <li>ToString (EdgeDetector, argos_lib::EdgeDetector)</li> <li>TriggerAllOf (argos_lib::XboxController)</li> <li>TriggerAnyOf (argos_lib::XboxController)</li> <li>TriggerDebounced (argos_lib::XboxController)</li> <li>TriggerDebouncedAllOf (argos_lib::XboxController)</li> <li>TriggerDebouncedAnyOf (argos_lib::XboxController)</li> <li>TriggerDebouncedNoneOf (argos_lib::XboxController)</li> <li>TriggerDebouncedOneOf (argos_lib::XboxController)</li> <li>TriggerNoneOf (argos_lib::XboxController)</li> <li>TriggerOneOf (argos_lib::XboxController)</li> <li>TriggerRaw (argos_lib::XboxController)</li> <li>TriggerRawAllOf (argos_lib::XboxController)</li> <li>TriggerRawAnyOf (argos_lib::XboxController)</li> <li>TriggerRawNoneOf (argos_lib::XboxController)</li> <li>TriggerRawOneOf (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#u","title":"u","text":"<ul> <li>UpdateClosedLoopMonitoringThread (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>UpdateVibration (argos_lib::SwappableControllersSubsystem, argos_lib::XboxController)</li> <li>UpdateButton (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#v","title":"v","text":"<ul> <li>VibrateAll (argos_lib::SwappableControllersSubsystem)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#w","title":"w","text":"<ul> <li>Width (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#x","title":"x","text":"<ul> <li>XboxController (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_functions.html#_1","title":"~","text":"<ul> <li>~NTMotorPIDTuner (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>~NTSubscriber (NTSubscriber, argos_lib::NTSubscriber)</li> </ul>"},{"location":"argos-lib/class_member_variables.html","title":"Class Member Variables","text":""},{"location":"argos-lib/class_member_variables.html#a","title":"a","text":"<ul> <li>address (argos_lib::CANAddress)</li> <li>activateTime (argos_lib::DebounceSettings)</li> <li>animated (argos_lib::LEDState)</li> <li>analogTriggerThresh (argos_lib::XboxController)</li> <li>alpha (argos_lib::led::Sprite)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#b","title":"b","text":"<ul> <li>b (argos_lib::ArgosColor)</li> <li>busName (argos_lib::CANAddress)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#c","title":"c","text":"<ul> <li>clearTime (argos_lib::DebounceSettings)</li> <li>color (argos_lib::LEDState, argos_lib::LEDSubsystem::LEDUpdateGroup)</li> <li>colors (argos_lib::led::Sprite)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#d","title":"d","text":"<ul> <li>debounceActive (argos_lib::XboxController::UpdateStatus)</li> <li>debouncePress (argos_lib::XboxController::UpdateStatus)</li> <li>debounceRelease (argos_lib::XboxController::UpdateStatus)</li> <li>down (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#f","title":"f","text":"<ul> <li>firstPixel (argos_lib::led::PanelScanParams)</li> <li>FrontLeft (argos_lib::swerve::SwerveModulePositions)</li> <li>FrontRight (argos_lib::swerve::SwerveModulePositions)</li> <li>forwardSpeedPct (argos_lib::swerve::TranslationSpeeds)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#g","title":"g","text":"<ul> <li>g (argos_lib::ArgosColor)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#i","title":"i","text":"<ul> <li>inVal (argos_lib::InterpMapPoint)</li> <li>intensityLeft (argos_lib::VibrationStatus)</li> <li>intensityRight (argos_lib::VibrationStatus)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#l","title":"l","text":"<ul> <li>leftSpeedPct (argos_lib::swerve::TranslationSpeeds)</li> <li>left (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#m","title":"m","text":"<ul> <li>m_debounceSettings (Debouncer, argos_lib::Debouncer)</li> <li>m_debounceTransitionTime (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>m_debouncedStatus (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>m_rawStatus (Debouncer, argos_lib::Debouncer, argos_lib::GenericDebouncer)</li> <li>m_previousValue (EdgeDetector, argos_lib::EdgeDetector)</li> <li>m_settings (EdgeDetector, argos_lib::EdgeDetector)</li> <li>m_activeConfigs (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_pMotors (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_pidSlot (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_pntTable (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_sensorConversions (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_statusUpdateThread (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_threadMutex (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_threadStopCv (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_updateSubscriber (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> <li>m_ntEntries (NTSubscriber, argos_lib::NTSubscriber)</li> <li>m_ntListeners (NTSubscriber, argos_lib::NTSubscriber)</li> <li>m_tableName (NTSubscriber, NetworkTablesHomingStorage, argos_lib::NTSubscriber, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_frontLeftPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_frontRightPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_rearLeftPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_rearRightPath (NetworkTablesHomingStorage, argos_lib::swerve::NetworkTablesHomingStorage)</li> <li>m_swerveHomesPath (SwerveFSHomingStorage, argos_lib::SwerveFSHomingStorage)</li> <li>m_tag (argos_lib::ArgosLogger)</li> <li>m_homesPath (argos_lib::FSHomingStorage)</li> <li>m_debounceTime (argos_lib::GenericDebouncer)</li> <li>m_activateThreshold (argos_lib::HysteresisFilter)</li> <li>m_currentState (argos_lib::HysteresisFilter)</li> <li>m_deactivateThreshold (argos_lib::HysteresisFilter)</li> <li>m_mapArray (argos_lib::InterpolationMap)</li> <li>m_controller (argos_lib::LEDSubsystem)</li> <li>m_currentLEDs (argos_lib::LEDSubsystem)</li> <li>m_customAnimations (argos_lib::LEDSubsystem)</li> <li>m_prevLEDs (argos_lib::LEDSubsystem)</li> <li>m_pControllerSubsystem (argos_lib::SwapControllersCommand)</li> <li>m_driverController (argos_lib::SwappableControllersSubsystem)</li> <li>m_operatorController (argos_lib::SwappableControllersSubsystem)</li> <li>m_swapped (argos_lib::SwappableControllersSubsystem)</li> <li>m_buttonDebounceSettings (argos_lib::XboxController)</li> <li>m_buttonDebounceStatus (argos_lib::XboxController)</li> <li>m_buttonDebounceTransitionTime (argos_lib::XboxController)</li> <li>m_rawButtonStatus (argos_lib::XboxController)</li> <li>m_vibrationModel (argos_lib::XboxController)</li> <li>m_cells (argos_lib::led::Array2D)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#n","title":"n","text":"<ul> <li>numIntegratedLEDs (argos_lib::LEDSubsystem)</li> <li>numLEDs (argos_lib::led::Animation, argos_lib::LEDSubsystem::LEDUpdateGroup)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#o","title":"o","text":"<ul> <li>outVal (argos_lib::InterpMapPoint)</li> <li>offset (argos_lib::led::Animation)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#p","title":"p","text":"<ul> <li>position (ClosedLoopSensorConversions, argos_lib::ClosedLoopSensorConversions)</li> <li>pressed (argos_lib::XboxController::UpdateStatus)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#r","title":"r","text":"<ul> <li>r (argos_lib::ArgosColor)</li> <li>rawActive (argos_lib::XboxController::UpdateStatus)</li> <li>released (argos_lib::XboxController::UpdateStatus)</li> <li>RearLeft (argos_lib::swerve::SwerveModulePositions)</li> <li>RearRight (argos_lib::swerve::SwerveModulePositions)</li> <li>right (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#s","title":"s","text":"<ul> <li>setpoint (ClosedLoopSensorConversions, argos_lib::ClosedLoopSensorConversions)</li> <li>scanDirection (argos_lib::led::PanelScanParams)</li> <li>startIndex (argos_lib::LEDSubsystem::LEDUpdateGroup)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#u","title":"u","text":"<ul> <li>update (argos_lib::led::Animation)</li> <li>up (argos_lib::XboxController::DPadButtons)</li> </ul>"},{"location":"argos-lib/class_member_variables.html#v","title":"v","text":"<ul> <li>velocity (ClosedLoopSensorConversions, argos_lib::ClosedLoopSensorConversions)</li> </ul>"},{"location":"argos-lib/class_member_typedefs.html","title":"Class Member Typedefs","text":""},{"location":"argos-lib/class_member_typedefs.html#b","title":"b","text":"<ul> <li>BaseTalon (NTMotorPIDTuner, argos_lib::NTMotorPIDTuner)</li> </ul>"},{"location":"argos-lib/class_member_enums.html","title":"Class Member Enums","text":""},{"location":"argos-lib/class_member_enums.html#a","title":"a","text":"<ul> <li>Axis (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_enums.html#b","title":"b","text":"<ul> <li>Button (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/class_member_enums.html#e","title":"e","text":"<ul> <li>EdgeDetectSettings (EdgeDetector, argos_lib::EdgeDetector)</li> <li>edgeStatus (EdgeDetector, argos_lib::EdgeDetector)</li> </ul>"},{"location":"argos-lib/class_member_enums.html#j","title":"j","text":"<ul> <li>JoystickHand (argos_lib::XboxController)</li> </ul>"},{"location":"argos-lib/namespace_members.html","title":"Namespace Members","text":""},{"location":"argos-lib/namespace_members.html#a","title":"a","text":"<ul> <li>AnimatedSprite (argos_lib::led)</li> <li>AllOf (argos_lib::triggers)</li> <li>AnyOf (argos_lib::triggers)</li> </ul>"},{"location":"argos-lib/namespace_members.html#b","title":"b","text":"<ul> <li>BaseTalon (argos_lib::status_frame_config)</li> </ul>"},{"location":"argos-lib/namespace_members.html#c","title":"c","text":"<ul> <li>ConstrainAngle (argos_lib::angle)</li> <li>CANcoder (argos_lib::cancoder_config)</li> <li>CanCoderConfig (argos_lib::cancoder_config)</li> <li>ChompingPacMan (argos_lib::led::animation)</li> <li>CircularInterpolate (argos_lib::swerve)</li> </ul>"},{"location":"argos-lib/namespace_members.html#d","title":"d","text":"<ul> <li>DrawCircle (argos_lib::led::animation)</li> <li>DrawCircleSprite (argos_lib::led::animation)</li> <li>DrawPacMan (argos_lib::led::animation)</li> <li>DrawRectangle (argos_lib::led::animation)</li> <li>DyingPacMan (argos_lib::led::animation)</li> </ul>"},{"location":"argos-lib/namespace_members.html#f","title":"f","text":"<ul> <li>FalconConfig (argos_lib::falcon_config)</li> <li>FirstPixelPosition (argos_lib::led)</li> <li>FlipHorizontal (argos_lib::led)</li> <li>FlipVertical (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_members.html#g","title":"g","text":"<ul> <li>GammaCorrect (argos_lib)</li> <li>GetCANAddr (argos_lib)</li> <li>GetCANBus (argos_lib)</li> <li>GetPositionConversionFactor (argos_lib)</li> <li>GetRobotInstance (argos_lib)</li> <li>GetVelocityConversionFactor (argos_lib)</li> <li>GetAngleToTarget (argos_lib::odometry_aim)</li> <li>GetDistanceToTarget (argos_lib::odometry_aim)</li> <li>gamma8 (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_members.html#i","title":"i","text":"<ul> <li>InThreshold (argos_lib)</li> <li>InvertedAngle (argos_lib::angle)</li> </ul>"},{"location":"argos-lib/namespace_members.html#k","title":"k","text":"<ul> <li>kCatYellow (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kConeYellow (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kCubePurple (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kHotPink (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kNoteOrange (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kOff (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kPlum (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kPurple (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kReallyBlue (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kReallyGreen (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kReallyRed (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kWhite (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> </ul>"},{"location":"argos-lib/namespace_members.html#l","title":"l","text":"<ul> <li>LogLevel (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_members.html#m","title":"m","text":"<ul> <li>Mask (argos_lib::led)</li> <li>MotorPresetMode (argos_lib::status_frame_config)</li> </ul>"},{"location":"argos-lib/namespace_members.html#n","title":"n","text":"<ul> <li>NearestAngle (argos_lib::angle)</li> <li>NoneOf (argos_lib::triggers)</li> </ul>"},{"location":"argos-lib/namespace_members.html#o","title":"o","text":"<ul> <li>Optimize (argos_lib::swerve)</li> <li>OneOf (argos_lib::triggers)</li> <li>operator&lt; (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_members.html#p","title":"p","text":"<ul> <li>Panel (argos_lib::led)</li> <li>PointInBox (argos_lib::led)</li> <li>PrimaryScanDirection (argos_lib::led)</li> <li>PacManPacing (argos_lib::led::animation)</li> <li>Pong (argos_lib::led::animation)</li> </ul>"},{"location":"argos-lib/namespace_members.html#r","title":"r","text":"<ul> <li>RobotInstance (argos_lib)</li> <li>RenderSprite (argos_lib::led::animation)</li> </ul>"},{"location":"argos-lib/namespace_members.html#s","title":"s","text":"<ul> <li>SegmentIntersection (argos_lib::led)</li> <li>Serialize (argos_lib::led)</li> <li>Strip (argos_lib::led)</li> <li>SetMotorStatusFrameRates (argos_lib::status_frame_config)</li> </ul>"},{"location":"argos-lib/namespace_members.html#t","title":"t","text":"<ul> <li>TemporaryVibrationPattern (argos_lib)</li> <li>TalonSRXConfig (argos_lib::talonsrx_config)</li> </ul>"},{"location":"argos-lib/namespace_members.html#u","title":"u","text":"<ul> <li>UnitEqual (argos_lib::testing)</li> </ul>"},{"location":"argos-lib/namespace_members.html#v","title":"v","text":"<ul> <li>VibrationAlternatePulse (argos_lib)</li> <li>VibrationAlternateWave (argos_lib)</li> <li>VibrationConstant (argos_lib)</li> <li>VibrationModel (argos_lib)</li> <li>VibrationOff (argos_lib)</li> <li>VibrationSyncPulse (argos_lib)</li> <li>VibrationSyncWave (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html","title":"Namespace Member Functions","text":""},{"location":"argos-lib/namespace_member_functions.html#a","title":"a","text":"<ul> <li>AllOf (argos_lib::triggers)</li> <li>AnyOf (argos_lib::triggers)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#c","title":"c","text":"<ul> <li>ConstrainAngle (argos_lib::angle)</li> <li>CanCoderConfig (argos_lib::cancoder_config)</li> <li>ChompingPacMan (argos_lib::led::animation)</li> <li>CircularInterpolate (argos_lib::swerve)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#d","title":"d","text":"<ul> <li>DrawCircle (argos_lib::led::animation)</li> <li>DrawCircleSprite (argos_lib::led::animation)</li> <li>DrawPacMan (argos_lib::led::animation)</li> <li>DrawRectangle (argos_lib::led::animation)</li> <li>DyingPacMan (argos_lib::led::animation)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#f","title":"f","text":"<ul> <li>FalconConfig (argos_lib::falcon_config)</li> <li>FlipHorizontal (argos_lib::led)</li> <li>FlipVertical (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#g","title":"g","text":"<ul> <li>GammaCorrect (argos_lib)</li> <li>GetCANAddr (argos_lib)</li> <li>GetCANBus (argos_lib)</li> <li>GetPositionConversionFactor (argos_lib)</li> <li>GetRobotInstance (argos_lib)</li> <li>GetVelocityConversionFactor (argos_lib)</li> <li>GetAngleToTarget (argos_lib::odometry_aim)</li> <li>GetDistanceToTarget (argos_lib::odometry_aim)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#i","title":"i","text":"<ul> <li>InThreshold (argos_lib)</li> <li>InvertedAngle (argos_lib::angle)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#n","title":"n","text":"<ul> <li>NearestAngle (argos_lib::angle)</li> <li>NoneOf (argos_lib::triggers)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#o","title":"o","text":"<ul> <li>Optimize (argos_lib::swerve)</li> <li>OneOf (argos_lib::triggers)</li> <li>operator&lt; (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#p","title":"p","text":"<ul> <li>PointInBox (argos_lib::led)</li> <li>PacManPacing (argos_lib::led::animation)</li> <li>Pong (argos_lib::led::animation)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#r","title":"r","text":"<ul> <li>RenderSprite (argos_lib::led::animation)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#s","title":"s","text":"<ul> <li>SegmentIntersection (argos_lib::led)</li> <li>Serialize (argos_lib::led)</li> <li>SetMotorStatusFrameRates (argos_lib::status_frame_config)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#t","title":"t","text":"<ul> <li>TemporaryVibrationPattern (argos_lib)</li> <li>TalonSRXConfig (argos_lib::talonsrx_config)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#u","title":"u","text":"<ul> <li>UnitEqual (argos_lib::testing)</li> </ul>"},{"location":"argos-lib/namespace_member_functions.html#v","title":"v","text":"<ul> <li>VibrationAlternatePulse (argos_lib)</li> <li>VibrationAlternateWave (argos_lib)</li> <li>VibrationConstant (argos_lib)</li> <li>VibrationOff (argos_lib)</li> <li>VibrationSyncPulse (argos_lib)</li> <li>VibrationSyncWave (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_member_variables.html","title":"Namespace Member Variables","text":""},{"location":"argos-lib/namespace_member_variables.html#g","title":"g","text":"<ul> <li>gamma8 (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_member_variables.html#k","title":"k","text":"<ul> <li>kCatYellow (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kConeYellow (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kCubePurple (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kHotPink (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kNoteOrange (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kOff (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kPlum (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kPurple (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kReallyBlue (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kReallyGreen (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kReallyRed (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> <li>kWhite (argos_lib::colors, argos_lib::gamma_corrected_colors)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html","title":"Namespace Member Typedefs","text":""},{"location":"argos-lib/namespace_member_typedefs.html#a","title":"a","text":"<ul> <li>AnimatedSprite (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html#b","title":"b","text":"<ul> <li>BaseTalon (argos_lib::status_frame_config)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html#c","title":"c","text":"<ul> <li>CANcoder (argos_lib::cancoder_config)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html#m","title":"m","text":"<ul> <li>Mask (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html#p","title":"p","text":"<ul> <li>Panel (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html#s","title":"s","text":"<ul> <li>Strip (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_typedefs.html#v","title":"v","text":"<ul> <li>VibrationModel (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_member_enums.html","title":"Namespace Member Enums","text":""},{"location":"argos-lib/namespace_member_enums.html#f","title":"f","text":"<ul> <li>FirstPixelPosition (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_enums.html#l","title":"l","text":"<ul> <li>LogLevel (argos_lib)</li> </ul>"},{"location":"argos-lib/namespace_member_enums.html#m","title":"m","text":"<ul> <li>MotorPresetMode (argos_lib::status_frame_config)</li> </ul>"},{"location":"argos-lib/namespace_member_enums.html#p","title":"p","text":"<ul> <li>PrimaryScanDirection (argos_lib::led)</li> </ul>"},{"location":"argos-lib/namespace_member_enums.html#r","title":"r","text":"<ul> <li>RobotInstance (argos_lib)</li> </ul>"},{"location":"argos-lib/functions.html","title":"Functions","text":""},{"location":"argos-lib/functions.html#c","title":"c","text":"<ul> <li>ConstrainAngle (angle_utils.cpp, swerve_utils.cpp)</li> </ul>"},{"location":"argos-lib/functions.html#i","title":"i","text":"<ul> <li>InvertedAngle (angle_utils.cpp, swerve_utils.cpp)</li> </ul>"},{"location":"argos-lib/functions.html#n","title":"n","text":"<ul> <li>NearestAngle (angle_utils.cpp, swerve_utils.cpp)</li> </ul>"},{"location":"argos-lib/functions.html#o","title":"o","text":"<ul> <li>Optimize (swerve_utils.cpp)</li> <li>operator!= (led_subsystem.cpp)</li> <li>operator== (led_subsystem.cpp)</li> </ul>"},{"location":"argos-lib/functions.html#t","title":"t","text":"<ul> <li>TEST (edge_detector_test.cpp)</li> </ul>"},{"location":"argos-lib/macros.html","title":"Macros","text":""},{"location":"argos-lib/macros.html#h","title":"h","text":"<ul> <li>HAS_MEMBER (compile_time_member_check.h)</li> </ul>"},{"location":"argos-lib/variables.html","title":"Variables","text":""},{"location":"argos-lib/variables.html#b","title":"b","text":"<ul> <li>BaseTalon (status_frame_config.cpp)</li> </ul>"},{"location":"argos-lib/links.html","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"},{"location":"jacks-summer-robot/annotated.html","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>class ExampleCommand </li> <li>class ExampleSubsystem </li> <li>namespace OperatorConstants </li> <li>class Robot </li> <li>class RobotContainer </li> <li>namespace autos </li> <li>namespace frc </li> <li>namespace frc2 </li> </ul>"},{"location":"jacks-summer-robot/files.html","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir src <ul> <li>dir main <ul> <li>dir cpp <ul> <li>dir commands <ul> <li>file Autos.cpp </li> <li>file ExampleCommand.cpp </li> </ul> </li> <li>dir subsystems <ul> <li>file ExampleSubsystem.cpp </li> </ul> </li> <li>file Robot.cpp </li> <li>file RobotContainer.cpp </li> </ul> </li> <li>dir include <ul> <li>dir commands <ul> <li>file Autos.h </li> <li>file ExampleCommand.h </li> </ul> </li> <li>dir subsystems <ul> <li>file ExampleSubsystem.h </li> </ul> </li> <li>file Constants.h </li> <li>file Robot.h </li> <li>file RobotContainer.h </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"jacks-summer-robot/class_example_command.html","title":"Class ExampleCommand","text":"<p>ClassList &gt; ExampleCommand</p> <p>More...</p> <ul> <li><code>#include &lt;ExampleCommand.h&gt;</code></li> </ul> <p>Inherits the following classes: frc2::CommandHelper&lt; frc2::Command, ExampleCommand &gt;</p>"},{"location":"jacks-summer-robot/class_example_command.html#public-functions","title":"Public Functions","text":"Type Name ExampleCommand (ExampleSubsystem * subsystem)"},{"location":"jacks-summer-robot/class_example_command.html#detailed-description","title":"Detailed Description","text":"<p>An example command that uses an example subsystem.</p> <p>Note that this extends CommandHelper, rather extending Command directly; this is crucially important, or else the decorator functions in Command will not work! </p>"},{"location":"jacks-summer-robot/class_example_command.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"jacks-summer-robot/class_example_command.html#function-examplecommand","title":"function ExampleCommand","text":"<pre><code>explicit ExampleCommand::ExampleCommand (\n    ExampleSubsystem * subsystem\n) \n</code></pre> <p>Creates a new ExampleCommand.</p> <p>Parameters:</p> <ul> <li><code>subsystem</code> The subsystem used by this command. </li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/commands/ExampleCommand.h</code></p>"},{"location":"jacks-summer-robot/class_example_subsystem.html","title":"Class ExampleSubsystem","text":"<p>ClassList &gt; ExampleSubsystem</p> <p>Inherits the following classes: frc2::SubsystemBase</p>"},{"location":"jacks-summer-robot/class_example_subsystem.html#public-functions","title":"Public Functions","text":"Type Name bool ExampleCondition ()  frc2::CommandPtr ExampleMethodCommand ()  ExampleSubsystem ()  void Periodic () override void SimulationPeriodic () override"},{"location":"jacks-summer-robot/class_example_subsystem.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"jacks-summer-robot/class_example_subsystem.html#function-examplecondition","title":"function ExampleCondition","text":"<pre><code>bool ExampleSubsystem::ExampleCondition () \n</code></pre> <p>An example method querying a boolean state of the subsystem (for example, a digital sensor).</p> <p>Returns:</p> <p>value of some boolean subsystem state, such as a digital sensor. </p>"},{"location":"jacks-summer-robot/class_example_subsystem.html#function-examplemethodcommand","title":"function ExampleMethodCommand","text":"<pre><code>frc2::CommandPtr ExampleSubsystem::ExampleMethodCommand () \n</code></pre> <p>Example command factory method. </p>"},{"location":"jacks-summer-robot/class_example_subsystem.html#function-examplesubsystem","title":"function ExampleSubsystem","text":"<pre><code>ExampleSubsystem::ExampleSubsystem () \n</code></pre>"},{"location":"jacks-summer-robot/class_example_subsystem.html#function-periodic","title":"function Periodic","text":"<pre><code>void ExampleSubsystem::Periodic () override\n</code></pre> <p>Will be called periodically whenever the CommandScheduler runs. </p>"},{"location":"jacks-summer-robot/class_example_subsystem.html#function-simulationperiodic","title":"function SimulationPeriodic","text":"<pre><code>void ExampleSubsystem::SimulationPeriodic () override\n</code></pre> <p>Will be called periodically whenever the CommandScheduler runs during simulation. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/subsystems/ExampleSubsystem.h</code></p>"},{"location":"jacks-summer-robot/namespace_operator_constants.html","title":"Namespace OperatorConstants","text":"<p>Namespace List &gt; OperatorConstants</p> <p>More...</p>"},{"location":"jacks-summer-robot/namespace_operator_constants.html#public-attributes","title":"Public Attributes","text":"Type Name int kDriverControllerPort   = <code>0</code>"},{"location":"jacks-summer-robot/namespace_operator_constants.html#detailed-description","title":"Detailed Description","text":"<p>The Constants header provides a convenient place for teams to hold robot-wide numerical or boolean constants. This should not be used for any other purpose.</p> <p>It is generally a good idea to place constants into subsystem- or command-specific namespaces within this header, which can then be used where they are needed. </p>"},{"location":"jacks-summer-robot/namespace_operator_constants.html#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"jacks-summer-robot/namespace_operator_constants.html#variable-kdrivercontrollerport","title":"variable kDriverControllerPort","text":"<pre><code>int OperatorConstants::kDriverControllerPort;\n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/Constants.h</code></p>"},{"location":"jacks-summer-robot/class_robot.html","title":"Class Robot","text":"<p>ClassList &gt; Robot</p> <p>Inherits the following classes: frc::TimedRobot</p>"},{"location":"jacks-summer-robot/class_robot.html#public-functions","title":"Public Functions","text":"Type Name void AutonomousInit () override void AutonomousPeriodic () override void DisabledInit () override void DisabledPeriodic () override Robot ()  void RobotPeriodic () override void SimulationInit () override void SimulationPeriodic () override void TeleopInit () override void TeleopPeriodic () override void TestPeriodic () override"},{"location":"jacks-summer-robot/class_robot.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"jacks-summer-robot/class_robot.html#function-autonomousinit","title":"function AutonomousInit","text":"<pre><code>void Robot::AutonomousInit () override\n</code></pre> <p>This autonomous runs the autonomous command selected by your <code>RobotContainer</code> class. </p>"},{"location":"jacks-summer-robot/class_robot.html#function-autonomousperiodic","title":"function AutonomousPeriodic","text":"<pre><code>void Robot::AutonomousPeriodic () override\n</code></pre>"},{"location":"jacks-summer-robot/class_robot.html#function-disabledinit","title":"function DisabledInit","text":"<pre><code>void Robot::DisabledInit () override\n</code></pre> <p>This function is called once each time the robot enters Disabled mode. You can use it to reset any subsystem information you want to clear when the robot is disabled. </p>"},{"location":"jacks-summer-robot/class_robot.html#function-disabledperiodic","title":"function DisabledPeriodic","text":"<pre><code>void Robot::DisabledPeriodic () override\n</code></pre>"},{"location":"jacks-summer-robot/class_robot.html#function-robot","title":"function Robot","text":"<pre><code>Robot::Robot () \n</code></pre>"},{"location":"jacks-summer-robot/class_robot.html#function-robotperiodic","title":"function RobotPeriodic","text":"<pre><code>void Robot::RobotPeriodic () override\n</code></pre> <p>This function is called every 20 ms, no matter the mode. Use this for items like diagnostics that you want to run during disabled, autonomous, teleoperated and test.</p> <p>This runs after the mode specific periodic functions, but before LiveWindow and SmartDashboard integrated updating. </p>"},{"location":"jacks-summer-robot/class_robot.html#function-simulationinit","title":"function SimulationInit","text":"<pre><code>void Robot::SimulationInit () override\n</code></pre> <p>This function is called once when the robot is first started up. </p>"},{"location":"jacks-summer-robot/class_robot.html#function-simulationperiodic","title":"function SimulationPeriodic","text":"<pre><code>void Robot::SimulationPeriodic () override\n</code></pre> <p>This function is called periodically whilst in simulation. </p>"},{"location":"jacks-summer-robot/class_robot.html#function-teleopinit","title":"function TeleopInit","text":"<pre><code>void Robot::TeleopInit () override\n</code></pre>"},{"location":"jacks-summer-robot/class_robot.html#function-teleopperiodic","title":"function TeleopPeriodic","text":"<pre><code>void Robot::TeleopPeriodic () override\n</code></pre> <p>This function is called periodically during operator control. </p>"},{"location":"jacks-summer-robot/class_robot.html#function-testperiodic","title":"function TestPeriodic","text":"<pre><code>void Robot::TestPeriodic () override\n</code></pre> <p>This function is called periodically during test mode. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/Robot.h</code></p>"},{"location":"jacks-summer-robot/class_robot_container.html","title":"Class RobotContainer","text":"<p>ClassList &gt; RobotContainer</p> <p>More...</p> <ul> <li><code>#include &lt;RobotContainer.h&gt;</code></li> </ul>"},{"location":"jacks-summer-robot/class_robot_container.html#public-functions","title":"Public Functions","text":"Type Name frc2::CommandPtr GetAutonomousCommand ()  RobotContainer ()"},{"location":"jacks-summer-robot/class_robot_container.html#detailed-description","title":"Detailed Description","text":"<p>This class is where the bulk of the robot should be declared. Since Command-based is a \"declarative\" paradigm, very little robot logic should actually be handled in the <code>Robot</code> periodic methods (other than the scheduler calls). Instead, the structure of the robot (including subsystems, commands, and trigger mappings) should be declared here. </p>"},{"location":"jacks-summer-robot/class_robot_container.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"jacks-summer-robot/class_robot_container.html#function-getautonomouscommand","title":"function GetAutonomousCommand","text":"<pre><code>frc2::CommandPtr RobotContainer::GetAutonomousCommand () \n</code></pre>"},{"location":"jacks-summer-robot/class_robot_container.html#function-robotcontainer","title":"function RobotContainer","text":"<pre><code>RobotContainer::RobotContainer () \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/RobotContainer.h</code></p>"},{"location":"jacks-summer-robot/namespaceautos.html","title":"Namespace autos","text":"<p>Namespace List &gt; autos</p>"},{"location":"jacks-summer-robot/namespaceautos.html#public-functions","title":"Public Functions","text":"Type Name frc2::CommandPtr ExampleAuto (ExampleSubsystem * subsystem)"},{"location":"jacks-summer-robot/namespaceautos.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"jacks-summer-robot/namespaceautos.html#function-exampleauto","title":"function ExampleAuto","text":"<pre><code>frc2::CommandPtr autos::ExampleAuto (\n    ExampleSubsystem * subsystem\n) \n</code></pre> <p>Example static factory for an autonomous command. </p> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/commands/Autos.h</code></p>"},{"location":"jacks-summer-robot/namespacefrc.html","title":"Namespace frc","text":"<p>Namespace List &gt; frc</p> <p>The documentation for this class was generated from the following file <code>[generated]</code></p>"},{"location":"jacks-summer-robot/namespacefrc2.html","title":"Namespace frc2","text":"<p>Namespace List &gt; frc2</p> <p>The documentation for this class was generated from the following file <code>[generated]</code></p>"},{"location":"jacks-summer-robot/dir_68267d1309a1af8e8297ef4c3efbcdba.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src","text":"<p>FileList &gt; src</p>"},{"location":"jacks-summer-robot/dir_68267d1309a1af8e8297ef4c3efbcdba.html#directories","title":"Directories","text":"Type Name dir main <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/</code></p>"},{"location":"jacks-summer-robot/dir_5eb159725f84c66aafd839904a4acdd0.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main","text":"<p>FileList &gt; main</p>"},{"location":"jacks-summer-robot/dir_5eb159725f84c66aafd839904a4acdd0.html#directories","title":"Directories","text":"Type Name dir cpp dir include <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/</code></p>"},{"location":"jacks-summer-robot/dir_fdf2b31f12d3ebb2f617242d0514024b.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp","text":"<p>FileList &gt; cpp</p>"},{"location":"jacks-summer-robot/dir_fdf2b31f12d3ebb2f617242d0514024b.html#files","title":"Files","text":"Type Name file Robot.cpp file RobotContainer.cpp"},{"location":"jacks-summer-robot/dir_fdf2b31f12d3ebb2f617242d0514024b.html#directories","title":"Directories","text":"Type Name dir commands dir subsystems <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/</code></p>"},{"location":"jacks-summer-robot/dir_936b7b8edf6aa316affdf0e21f6b0c34.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/commands","text":"<p>FileList &gt; commands</p>"},{"location":"jacks-summer-robot/dir_936b7b8edf6aa316affdf0e21f6b0c34.html#files","title":"Files","text":"Type Name file Autos.cpp file ExampleCommand.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/commands/</code></p>"},{"location":"jacks-summer-robot/_autos_8cpp.html","title":"File Autos.cpp","text":"<p>FileList &gt; commands &gt; Autos.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"commands/Autos.h\"</code></li> <li><code>#include &lt;frc2/command/Commands.h&gt;</code></li> <li><code>#include \"commands/ExampleCommand.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/commands/Autos.cpp</code></p>"},{"location":"jacks-summer-robot/_autos_8cpp_source.html","title":"File Autos.cpp","text":"<p>File List &gt; commands &gt; Autos.cpp</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#include \"commands/Autos.h\"\n\n#include &lt;frc2/command/Commands.h&gt;\n\n#include \"commands/ExampleCommand.h\"\n\nfrc2::CommandPtr autos::ExampleAuto(ExampleSubsystem* subsystem) {\n  return frc2::cmd::Sequence(subsystem-&gt;ExampleMethodCommand(),\n                             ExampleCommand(subsystem).ToPtr());\n}\n</code></pre>"},{"location":"jacks-summer-robot/_example_command_8cpp.html","title":"File ExampleCommand.cpp","text":"<p>FileList &gt; commands &gt; ExampleCommand.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"commands/ExampleCommand.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/commands/ExampleCommand.cpp</code></p>"},{"location":"jacks-summer-robot/_example_command_8cpp_source.html","title":"File ExampleCommand.cpp","text":"<p>File List &gt; commands &gt; ExampleCommand.cpp</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#include \"commands/ExampleCommand.h\"\n\nExampleCommand::ExampleCommand(ExampleSubsystem* subsystem)\n    : m_subsystem{subsystem} {\n  // Register that this command requires the subsystem.\n  AddRequirements(m_subsystem);\n}\n</code></pre>"},{"location":"jacks-summer-robot/dir_2a59f1b00facdb43e21fc1c516c8806d.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/subsystems","text":"<p>FileList &gt; cpp &gt; subsystems</p>"},{"location":"jacks-summer-robot/dir_2a59f1b00facdb43e21fc1c516c8806d.html#files","title":"Files","text":"Type Name file ExampleSubsystem.cpp <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/subsystems/</code></p>"},{"location":"jacks-summer-robot/_example_subsystem_8cpp.html","title":"File ExampleSubsystem.cpp","text":"<p>FileList &gt; cpp &gt; subsystems &gt; ExampleSubsystem.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"subsystems/ExampleSubsystem.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/subsystems/ExampleSubsystem.cpp</code></p>"},{"location":"jacks-summer-robot/_example_subsystem_8cpp_source.html","title":"File ExampleSubsystem.cpp","text":"<p>File List &gt; cpp &gt; subsystems &gt; ExampleSubsystem.cpp</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#include \"subsystems/ExampleSubsystem.h\"\n\nExampleSubsystem::ExampleSubsystem() {\n  // Implementation of subsystem constructor goes here.\n}\n\nfrc2::CommandPtr ExampleSubsystem::ExampleMethodCommand() {\n  // Inline construction of command goes here.\n  // Subsystem::RunOnce implicitly requires `this` subsystem.\n  return RunOnce([/* this */] { /* one-time action goes here */ });\n}\n\nbool ExampleSubsystem::ExampleCondition() {\n  // Query some boolean state, such as a digital sensor.\n  return false;\n}\n\nvoid ExampleSubsystem::Periodic() {\n  // Implementation of subsystem periodic method goes here.\n}\n\nvoid ExampleSubsystem::SimulationPeriodic() {\n  // Implementation of subsystem simulation periodic method goes here.\n}\n</code></pre>"},{"location":"jacks-summer-robot/_robot_8cpp.html","title":"File Robot.cpp","text":"<p>FileList &gt; cpp &gt; Robot.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"Robot.h\"</code></li> <li><code>#include &lt;frc2/command/CommandScheduler.h&gt;</code></li> </ul>"},{"location":"jacks-summer-robot/_robot_8cpp.html#public-functions","title":"Public Functions","text":"Type Name int main ()"},{"location":"jacks-summer-robot/_robot_8cpp.html#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"jacks-summer-robot/_robot_8cpp.html#function-main","title":"function main","text":"<pre><code>int main () \n</code></pre> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/Robot.cpp</code></p>"},{"location":"jacks-summer-robot/_robot_8cpp_source.html","title":"File Robot.cpp","text":"<p>File List &gt; cpp &gt; Robot.cpp</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#include \"Robot.h\"\n\n#include &lt;frc2/command/CommandScheduler.h&gt;\n\nRobot::Robot() {}\n\nvoid Robot::RobotPeriodic() {\n  frc2::CommandScheduler::GetInstance().Run();\n}\n\nvoid Robot::DisabledInit() {}\n\nvoid Robot::DisabledPeriodic() {}\n\nvoid Robot::AutonomousInit() {\n  m_autonomousCommand = m_container.GetAutonomousCommand();\n\n  if (m_autonomousCommand) {\n    m_autonomousCommand-&gt;Schedule();\n  }\n}\n\nvoid Robot::AutonomousPeriodic() {}\n\nvoid Robot::TeleopInit() {\n  // This makes sure that the autonomous stops running when\n  // teleop starts running. If you want the autonomous to\n  // continue until interrupted by another command, remove\n  // this line or comment it out.\n  if (m_autonomousCommand) {\n    m_autonomousCommand-&gt;Cancel();\n  }\n}\n\nvoid Robot::TeleopPeriodic() {}\n\nvoid Robot::TestPeriodic() {}\n\nvoid Robot::SimulationInit() {}\n\nvoid Robot::SimulationPeriodic() {}\n\n#ifndef RUNNING_FRC_TESTS\nint main() {\n  return frc::StartRobot&lt;Robot&gt;();\n}\n#endif\n</code></pre>"},{"location":"jacks-summer-robot/_robot_container_8cpp.html","title":"File RobotContainer.cpp","text":"<p>FileList &gt; cpp &gt; RobotContainer.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"RobotContainer.h\"</code></li> <li><code>#include &lt;frc2/command/button/Trigger.h&gt;</code></li> <li><code>#include \"commands/Autos.h\"</code></li> <li><code>#include \"commands/ExampleCommand.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/cpp/RobotContainer.cpp</code></p>"},{"location":"jacks-summer-robot/_robot_container_8cpp_source.html","title":"File RobotContainer.cpp","text":"<p>File List &gt; cpp &gt; RobotContainer.cpp</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#include \"RobotContainer.h\"\n\n#include &lt;frc2/command/button/Trigger.h&gt;\n\n#include \"commands/Autos.h\"\n#include \"commands/ExampleCommand.h\"\n\nRobotContainer::RobotContainer() {\n  // Initialize all of your commands and subsystems here\n\n  // Configure the button bindings\n  ConfigureBindings();\n}\n\nvoid RobotContainer::ConfigureBindings() {\n  // Configure your trigger bindings here\n\n  // Schedule `ExampleCommand` when `exampleCondition` changes to `true`\n  frc2::Trigger([this] {\n    return m_subsystem.ExampleCondition();\n  }).OnTrue(ExampleCommand(&amp;m_subsystem).ToPtr());\n\n  // Schedule `ExampleMethodCommand` when the Xbox controller's B button is\n  // pressed, cancelling on release.\n  m_driverController.B().WhileTrue(m_subsystem.ExampleMethodCommand());\n}\n\nfrc2::CommandPtr RobotContainer::GetAutonomousCommand() {\n  // An example command will be run in autonomous\n  return autos::ExampleAuto(&amp;m_subsystem);\n}\n</code></pre>"},{"location":"jacks-summer-robot/dir_df3bee86fdbfb464c3a94507855b0bdc.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include","text":"<p>FileList &gt; include</p>"},{"location":"jacks-summer-robot/dir_df3bee86fdbfb464c3a94507855b0bdc.html#files","title":"Files","text":"Type Name file Constants.h file Robot.h file RobotContainer.h"},{"location":"jacks-summer-robot/dir_df3bee86fdbfb464c3a94507855b0bdc.html#directories","title":"Directories","text":"Type Name dir commands dir subsystems <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/</code></p>"},{"location":"jacks-summer-robot/dir_8351edd85a1483fb2b79b8acebf64e28.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/commands","text":"<p>FileList &gt; commands</p>"},{"location":"jacks-summer-robot/dir_8351edd85a1483fb2b79b8acebf64e28.html#files","title":"Files","text":"Type Name file Autos.h file ExampleCommand.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/commands/</code></p>"},{"location":"jacks-summer-robot/_autos_8h.html","title":"File Autos.h","text":"<p>FileList &gt; commands &gt; Autos.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/CommandPtr.h&gt;</code></li> <li><code>#include \"subsystems/ExampleSubsystem.h\"</code></li> </ul>"},{"location":"jacks-summer-robot/_autos_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace autos <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/commands/Autos.h</code></p>"},{"location":"jacks-summer-robot/_autos_8h_source.html","title":"File Autos.h","text":"<p>File List &gt; commands &gt; Autos.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#pragma once\n\n#include &lt;frc2/command/CommandPtr.h&gt;\n\n#include \"subsystems/ExampleSubsystem.h\"\n\nnamespace autos {\nfrc2::CommandPtr ExampleAuto(ExampleSubsystem* subsystem);\n}  // namespace autos\n</code></pre>"},{"location":"jacks-summer-robot/_example_command_8h.html","title":"File ExampleCommand.h","text":"<p>FileList &gt; commands &gt; ExampleCommand.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/Command.h&gt;</code></li> <li><code>#include &lt;frc2/command/CommandHelper.h&gt;</code></li> <li><code>#include \"subsystems/ExampleSubsystem.h\"</code></li> </ul>"},{"location":"jacks-summer-robot/_example_command_8h.html#classes","title":"Classes","text":"Type Name class ExampleCommand <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/commands/ExampleCommand.h</code></p>"},{"location":"jacks-summer-robot/_example_command_8h_source.html","title":"File ExampleCommand.h","text":"<p>File List &gt; commands &gt; ExampleCommand.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#pragma once\n\n#include &lt;frc2/command/Command.h&gt;\n#include &lt;frc2/command/CommandHelper.h&gt;\n\n#include \"subsystems/ExampleSubsystem.h\"\n\nclass ExampleCommand\n    : public frc2::CommandHelper&lt;frc2::Command, ExampleCommand&gt; {\n public:\n  explicit ExampleCommand(ExampleSubsystem* subsystem);\n\n private:\n  ExampleSubsystem* m_subsystem;\n};\n</code></pre>"},{"location":"jacks-summer-robot/dir_5b31952f813df36dabbaa31d5b8f92e5.html","title":"Dir C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/subsystems","text":"<p>FileList &gt; include &gt; subsystems</p>"},{"location":"jacks-summer-robot/dir_5b31952f813df36dabbaa31d5b8f92e5.html#files","title":"Files","text":"Type Name file ExampleSubsystem.h <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/subsystems/</code></p>"},{"location":"jacks-summer-robot/_example_subsystem_8h.html","title":"File ExampleSubsystem.h","text":"<p>FileList &gt; include &gt; subsystems &gt; ExampleSubsystem.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/CommandPtr.h&gt;</code></li> <li><code>#include &lt;frc2/command/SubsystemBase.h&gt;</code></li> </ul>"},{"location":"jacks-summer-robot/_example_subsystem_8h.html#classes","title":"Classes","text":"Type Name class ExampleSubsystem <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/subsystems/ExampleSubsystem.h</code></p>"},{"location":"jacks-summer-robot/_example_subsystem_8h_source.html","title":"File ExampleSubsystem.h","text":"<p>File List &gt; include &gt; subsystems &gt; ExampleSubsystem.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#pragma once\n\n#include &lt;frc2/command/CommandPtr.h&gt;\n#include &lt;frc2/command/SubsystemBase.h&gt;\n\nclass ExampleSubsystem : public frc2::SubsystemBase {\n public:\n  ExampleSubsystem();\n\n  frc2::CommandPtr ExampleMethodCommand();\n\n  bool ExampleCondition();\n\n  void Periodic() override;\n\n  void SimulationPeriodic() override;\n\n private:\n  // Components (e.g. motor controllers and sensors) should generally be\n  // declared private and exposed only through public methods.\n};\n</code></pre>"},{"location":"jacks-summer-robot/_constants_8h.html","title":"File Constants.h","text":"<p>FileList &gt; include &gt; Constants.h</p> <p>Go to the source code of this file</p>"},{"location":"jacks-summer-robot/_constants_8h.html#namespaces","title":"Namespaces","text":"Type Name namespace OperatorConstants <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/Constants.h</code></p>"},{"location":"jacks-summer-robot/_constants_8h_source.html","title":"File Constants.h","text":"<p>File List &gt; include &gt; Constants.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#pragma once\n\n\nnamespace OperatorConstants {\n\ninline constexpr int kDriverControllerPort = 0;\n\n}  // namespace OperatorConstants\n</code></pre>"},{"location":"jacks-summer-robot/_robot_8h.html","title":"File Robot.h","text":"<p>FileList &gt; include &gt; Robot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;frc/TimedRobot.h&gt;</code></li> <li><code>#include &lt;frc2/command/CommandPtr.h&gt;</code></li> <li><code>#include \"RobotContainer.h\"</code></li> </ul>"},{"location":"jacks-summer-robot/_robot_8h.html#classes","title":"Classes","text":"Type Name class Robot <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/Robot.h</code></p>"},{"location":"jacks-summer-robot/_robot_8h_source.html","title":"File Robot.h","text":"<p>File List &gt; include &gt; Robot.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#pragma once\n\n#include &lt;optional&gt;\n\n#include &lt;frc/TimedRobot.h&gt;\n#include &lt;frc2/command/CommandPtr.h&gt;\n\n#include \"RobotContainer.h\"\n\nclass Robot : public frc::TimedRobot {\n public:\n  Robot();\n  void RobotPeriodic() override;\n  void DisabledInit() override;\n  void DisabledPeriodic() override;\n  void AutonomousInit() override;\n  void AutonomousPeriodic() override;\n  void TeleopInit() override;\n  void TeleopPeriodic() override;\n  void TestPeriodic() override;\n  void SimulationInit() override;\n  void SimulationPeriodic() override;\n\n private:\n  // Have it empty by default so that if testing teleop it\n  // doesn't have undefined behavior and potentially crash.\n  std::optional&lt;frc2::CommandPtr&gt; m_autonomousCommand;\n\n  RobotContainer m_container;\n};\n</code></pre>"},{"location":"jacks-summer-robot/_robot_container_8h.html","title":"File RobotContainer.h","text":"<p>FileList &gt; include &gt; RobotContainer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;frc2/command/CommandPtr.h&gt;</code></li> <li><code>#include &lt;frc2/command/button/CommandXboxController.h&gt;</code></li> <li><code>#include \"Constants.h\"</code></li> <li><code>#include \"subsystems/ExampleSubsystem.h\"</code></li> </ul>"},{"location":"jacks-summer-robot/_robot_container_8h.html#classes","title":"Classes","text":"Type Name class RobotContainer <p>The documentation for this class was generated from the following file <code>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/main/include/RobotContainer.h</code></p>"},{"location":"jacks-summer-robot/_robot_container_8h_source.html","title":"File RobotContainer.h","text":"<p>File List &gt; include &gt; RobotContainer.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) FIRST and other WPILib contributors.\n// Open Source Software; you can modify and/or share it under the terms of\n// the WPILib BSD license file in the root directory of this project.\n\n#pragma once\n\n#include &lt;frc2/command/CommandPtr.h&gt;\n#include &lt;frc2/command/button/CommandXboxController.h&gt;\n\n#include \"Constants.h\"\n#include \"subsystems/ExampleSubsystem.h\"\n\nclass RobotContainer {\n public:\n  RobotContainer();\n\n  frc2::CommandPtr GetAutonomousCommand();\n\n private:\n  // Replace with CommandPS4Controller or CommandJoystick if needed\n  frc2::CommandXboxController m_driverController{\n      OperatorConstants::kDriverControllerPort};\n\n  // The robot's subsystems are defined here...\n  ExampleSubsystem m_subsystem;\n\n  void ConfigureBindings();\n};\n</code></pre>"},{"location":"jacks-summer-robot/namespaces.html","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace OperatorConstants </li> <li>namespace autos </li> <li>namespace frc </li> <li>namespace frc2 </li> </ul>"},{"location":"jacks-summer-robot/classes.html","title":"Class Index","text":""},{"location":"jacks-summer-robot/classes.html#e","title":"e","text":"<ul> <li>ExampleCommand</li> <li>ExampleSubsystem</li> </ul>"},{"location":"jacks-summer-robot/classes.html#r","title":"r","text":"<ul> <li>Robot</li> <li>RobotContainer</li> </ul>"},{"location":"jacks-summer-robot/hierarchy.html","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class RobotContainer </li> <li>class frc2::CommandHelper&lt; frc2::Command, ExampleCommand &gt; <ul> <li>class ExampleCommand </li> </ul> </li> <li>class frc2::SubsystemBase <ul> <li>class ExampleSubsystem </li> </ul> </li> <li>class frc::TimedRobot <ul> <li>class Robot </li> </ul> </li> </ul>"},{"location":"jacks-summer-robot/modules.html","title":"Modules","text":"<p>No modules found.</p>"},{"location":"jacks-summer-robot/pages.html","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"jacks-summer-robot/class_members.html","title":"Class Members","text":""},{"location":"jacks-summer-robot/class_members.html#a","title":"a","text":"<ul> <li>AutonomousInit (Robot)</li> <li>AutonomousPeriodic (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#c","title":"c","text":"<ul> <li>ConfigureBindings (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#d","title":"d","text":"<ul> <li>DisabledInit (Robot)</li> <li>DisabledPeriodic (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#e","title":"e","text":"<ul> <li>ExampleCommand (ExampleCommand)</li> <li>ExampleCondition (ExampleSubsystem)</li> <li>ExampleMethodCommand (ExampleSubsystem)</li> <li>ExampleSubsystem (ExampleSubsystem)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#g","title":"g","text":"<ul> <li>GetAutonomousCommand (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#m","title":"m","text":"<ul> <li>m_subsystem (ExampleCommand, RobotContainer)</li> <li>m_autonomousCommand (Robot)</li> <li>m_container (Robot)</li> <li>m_driverController (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#p","title":"p","text":"<ul> <li>Periodic (ExampleSubsystem)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#r","title":"r","text":"<ul> <li>Robot (Robot)</li> <li>RobotPeriodic (Robot)</li> <li>RobotContainer (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#s","title":"s","text":"<ul> <li>SimulationPeriodic (ExampleSubsystem, Robot)</li> <li>SimulationInit (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_members.html#t","title":"t","text":"<ul> <li>TeleopInit (Robot)</li> <li>TeleopPeriodic (Robot)</li> <li>TestPeriodic (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html","title":"Class Member Functions","text":""},{"location":"jacks-summer-robot/class_member_functions.html#a","title":"a","text":"<ul> <li>AutonomousInit (Robot)</li> <li>AutonomousPeriodic (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#c","title":"c","text":"<ul> <li>ConfigureBindings (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#d","title":"d","text":"<ul> <li>DisabledInit (Robot)</li> <li>DisabledPeriodic (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#e","title":"e","text":"<ul> <li>ExampleCommand (ExampleCommand)</li> <li>ExampleCondition (ExampleSubsystem)</li> <li>ExampleMethodCommand (ExampleSubsystem)</li> <li>ExampleSubsystem (ExampleSubsystem)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#g","title":"g","text":"<ul> <li>GetAutonomousCommand (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#p","title":"p","text":"<ul> <li>Periodic (ExampleSubsystem)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#r","title":"r","text":"<ul> <li>Robot (Robot)</li> <li>RobotPeriodic (Robot)</li> <li>RobotContainer (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#s","title":"s","text":"<ul> <li>SimulationPeriodic (ExampleSubsystem, Robot)</li> <li>SimulationInit (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_member_functions.html#t","title":"t","text":"<ul> <li>TeleopInit (Robot)</li> <li>TeleopPeriodic (Robot)</li> <li>TestPeriodic (Robot)</li> </ul>"},{"location":"jacks-summer-robot/class_member_variables.html","title":"Class Member Variables","text":""},{"location":"jacks-summer-robot/class_member_variables.html#m","title":"m","text":"<ul> <li>m_subsystem (ExampleCommand, RobotContainer)</li> <li>m_autonomousCommand (Robot)</li> <li>m_container (Robot)</li> <li>m_driverController (RobotContainer)</li> </ul>"},{"location":"jacks-summer-robot/class_member_typedefs.html","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"jacks-summer-robot/class_member_enums.html","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"jacks-summer-robot/namespace_members.html","title":"Namespace Members","text":""},{"location":"jacks-summer-robot/namespace_members.html#e","title":"e","text":"<ul> <li>ExampleAuto (autos)</li> </ul>"},{"location":"jacks-summer-robot/namespace_members.html#k","title":"k","text":"<ul> <li>kDriverControllerPort (OperatorConstants)</li> </ul>"},{"location":"jacks-summer-robot/namespace_member_functions.html","title":"Namespace Member Functions","text":""},{"location":"jacks-summer-robot/namespace_member_functions.html#e","title":"e","text":"<ul> <li>ExampleAuto (autos)</li> </ul>"},{"location":"jacks-summer-robot/namespace_member_variables.html","title":"Namespace Member Variables","text":""},{"location":"jacks-summer-robot/namespace_member_variables.html#k","title":"k","text":"<ul> <li>kDriverControllerPort (OperatorConstants)</li> </ul>"},{"location":"jacks-summer-robot/namespace_member_typedefs.html","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"jacks-summer-robot/namespace_member_enums.html","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"jacks-summer-robot/functions.html","title":"Functions","text":""},{"location":"jacks-summer-robot/functions.html#m","title":"m","text":"<ul> <li>main (Robot.cpp)</li> </ul>"},{"location":"jacks-summer-robot/macros.html","title":"Macros","text":"<p>Nothing related to Macros found.</p>"},{"location":"jacks-summer-robot/variables.html","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"jacks-summer-robot/links.html","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}