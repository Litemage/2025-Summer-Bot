<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="xbox__controller_8cpp" kind="file" language="C++">
    <compoundname>xbox_controller.cpp</compoundname>
    <includes refid="xbox__controller_8h" local="yes">argos_lib/controller/xbox_controller.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/xbox_controller.cpp</label>
        <link refid="xbox__controller_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vibration.h</label>
        <link refid="vibration_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>argos_lib/controller/xbox_controller.h</label>
        <link refid="xbox__controller_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>argos_lib/general/debounce_settings.h</label>
        <link refid="debounce__settings_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="3">
        <label>frc/GenericHID.h</label>
      </node>
      <node id="4">
        <label>frc2/command/button/Trigger.h</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="8">
        <label>units/time.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;argos_lib/controller/xbox_controller.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceargos__lib" kindref="compound">argos_lib</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">XboxController::XboxController(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)<sp/>:<sp/>frc::GenericHID(port),<sp/>m_vibrationModel(<ref refid="namespaceargos__lib_1a9bdc8d0bc40d923285b6350108692133" kindref="member">VibrationOff</ref>())<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>m_buttonDebounceSettings.fill({0_ms,<sp/>0_ms});</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>m_buttonDebounceStatus.fill(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>m_rawButtonStatus.fill(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>m_buttonDebounceTransitionTime.fill(std::chrono::steady_clock::now());</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1aeeddcd789554e899d6fc243b481edb90" kindref="member">XboxController::SetButtonDebounce</ref>(Button<sp/>targetButton,<sp/><ref refid="structargos__lib_1_1_debounce_settings" kindref="compound">DebounceSettings</ref><sp/>newSettings)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>m_buttonDebounceSettings.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(targetButton))<sp/>=<sp/>newSettings;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a34a99a66914262ee5e1e9b8dfbe46ef1" kindref="member">XboxController::SwapSettings</ref>(<ref refid="classargos__lib_1_1_xbox_controller" kindref="compound">XboxController</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>std::swap(m_buttonDebounceSettings,<sp/>other.m_buttonDebounceSettings);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>std::fill(m_rawButtonStatus.begin(),<sp/>m_rawButtonStatus.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::fill(other.m_rawButtonStatus.begin(),<sp/>other.m_rawButtonStatus.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>std::fill(m_buttonDebounceStatus.begin(),<sp/>m_buttonDebounceStatus.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::fill(other.m_buttonDebounceStatus.begin(),<sp/>other.m_buttonDebounceStatus.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now{std::chrono::steady_clock::now()};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::fill(m_buttonDebounceTransitionTime.begin(),<sp/>m_buttonDebounceTransitionTime.end(),<sp/>now);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::fill(other.m_buttonDebounceTransitionTime.begin(),<sp/>other.m_buttonDebounceTransitionTime.end(),<sp/>now);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1af845a5fb5316e2f8d9c68e8cb60966ff" kindref="member">XboxController::GetX</ref>(JoystickHand<sp/>hand)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetRawAxis(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hand<sp/>==<sp/>JoystickHand::kLeftHand<sp/>?<sp/>Axis::kLeftX<sp/>:<sp/>Axis::kRightX));</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1aa8e565e9547cea97e7bdd92143b7b8fa" kindref="member">XboxController::GetY</ref>(JoystickHand<sp/>hand)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetRawAxis(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hand<sp/>==<sp/>JoystickHand::kLeftHand<sp/>?<sp/>Axis::kLeftY<sp/>:<sp/>Axis::kRightY));</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1adfd321a87d96b003748b642fdf711601" kindref="member">XboxController::GetTriggerAxis</ref>(JoystickHand<sp/>hand)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetRawAxis(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hand<sp/>==<sp/>JoystickHand::kLeftHand<sp/>?<sp/>Axis::kLeftTrigger<sp/>:<sp/>Axis::kRightTrigger));</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">XboxController::GetDebouncedButton</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">UpdateButton</ref>(buttonIdx).<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status_1a6309274d7ea7260c5525dfc00ef3c4ec" kindref="member">debounceActive</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1afbef95cfa675c9d7f4fac9b1fd1af79f" kindref="member">XboxController::GetDebouncedButtonPressed</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">UpdateButton</ref>(buttonIdx).<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status_1ab2ccf7dddb335a48096822e9425e8d44" kindref="member">debouncePress</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a158a69ce5cc44c84e98bfd5f1bae3218" kindref="member">XboxController::GetDebouncedButtonReleased</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">UpdateButton</ref>(buttonIdx).<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status_1ac501c6389960221bfa08cf7615155eb3" kindref="member">debounceRelease</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">XboxController::GetDebouncedButton</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::vector&lt;UpdateStatus&gt;<sp/>updates;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>updates.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>std::transform(buttonCombo.begin(),<sp/>buttonCombo.end(),<sp/>std::back_inserter(updates),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>UpdateButton(buttonIdx);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.debounceActive;<sp/>});</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1afbef95cfa675c9d7f4fac9b1fd1af79f" kindref="member">XboxController::GetDebouncedButtonPressed</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::vector&lt;UpdateStatus&gt;<sp/>updates;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>updates.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::transform(buttonCombo.begin(),<sp/>buttonCombo.end(),<sp/>std::back_inserter(updates),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>UpdateButton(buttonIdx);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.debounceActive;<sp/>})<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::any_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.debouncePress;<sp/>});</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a158a69ce5cc44c84e98bfd5f1bae3218" kindref="member">XboxController::GetDebouncedButtonReleased</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::vector&lt;UpdateStatus&gt;<sp/>updates;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>updates.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::transform(buttonCombo.begin(),<sp/>buttonCombo.end(),<sp/>std::back_inserter(updates),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>UpdateButton(buttonIdx);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::none_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.debounceActive;<sp/>})<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::any_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.debounceRelease;<sp/>});</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">XboxController::GetRawButton</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">UpdateButton</ref>(buttonIdx).<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status_1ac5ead71c2f9168bb43650a18606a104f" kindref="member">rawActive</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a932ee9d5507f553956cdccd270dca930" kindref="member">XboxController::GetRawButtonPressed</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">UpdateButton</ref>(buttonIdx).<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status_1a8b0dfa6c97d33cc308c1be26d6b3e180" kindref="member">pressed</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1acd543af0f487a0c8c0b80a6377cf168e" kindref="member">XboxController::GetRawButtonReleased</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">UpdateButton</ref>(buttonIdx).<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status_1ad769829e7275b925a9ec9cafc70e198e" kindref="member">released</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">XboxController::GetRawButton</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;UpdateStatus&gt;<sp/>updates;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>updates.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::transform(buttonCombo.begin(),<sp/>buttonCombo.end(),<sp/>std::back_inserter(updates),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>UpdateButton(buttonIdx);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.rawActive;<sp/>});</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a932ee9d5507f553956cdccd270dca930" kindref="member">XboxController::GetRawButtonPressed</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::vector&lt;UpdateStatus&gt;<sp/>updates;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>updates.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::transform(buttonCombo.begin(),<sp/>buttonCombo.end(),<sp/>std::back_inserter(updates),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>UpdateButton(buttonIdx);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.rawActive;<sp/>})<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::any_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.pressed;<sp/>});</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1acd543af0f487a0c8c0b80a6377cf168e" kindref="member">XboxController::GetRawButtonReleased</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>std::vector&lt;UpdateStatus&gt;<sp/>updates;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>updates.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::transform(buttonCombo.begin(),<sp/>buttonCombo.end(),<sp/>std::back_inserter(updates),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>UpdateButton(buttonIdx);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::none_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.rawActive;<sp/>})<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::any_of(updates.begin(),<sp/>updates.end(),<sp/>[](<ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>newState)<sp/>{<sp/>return<sp/>newState.released;<sp/>});</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">VibrationModel<sp/><ref refid="classargos__lib_1_1_xbox_controller_1ac2dbe34f55893300f05ff9694d8144de" kindref="member">XboxController::GetVibration</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vibrationModel;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a03150062f39deee57cd6e83cd05a9ea5" kindref="member">XboxController::SetVibration</ref>(VibrationModel<sp/>newVibrationModel)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>m_vibrationModel<sp/>=<sp/>newVibrationModel;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a37e4539aa4e0cc854c05ffb9a24ba6db" kindref="member">UpdateVibration</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a37e4539aa4e0cc854c05ffb9a24ba6db" kindref="member">XboxController::UpdateVibration</ref>()<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vibrationStatus<sp/>=<sp/>m_vibrationModel();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>SetRumble(kLeftRumble,<sp/>vibrationStatus.intensityLeft);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>SetRumble(kRightRumble,<sp/>vibrationStatus.intensityRight);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">XboxController::UpdateStatus</ref><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a9646359d9a7bd868f0973d53640c24dc" kindref="member">XboxController::UpdateButton</ref>(Button<sp/>buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="structargos__lib_1_1_xbox_controller_1_1_update_status" kindref="compound">UpdateStatus</ref><sp/>retVal;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Limit<sp/>annoying<sp/>joystick<sp/>not<sp/>connected<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsConnected())<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newVal;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(buttonIdx)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kA:</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kB:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kX:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kY:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kBumperLeft:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kBumperRight:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kBack:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kStart:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kStickLeft:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::kStickRight:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/>frc::GenericHID::GetRawButton(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fca5ca9b01dc72630050103311fe84c2972" kindref="member">Button::kLeftTrigger</ref>:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/><ref refid="classargos__lib_1_1_xbox_controller_1adfd321a87d96b003748b642fdf711601" kindref="member">GetTriggerAxis</ref>(JoystickHand::kLeftHand)<sp/>&gt;<sp/>analogTriggerThresh;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fca3c77ef6a8e347f61ef35bd485f14878a" kindref="member">Button::kRightTrigger</ref>:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/><ref refid="classargos__lib_1_1_xbox_controller_1adfd321a87d96b003748b642fdf711601" kindref="member">GetTriggerAxis</ref>(JoystickHand::kRightHand)<sp/>&gt;<sp/>analogTriggerThresh;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fca8a9e8c8811f2a710615e133456229ee5" kindref="member">Button::kUp</ref>:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/>GetPOVButtons().up;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fca2dd2b017192f8a09367d48c7648213c9" kindref="member">Button::kRight</ref>:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/>GetPOVButtons().right;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fca3bc2ec3237c6d119b0b5c4225122a07e" kindref="member">Button::kDown</ref>:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/>GetPOVButtons().down;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fca2d5fde1d924910a2a01ecd8e70a87c28" kindref="member">Button::kLeft</ref>:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVal<sp/>=<sp/>GetPOVButtons().left;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Button::COUNT:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>button<sp/>index<sp/>selected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prevRawVal<sp/>=<sp/>m_rawButtonStatus.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activeDebounceVal<sp/>=<sp/>m_buttonDebounceStatus.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>curTime<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>time<sp/>when<sp/>first<sp/>new<sp/>button<sp/>state<sp/>was<sp/>detected<sp/>so<sp/>debounce<sp/>has<sp/>reference<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevRawVal<sp/>==<sp/>activeDebounceVal<sp/>&amp;&amp;<sp/>newVal<sp/>!=<sp/>activeDebounceVal)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buttonDebounceTransitionTime.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx))<sp/>=<sp/>curTime;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>activeTransitionTime<sp/>=<sp/>m_buttonDebounceTransitionTime.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>retVal.pressed<sp/>=<sp/>newVal<sp/>&amp;&amp;<sp/>!prevRawVal;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>retVal.released<sp/>=<sp/>!newVal<sp/>&amp;&amp;<sp/>prevRawVal;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newVal<sp/>!=<sp/>activeDebounceVal)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>timeSinceTransition<sp/>=<sp/>units::millisecond_t{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(curTime<sp/>-<sp/>activeTransitionTime).count())};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newVal)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeSinceTransition<sp/>&gt;=<sp/>m_buttonDebounceSettings.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx)).activateTime)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal.debouncePress<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buttonDebounceStatus.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx))<sp/>=<sp/>newVal;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeSinceTransition<sp/>&gt;=<sp/>m_buttonDebounceSettings.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx)).clearTime)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal.debounceRelease<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buttonDebounceStatus.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx))<sp/>=<sp/>newVal;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>retVal.rawActive<sp/>=<sp/>newVal;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>retVal.debounceActive<sp/>=<sp/>m_buttonDebounceStatus.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>m_rawButtonStatus.at(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buttonIdx))<sp/>=<sp/>newVal;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1a05d3525ce06746637b949d058f4987a0" kindref="member">XboxController::TriggerRaw</ref>(Button<sp/>button)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a05d3525ce06746637b949d058f4987a0" kindref="member">TriggerRaw</ref>(std::vector{button});</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1a05d3525ce06746637b949d058f4987a0" kindref="member">XboxController::TriggerRaw</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frc2::Trigger([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>buttonCombo]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">GetRawButton</ref>(buttonCombo);<sp/>});</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1a976135202ef3640cee8da7786cc8cbaf" kindref="member">XboxController::TriggerRawAnyOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerAnyOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">GetRawButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1a55a1d428930a842d49e4aabc518d59fc" kindref="member">XboxController::TriggerRawAllOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerAllOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">GetRawButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1a0b086f832c1cef307a3ea04741da5a6d" kindref="member">XboxController::TriggerRawNoneOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerNoneOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">GetRawButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1af201e315dfabb84823c09ed38b274dfd" kindref="member">XboxController::TriggerRawOneOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerOneOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1adccdc70b774b397aa5628b9d6352f590" kindref="member">GetRawButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1ad3c0b12101691bfcfdfa80cb88df69e6" kindref="member">XboxController::TriggerDebounced</ref>(Button<sp/>button)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1ad3c0b12101691bfcfdfa80cb88df69e6" kindref="member">TriggerDebounced</ref>(std::vector{button});</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1ad3c0b12101691bfcfdfa80cb88df69e6" kindref="member">XboxController::TriggerDebounced</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frc2::Trigger([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>buttonCombo]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">GetDebouncedButton</ref>(buttonCombo);<sp/>});</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1aa42366fb0870f1503739d084bea2709b" kindref="member">XboxController::TriggerDebouncedAnyOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerAnyOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">GetDebouncedButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1afa43e996ddd85797c208fbd8a7dd1deb" kindref="member">XboxController::TriggerDebouncedAllOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerAllOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">GetDebouncedButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1a7ae9af3e3502e2f25ed2f55285f3fcda" kindref="member">XboxController::TriggerDebouncedNoneOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerNoneOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">GetDebouncedButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">frc2::Trigger<sp/><ref refid="classargos__lib_1_1_xbox_controller_1ac139207d20af38f564517c0d9a6aae0e" kindref="member">XboxController::TriggerDebouncedOneOf</ref>(std::vector&lt;Button&gt;<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerOneOf(buttonCombo,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classargos__lib_1_1_xbox_controller_1a067fb8b43b80533b5ec763b7105f40fc" kindref="member">Button</ref><sp/>button)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classargos__lib_1_1_xbox_controller_1ae7bc91621898e77ae7118a2e12cfb8bd" kindref="member">GetDebouncedButton</ref>(button);<sp/>});</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">frc2::Trigger<sp/>XboxController::TriggerAnyOf(std::vector&lt;Button&gt;<sp/>buttonCombo,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(Button)&gt;<sp/>buttonGetterFunc)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>std::function&lt;bool()&gt;<sp/>compoundConditional{[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>button<sp/>:<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>compoundConditional<sp/>=<sp/>[compoundConditional,<sp/>button,<sp/>buttonGetterFunc]()<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compoundConditional()<sp/>||<sp/>buttonGetterFunc(button);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frc2::Trigger{compoundConditional};</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">frc2::Trigger<sp/>XboxController::TriggerAllOf(std::vector&lt;Button&gt;<sp/>buttonCombo,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(Button)&gt;<sp/>buttonGetterFunc)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>std::function&lt;bool()&gt;<sp/>compoundConditional{[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}};</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>button<sp/>:<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>compoundConditional<sp/>=<sp/>[compoundConditional,<sp/>button,<sp/>buttonGetterFunc]()<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compoundConditional()<sp/>&amp;&amp;<sp/>buttonGetterFunc(button);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frc2::Trigger{compoundConditional};</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">frc2::Trigger<sp/>XboxController::TriggerNoneOf(std::vector&lt;Button&gt;<sp/>buttonCombo,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(Button)&gt;<sp/>buttonGetterFunc)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>std::function&lt;bool()&gt;<sp/>compoundConditional{[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>button<sp/>:<sp/>buttonCombo)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>compoundConditional<sp/>=<sp/>[compoundConditional,<sp/>button,<sp/>buttonGetterFunc]()<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compoundConditional()<sp/>&amp;&amp;<sp/>!buttonGetterFunc(button);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frc2::Trigger{compoundConditional};</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">frc2::Trigger<sp/>XboxController::TriggerOneOf(std::vector&lt;Button&gt;<sp/>buttonCombo,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(Button)&gt;<sp/>buttonGetterFunc)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buttonCombo.size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classargos__lib_1_1_xbox_controller_1a976135202ef3640cee8da7786cc8cbaf" kindref="member">TriggerRawAnyOf</ref>(buttonCombo);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>std::vector&lt;std::function&lt;bool()&gt;&gt;<sp/>compositeConditionals;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>compositeConditionals.reserve(buttonCombo.size());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exclusiveTrueItr<sp/>=<sp/>buttonCombo.begin();<sp/>exclusiveTrueItr<sp/>!=<sp/>buttonCombo.end();<sp/>++exclusiveTrueItr)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>button<sp/>=<sp/>*exclusiveTrueItr;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;bool()&gt;<sp/>newCompositeConditional<sp/>=<sp/>([button,<sp/>buttonGetterFunc]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buttonGetterFunc(button);<sp/>});</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherItr<sp/>=<sp/>buttonCombo.begin();<sp/>otherItr<sp/>!=<sp/>buttonCombo.end();<sp/>++otherItr)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exclusiveTrueItr<sp/>!=<sp/>otherItr)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherButton<sp/>=<sp/>*otherItr;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCompositeConditional<sp/>=<sp/>[newCompositeConditional,<sp/>otherButton,<sp/>buttonGetterFunc]()<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newCompositeConditional()<sp/>&amp;&amp;<sp/>!buttonGetterFunc(otherButton);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>compositeConditionals.emplace_back(newCompositeConditional);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>std::function&lt;bool()&gt;<sp/>exclusiveConditional<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compositeCheck<sp/>:<sp/>compositeConditionals)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>exclusiveConditional<sp/>=<sp/>[exclusiveConditional,<sp/>compositeCheck]()<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exclusiveConditional()<sp/>||<sp/>compositeCheck();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frc2::Trigger{exclusiveConditional};</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">XboxController::DPadButtons<sp/>XboxController::GetPOVButtons()<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>povAngle{GetPOV()};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DPadButtons{(povAngle<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>povAngle<sp/>&lt;=<sp/>45)<sp/>||<sp/>povAngle<sp/>&gt;=<sp/>315,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>povAngle<sp/>&gt;=<sp/>45<sp/>&amp;&amp;<sp/>povAngle<sp/>&lt;=<sp/>135,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>povAngle<sp/>&gt;=<sp/>135<sp/>&amp;&amp;<sp/>povAngle<sp/>&lt;=<sp/>225,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>povAngle<sp/>&gt;=<sp/>225<sp/>&amp;&amp;<sp/>povAngle<sp/>&lt;=<sp/>315};</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/jsime/OneDrive/Documents/Git/2025-Summer-Bot/src/argos_lib/cpp/controller/xbox_controller.cpp"/>
  </compounddef>
</doxygen>
